{"ast":null,"code":"var _templateObject, _templateObject2;\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\nfunction _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (null != _i) {\n    var _s,\n      _e,\n      _x,\n      _r,\n      _arr = [],\n      _n = !0,\n      _d = !1;\n    try {\n      if (_x = (_i = _i.call(arr)).next, 0 === i) {\n        if (Object(_i) !== _i) return;\n        _n = !1;\n      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);\n    } catch (err) {\n      _d = !0, _e = err;\n    } finally {\n      try {\n        if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return;\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nimport \"core-js/modules/web.immediate.js\";\nimport { addClass, empty, observeVisibilityChangeOnce, removeClass } from \"./helpers/dom/element.mjs\";\nimport { isFunction } from \"./helpers/function.mjs\";\nimport { isDefined, isUndefined, isRegExp, _injectProductInfo, isEmpty } from \"./helpers/mixed.mjs\";\nimport { isMobileBrowser, isIpadOS } from \"./helpers/browser.mjs\";\nimport { warn } from \"./helpers/console.mjs\";\nimport { toSingleLine } from \"./helpers/templateLiteralTag.mjs\";\nimport EditorManager from \"./editorManager.mjs\";\nimport EventManager from \"./eventManager.mjs\";\nimport { deepClone, duckSchema, isObjectEqual, isObject, deepObjectSize, hasOwnProperty, createObjectPropListener, objectEach } from \"./helpers/object.mjs\";\nimport { arrayMap, arrayEach, arrayReduce, getDifferenceOfArrays, stringToArray, pivot } from \"./helpers/array.mjs\";\nimport { instanceToHTML } from \"./utils/parseTable.mjs\";\nimport { getPlugin, getPluginsNames } from \"./plugins/registry.mjs\";\nimport { getRenderer } from \"./renderers/registry.mjs\";\nimport { getEditor } from \"./editors/registry.mjs\";\nimport { getValidator } from \"./validators/registry.mjs\";\nimport { randomString, toUpperCaseFirst } from \"./helpers/string.mjs\";\nimport { rangeEach, rangeEachReverse, isNumericLike } from \"./helpers/number.mjs\";\nimport TableView from \"./tableView.mjs\";\nimport DataSource from \"./dataMap/dataSource.mjs\";\nimport { spreadsheetColumnLabel } from \"./helpers/data.mjs\";\nimport { IndexMapper } from \"./translations/index.mjs\";\nimport { registerAsRootInstance, hasValidParameter, isRootInstance } from \"./utils/rootInstance.mjs\";\nimport { ViewportColumnsCalculator } from \"./3rdparty/walkontable/src/index.mjs\";\nimport Hooks from \"./pluginHooks.mjs\";\nimport { hasLanguageDictionary, getValidLanguageCode, getTranslatedPhrase } from \"./i18n/registry.mjs\";\nimport { warnUserAboutLanguageRegistration, normalizeLanguageCode } from \"./i18n/utils.mjs\";\nimport { Selection } from \"./selection/index.mjs\";\nimport { MetaManager, DynamicCellMetaMod, ExtendMetaPropertiesMod, replaceData } from \"./dataMap/index.mjs\";\nimport { createUniqueMap } from \"./utils/dataStructures/uniqueMap.mjs\";\nimport { createShortcutManager } from \"./shortcuts/index.mjs\";\nvar SHORTCUTS_GROUP = 'gridDefault';\nvar activeGuid = null;\nvar deprecationWarns = new Set();\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n/**\n * Handsontable constructor.\n *\n * @core\n * @class Core\n * @description\n *\n * The `Handsontable` class (known as the `Core`) lets you modify the grid's behavior by using Handsontable's public API methods.\n *\n * ::: only-for react\n * To use these methods, associate a Handsontable instance with your instance\n * of the [`HotTable` component](@/guides/getting-started/installation.md#_4-use-the-hottable-component),\n * by using React's `ref` feature (read more on the [Instance methods](@/guides/getting-started/react-methods.md) page).\n * :::\n *\n * ## How to call a method\n *\n * ::: only-for javascript\n * ```js\n * // create a Handsontable instance\n * const hot = new Handsontable(document.getElementById('example'), options);\n *\n * // call a method\n * hot.setDataAtCell(0, 0, 'new value');\n * ```\n * :::\n *\n * ::: only-for react\n * ```jsx{3,7,13}\n * import { useRef } from 'react';\n *\n * const hotTableComponent = useRef(null);\n *\n * <HotTable\n *   // associate your `HotTable` component with a Handsontable instance\n *   ref={hotTableComponent}\n *   settings={options}\n * />\n *\n * // access the Handsontable instance, under the `.current.hotInstance` property\n * // call a method\n * hotTableComponent.current.hotInstance.setDataAtCell(0, 0, 'new value');\n * ```\n * :::\n *\n * @param {HTMLElement} rootElement The element to which the Handsontable instance is injected.\n * @param {object} userSettings The user defined options.\n * @param {boolean} [rootInstanceSymbol=false] Indicates if the instance is root of all later instances created.\n */\nexport default function Core(rootElement, userSettings) {\n  var _userSettings$layoutD,\n    _this = this;\n  var rootInstanceSymbol = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var preventScrollingToCell = false;\n  var instance = this;\n  var eventManager = new EventManager(instance);\n  var datamap;\n  var dataSource;\n  var grid;\n  var editorManager;\n  var firstRun = true;\n  if (hasValidParameter(rootInstanceSymbol)) {\n    registerAsRootInstance(this);\n  }\n\n  // TODO: check if references to DOM elements should be move to UI layer (Walkontable)\n  /**\n   * Reference to the container element.\n   *\n   * @private\n   * @type {HTMLElement}\n   */\n  this.rootElement = rootElement;\n  /**\n   * The nearest document over container.\n   *\n   * @private\n   * @type {Document}\n   */\n  this.rootDocument = rootElement.ownerDocument;\n  /**\n   * Window object over container's document.\n   *\n   * @private\n   * @type {Window}\n   */\n  this.rootWindow = this.rootDocument.defaultView;\n  /**\n   * A boolean to tell if the Handsontable has been fully destroyed. This is set to `true`\n   * after `afterDestroy` hook is called.\n   *\n   * @memberof Core#\n   * @member isDestroyed\n   * @type {boolean}\n   */\n  this.isDestroyed = false;\n  /**\n   * The counter determines how many times the render suspending was called. It allows\n   * tracking the nested suspending calls. For each render suspend resuming call the\n   * counter is decremented. The value equal to 0 means the render suspending feature\n   * is disabled.\n   *\n   * @private\n   * @type {number}\n   */\n  this.renderSuspendedCounter = 0;\n  /**\n   * The counter determines how many times the execution suspending was called. It allows\n   * tracking the nested suspending calls. For each execution suspend resuming call the\n   * counter is decremented. The value equal to 0 means the execution suspending feature\n   * is disabled.\n   *\n   * @private\n   * @type {number}\n   */\n  this.executionSuspendedCounter = 0;\n  var layoutDirection = (_userSettings$layoutD = userSettings === null || userSettings === void 0 ? void 0 : userSettings.layoutDirection) !== null && _userSettings$layoutD !== void 0 ? _userSettings$layoutD : 'inherit';\n  var rootElementDirection = ['rtl', 'ltr'].includes(layoutDirection) ? layoutDirection : this.rootWindow.getComputedStyle(this.rootElement).direction;\n  this.rootElement.setAttribute('dir', rootElementDirection);\n\n  /**\n   * Checks if the grid is rendered using the right-to-left layout direction.\n   *\n   * @since 12.0.0\n   * @memberof Core#\n   * @function isRtl\n   * @returns {boolean} True if RTL.\n   */\n  this.isRtl = function () {\n    return rootElementDirection === 'rtl';\n  };\n\n  /**\n   * Checks if the grid is rendered using the left-to-right layout direction.\n   *\n   * @since 12.0.0\n   * @memberof Core#\n   * @function isLtr\n   * @returns {boolean} True if LTR.\n   */\n  this.isLtr = function () {\n    return !instance.isRtl();\n  };\n\n  /**\n   * Returns 1 for LTR; -1 for RTL. Useful for calculations.\n   *\n   * @since 12.0.0\n   * @memberof Core#\n   * @function getDirectionFactor\n   * @returns {number} Returns 1 for LTR; -1 for RTL.\n   */\n  this.getDirectionFactor = function () {\n    return instance.isLtr() ? 1 : -1;\n  };\n  userSettings.language = getValidLanguageCode(userSettings.language);\n  var metaManager = new MetaManager(instance, userSettings, [DynamicCellMetaMod, ExtendMetaPropertiesMod]);\n  var tableMeta = metaManager.getTableMeta();\n  var globalMeta = metaManager.getGlobalMeta();\n  var pluginsRegistry = createUniqueMap();\n  this.container = this.rootDocument.createElement('div');\n  this.renderCall = false;\n  rootElement.insertBefore(this.container, rootElement.firstChild);\n  if (isRootInstance(this)) {\n    _injectProductInfo(userSettings.licenseKey, rootElement);\n  }\n  this.guid = \"ht_\".concat(randomString()); // this is the namespace for global events\n\n  /**\n   * Instance of index mapper which is responsible for managing the column indexes.\n   *\n   * @memberof Core#\n   * @member columnIndexMapper\n   * @type {IndexMapper}\n   */\n  this.columnIndexMapper = new IndexMapper();\n  /**\n   * Instance of index mapper which is responsible for managing the row indexes.\n   *\n   * @memberof Core#\n   * @member rowIndexMapper\n   * @type {IndexMapper}\n   */\n  this.rowIndexMapper = new IndexMapper();\n  dataSource = new DataSource(instance);\n  if (!this.rootElement.id || this.rootElement.id.substring(0, 3) === 'ht_') {\n    this.rootElement.id = this.guid; // if root element does not have an id, assign a random id\n  }\n\n  var visualToRenderableCoords = function visualToRenderableCoords(coords) {\n    var visualRow = coords.row,\n      visualColumn = coords.col;\n    return instance._createCellCoords(\n    // We just store indexes for rows and columns without headers.\n    visualRow >= 0 ? instance.rowIndexMapper.getRenderableFromVisualIndex(visualRow) : visualRow, visualColumn >= 0 ? instance.columnIndexMapper.getRenderableFromVisualIndex(visualColumn) : visualColumn);\n  };\n  var renderableToVisualCoords = function renderableToVisualCoords(coords) {\n    var renderableRow = coords.row,\n      renderableColumn = coords.col;\n    return instance._createCellCoords(\n    // We just store indexes for rows and columns without headers.\n    renderableRow >= 0 ? instance.rowIndexMapper.getVisualFromRenderableIndex(renderableRow) : renderableRow, renderableColumn >= 0 ? instance.columnIndexMapper.getVisualFromRenderableIndex(renderableColumn) : renderableColumn // eslint-disable-line max-len\n    );\n  };\n\n  var selection = new Selection(tableMeta, {\n    rowIndexMapper: function rowIndexMapper() {\n      return instance.rowIndexMapper;\n    },\n    columnIndexMapper: function columnIndexMapper() {\n      return instance.columnIndexMapper;\n    },\n    countCols: function countCols() {\n      return instance.countCols();\n    },\n    countRows: function countRows() {\n      return instance.countRows();\n    },\n    propToCol: function propToCol(prop) {\n      return datamap.propToCol(prop);\n    },\n    isEditorOpened: function isEditorOpened() {\n      return instance.getActiveEditor() ? instance.getActiveEditor().isOpened() : false;\n    },\n    countColsTranslated: function countColsTranslated() {\n      return _this.view.countRenderableColumns();\n    },\n    countRowsTranslated: function countRowsTranslated() {\n      return _this.view.countRenderableRows();\n    },\n    getShortcutManager: function getShortcutManager() {\n      return instance.getShortcutManager();\n    },\n    createCellCoords: function createCellCoords(row, column) {\n      return instance._createCellCoords(row, column);\n    },\n    createCellRange: function createCellRange(highlight, from, to) {\n      return instance._createCellRange(highlight, from, to);\n    },\n    visualToRenderableCoords: visualToRenderableCoords,\n    renderableToVisualCoords: renderableToVisualCoords,\n    isDisabledCellSelection: function isDisabledCellSelection(visualRow, visualColumn) {\n      return instance.getCellMeta(visualRow, visualColumn).disableVisualSelection;\n    }\n  });\n  this.selection = selection;\n  var onIndexMapperCacheUpdate = function onIndexMapperCacheUpdate(_ref) {\n    var hiddenIndexesChanged = _ref.hiddenIndexesChanged;\n    if (hiddenIndexesChanged) {\n      _this.selection.refresh();\n    }\n  };\n  this.columnIndexMapper.addLocalHook('cacheUpdated', onIndexMapperCacheUpdate);\n  this.rowIndexMapper.addLocalHook('cacheUpdated', onIndexMapperCacheUpdate);\n  this.selection.addLocalHook('beforeSetRangeStart', function (cellCoords) {\n    _this.runHooks('beforeSetRangeStart', cellCoords);\n  });\n  this.selection.addLocalHook('beforeSetRangeStartOnly', function (cellCoords) {\n    _this.runHooks('beforeSetRangeStartOnly', cellCoords);\n  });\n  this.selection.addLocalHook('beforeSetRangeEnd', function (cellCoords) {\n    _this.runHooks('beforeSetRangeEnd', cellCoords);\n    if (cellCoords.row < 0) {\n      cellCoords.row = _this.view._wt.wtTable.getFirstVisibleRow();\n    }\n    if (cellCoords.col < 0) {\n      cellCoords.col = _this.view._wt.wtTable.getFirstVisibleColumn();\n    }\n  });\n  this.selection.addLocalHook('afterSetRangeEnd', function (cellCoords) {\n    var preventScrolling = createObjectPropListener(false);\n    var selectionRange = _this.selection.getSelectedRange();\n    var _selectionRange$curre = selectionRange.current(),\n      from = _selectionRange$curre.from,\n      to = _selectionRange$curre.to;\n    var selectionLayerLevel = selectionRange.size() - 1;\n    _this.runHooks('afterSelection', from.row, from.col, to.row, to.col, preventScrolling, selectionLayerLevel);\n    _this.runHooks('afterSelectionByProp', from.row, instance.colToProp(from.col), to.row, instance.colToProp(to.col), preventScrolling, selectionLayerLevel); // eslint-disable-line max-len\n\n    var isSelectedByAnyHeader = _this.selection.isSelectedByAnyHeader();\n    var currentSelectedRange = _this.selection.selectedRange.current();\n    var scrollToCell = true;\n    if (preventScrollingToCell) {\n      scrollToCell = false;\n    }\n    if (preventScrolling.isTouched()) {\n      scrollToCell = !preventScrolling.value;\n    }\n    var isSelectedByRowHeader = _this.selection.isSelectedByRowHeader();\n    var isSelectedByColumnHeader = _this.selection.isSelectedByColumnHeader();\n    if (scrollToCell !== false) {\n      if (!isSelectedByAnyHeader) {\n        if (currentSelectedRange && !_this.selection.isMultiple()) {\n          _this.view.scrollViewport(visualToRenderableCoords(currentSelectedRange.from));\n        } else {\n          _this.view.scrollViewport(visualToRenderableCoords(cellCoords));\n        }\n      } else if (isSelectedByRowHeader) {\n        _this.view.scrollViewportVertically(instance.rowIndexMapper.getRenderableFromVisualIndex(cellCoords.row));\n      } else if (isSelectedByColumnHeader) {\n        _this.view.scrollViewportHorizontally(instance.columnIndexMapper.getRenderableFromVisualIndex(cellCoords.col));\n      }\n    }\n\n    // @TODO: These CSS classes are no longer needed anymore. They are used only as a indicator of the selected\n    // rows/columns in the MergedCells plugin (via border.js#L520 in the walkontable module). After fixing\n    // the Border class this should be removed.\n    if (isSelectedByRowHeader && isSelectedByColumnHeader) {\n      addClass(_this.rootElement, ['ht__selection--rows', 'ht__selection--columns']);\n    } else if (isSelectedByRowHeader) {\n      removeClass(_this.rootElement, 'ht__selection--columns');\n      addClass(_this.rootElement, 'ht__selection--rows');\n    } else if (isSelectedByColumnHeader) {\n      removeClass(_this.rootElement, 'ht__selection--rows');\n      addClass(_this.rootElement, 'ht__selection--columns');\n    } else {\n      removeClass(_this.rootElement, ['ht__selection--rows', 'ht__selection--columns']);\n    }\n    _this._refreshBorders(null);\n  });\n  this.selection.addLocalHook('afterSelectionFinished', function (cellRanges) {\n    var selectionLayerLevel = cellRanges.length - 1;\n    var _cellRanges$selection = cellRanges[selectionLayerLevel],\n      from = _cellRanges$selection.from,\n      to = _cellRanges$selection.to;\n    _this.runHooks('afterSelectionEnd', from.row, from.col, to.row, to.col, selectionLayerLevel);\n    _this.runHooks('afterSelectionEndByProp', from.row, instance.colToProp(from.col), to.row, instance.colToProp(to.col), selectionLayerLevel);\n  });\n  this.selection.addLocalHook('afterIsMultipleSelection', function (isMultiple) {\n    var changedIsMultiple = _this.runHooks('afterIsMultipleSelection', isMultiple.value);\n    if (isMultiple.value) {\n      isMultiple.value = changedIsMultiple;\n    }\n  });\n  this.selection.addLocalHook('beforeModifyTransformStart', function (cellCoordsDelta) {\n    _this.runHooks('modifyTransformStart', cellCoordsDelta);\n  });\n  this.selection.addLocalHook('afterModifyTransformStart', function (coords, rowTransformDir, colTransformDir) {\n    _this.runHooks('afterModifyTransformStart', coords, rowTransformDir, colTransformDir);\n  });\n  this.selection.addLocalHook('beforeModifyTransformEnd', function (cellCoordsDelta) {\n    _this.runHooks('modifyTransformEnd', cellCoordsDelta);\n  });\n  this.selection.addLocalHook('afterModifyTransformEnd', function (coords, rowTransformDir, colTransformDir) {\n    _this.runHooks('afterModifyTransformEnd', coords, rowTransformDir, colTransformDir);\n  });\n  this.selection.addLocalHook('afterDeselect', function () {\n    editorManager.destroyEditor();\n    _this._refreshBorders();\n    removeClass(_this.rootElement, ['ht__selection--rows', 'ht__selection--columns']);\n    _this.runHooks('afterDeselect');\n  });\n  this.selection.addLocalHook('insertRowRequire', function (totalRows) {\n    _this.alter('insert_row_above', totalRows, 1, 'auto');\n  });\n  this.selection.addLocalHook('insertColRequire', function (totalCols) {\n    _this.alter('insert_col_start', totalCols, 1, 'auto');\n  });\n  grid = {\n    /**\n     * Inserts or removes rows and columns.\n     *\n     * @private\n     * @param {string} action Possible values: \"insert_row_above\", \"insert_row_below\", \"insert_col_start\", \"insert_col_end\",\n     *                        \"remove_row\", \"remove_col\".\n     * @param {number|Array} index Row or column visual index which from the alter action will be triggered.\n     *                             Alter actions such as \"remove_row\" and \"remove_col\" support array indexes in the\n     *                             format `[[index, amount], [index, amount]...]` this can be used to remove\n     *                             non-consecutive columns or rows in one call.\n     * @param {number} [amount=1] Amount of rows or columns to remove.\n     * @param {string} [source] Optional. Source of hook runner.\n     * @param {boolean} [keepEmptyRows] Optional. Flag for preventing deletion of empty rows.\n     */\n    alter: function alter(action, index) {\n      var _index, _index2;\n      var amount = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      var source = arguments.length > 3 ? arguments[3] : undefined;\n      var keepEmptyRows = arguments.length > 4 ? arguments[4] : undefined;\n      var normalizeIndexesGroup = function normalizeIndexesGroup(indexes) {\n        if (indexes.length === 0) {\n          return [];\n        }\n        var sortedIndexes = _toConsumableArray(indexes);\n\n        // Sort the indexes in ascending order.\n        sortedIndexes.sort(function (_ref2, _ref3) {\n          var _ref4 = _slicedToArray(_ref2, 1),\n            indexA = _ref4[0];\n          var _ref5 = _slicedToArray(_ref3, 1),\n            indexB = _ref5[0];\n          if (indexA === indexB) {\n            return 0;\n          }\n          return indexA > indexB ? 1 : -1;\n        });\n\n        // Normalize the {index, amount} groups into bigger groups.\n        var normalizedIndexes = arrayReduce(sortedIndexes, function (acc, _ref6) {\n          var _ref7 = _slicedToArray(_ref6, 2),\n            groupIndex = _ref7[0],\n            groupAmount = _ref7[1];\n          var previousItem = acc[acc.length - 1];\n          var _previousItem = _slicedToArray(previousItem, 2),\n            prevIndex = _previousItem[0],\n            prevAmount = _previousItem[1];\n          var prevLastIndex = prevIndex + prevAmount;\n          if (groupIndex <= prevLastIndex) {\n            var amountToAdd = Math.max(groupAmount - (prevLastIndex - groupIndex), 0);\n            previousItem[1] += amountToAdd;\n          } else {\n            acc.push([groupIndex, groupAmount]);\n          }\n          return acc;\n        }, [sortedIndexes[0]]);\n        return normalizedIndexes;\n      };\n\n      /* eslint-disable no-case-declarations */\n      switch (action) {\n        case 'insert_row':\n          // backward compatibility\n          if (!deprecationWarns.has(action)) {\n            deprecationWarns.add(action);\n            warn(toSingleLine(_templateObject || (_templateObject = _taggedTemplateLiteral([\"The `\", \"` action of the `alter()` method is deprecated and will be removed \\n                              in the next major release of Handsontable. Use the `insert_row_above` action instead.\"], [\"The \\\\`\", \"\\\\` action of the \\\\`alter()\\\\` method is deprecated and will be removed\\\\x20\\n                              in the next major release of Handsontable. Use the \\\\`insert_row_above\\\\` action instead.\"])), action));\n          }\n        // falls through\n        case 'insert_row_below':\n        case 'insert_row_above':\n          var numberOfSourceRows = instance.countSourceRows();\n          if (tableMeta.maxRows === numberOfSourceRows) {\n            return;\n          }\n\n          // `above` is the default behavior for creating new rows\n          var insertRowMode = action === 'insert_row_below' ? 'below' : 'above';\n\n          // The line below ensures backward compatibility of the `alter()` method's `insert_row` action.\n          // Calling the `insert_row` action with no arguments adds a new row at the end of the data set.\n          // Calling the `insert_row_above` action adds a new row at the beginning of the data set.\n          // eslint-disable-next-line no-param-reassign\n          index = (_index = index) !== null && _index !== void 0 ? _index : action === 'insert_row' || insertRowMode === 'below' ? numberOfSourceRows : 0;\n          var _datamap$createRow = datamap.createRow(index, amount, {\n              source: source,\n              mode: insertRowMode\n            }),\n            rowDelta = _datamap$createRow.delta,\n            startRowPhysicalIndex = _datamap$createRow.startPhysicalIndex;\n          if (rowDelta) {\n            var currentSelectedRange = selection.selectedRange.current();\n            var currentFromRange = currentSelectedRange === null || currentSelectedRange === void 0 ? void 0 : currentSelectedRange.from;\n            var currentFromRow = currentFromRange === null || currentFromRange === void 0 ? void 0 : currentFromRange.row;\n            var startVisualRowIndex = instance.toVisualRow(startRowPhysicalIndex);\n            if (selection.isSelectedByCorner()) {\n              instance.selectAll();\n            } else if (isDefined(currentFromRow) && currentFromRow >= startVisualRowIndex) {\n              // Moving the selection (if it exists) downward – it should be applied to the \"old\" row.\n              // TODO: The logic here should be handled by selection module.\n              var _currentSelectedRange = currentSelectedRange.to,\n                currentToRow = _currentSelectedRange.row,\n                currentToColumn = _currentSelectedRange.col;\n              var currentFromColumn = currentFromRange.col;\n\n              // Workaround: headers are not stored inside selection.\n              if (selection.isSelectedByRowHeader()) {\n                currentFromColumn = -1;\n              }\n\n              // Remove from the stack the last added selection as that selection below will be\n              // replaced by new transformed selection.\n              selection.getSelectedRange().pop();\n              // I can't use transforms as they don't work in negative indexes.\n              selection.setRangeStartOnly(instance._createCellCoords(currentFromRow + rowDelta, currentFromColumn), true);\n              selection.setRangeEnd(instance._createCellCoords(currentToRow + rowDelta, currentToColumn)); // will call render() internally\n            } else {\n              instance._refreshBorders(); // it will call render and prepare methods\n            }\n          }\n\n          break;\n        case 'insert_col':\n          // backward compatibility\n          if (!deprecationWarns.has(action)) {\n            deprecationWarns.add(action);\n            warn(toSingleLine(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"The `\", \"` action of the `alter()` method is deprecated and will be removed \\n                              in the next major release of Handsontable. Use the `insert_col_start` action instead.\"], [\"The \\\\`\", \"\\\\` action of the \\\\`alter()\\\\` method is deprecated and will be removed\\\\x20\\n                              in the next major release of Handsontable. Use the \\\\`insert_col_start\\\\` action instead.\"])), action));\n          }\n        // falls through\n        case 'insert_col_start':\n        case 'insert_col_end':\n          // \"start\" is a default behavior for creating new columns\n          var insertColumnMode = action === 'insert_col_end' ? 'end' : 'start';\n\n          // The line below ensures backward compatibility of the `alter()` method's `insert_col` action.\n          // Calling the `insert_col` action with no arguments adds a new column to the right of the data set.\n          // Calling the `insert_col_start` action adds a new column to the left of the data set.\n          // eslint-disable-next-line no-param-reassign\n          index = (_index2 = index) !== null && _index2 !== void 0 ? _index2 : action === 'insert_col' || insertColumnMode === 'end' ? instance.countSourceCols() : 0;\n          var _datamap$createCol = datamap.createCol(index, amount, {\n              source: source,\n              mode: insertColumnMode\n            }),\n            colDelta = _datamap$createCol.delta,\n            startColumnPhysicalIndex = _datamap$createCol.startPhysicalIndex;\n          if (colDelta) {\n            if (Array.isArray(tableMeta.colHeaders)) {\n              var spliceArray = [instance.toVisualColumn(startColumnPhysicalIndex), 0];\n              spliceArray.length += colDelta; // inserts empty (undefined) elements at the end of an array\n              Array.prototype.splice.apply(tableMeta.colHeaders, spliceArray); // inserts empty (undefined) elements into the colHeader array\n            }\n\n            var _currentSelectedRange2 = selection.selectedRange.current();\n            var _currentFromRange = _currentSelectedRange2 === null || _currentSelectedRange2 === void 0 ? void 0 : _currentSelectedRange2.from;\n            var _currentFromColumn = _currentFromRange === null || _currentFromRange === void 0 ? void 0 : _currentFromRange.col;\n            var startVisualColumnIndex = instance.toVisualColumn(startColumnPhysicalIndex);\n            if (selection.isSelectedByCorner()) {\n              instance.selectAll();\n            } else if (isDefined(_currentFromColumn) && _currentFromColumn >= startVisualColumnIndex) {\n              // Moving the selection (if it exists) rightward – it should be applied to the \"old\" column.\n              // TODO: The logic here should be handled by selection module.\n              var _currentSelectedRange3 = _currentSelectedRange2.to,\n                _currentToRow = _currentSelectedRange3.row,\n                _currentToColumn = _currentSelectedRange3.col;\n              var _currentFromRow = _currentFromRange.row;\n\n              // Workaround: headers are not stored inside selection.\n              if (selection.isSelectedByColumnHeader()) {\n                _currentFromRow = -1;\n              }\n\n              // Remove from the stack the last added selection as that selection below will be\n              // replaced by new transformed selection.\n              selection.getSelectedRange().pop();\n\n              // I can't use transforms as they don't work in negative indexes.\n              selection.setRangeStartOnly(instance._createCellCoords(_currentFromRow, _currentFromColumn + colDelta), true);\n              selection.setRangeEnd(instance._createCellCoords(_currentToRow, _currentToColumn + colDelta)); // will call render() internally\n            } else {\n              instance._refreshBorders(); // it will call render and prepare methods\n            }\n          }\n\n          break;\n        case 'remove_row':\n          var removeRow = function removeRow(indexes) {\n            var offset = 0;\n\n            // Normalize the {index, amount} groups into bigger groups.\n            arrayEach(indexes, function (_ref8) {\n              var _ref9 = _slicedToArray(_ref8, 2),\n                groupIndex = _ref9[0],\n                groupAmount = _ref9[1];\n              var calcIndex = isEmpty(groupIndex) ? instance.countRows() - 1 : Math.max(groupIndex - offset, 0);\n\n              // If the 'index' is an integer decrease it by 'offset' otherwise pass it through to make the value\n              // compatible with datamap.removeCol method.\n              if (Number.isInteger(groupIndex)) {\n                // eslint-disable-next-line no-param-reassign\n                groupIndex = Math.max(groupIndex - offset, 0);\n              }\n\n              // TODO: for datamap.removeRow index should be passed as it is (with undefined and null values). If not, the logic\n              // inside the datamap.removeRow breaks the removing functionality.\n              var wasRemoved = datamap.removeRow(groupIndex, groupAmount, source);\n              if (!wasRemoved) {\n                return;\n              }\n              var totalRows = instance.countRows();\n              var fixedRowsTop = tableMeta.fixedRowsTop;\n              if (fixedRowsTop >= calcIndex + 1) {\n                tableMeta.fixedRowsTop -= Math.min(groupAmount, fixedRowsTop - calcIndex);\n              }\n              var fixedRowsBottom = tableMeta.fixedRowsBottom;\n              if (fixedRowsBottom && calcIndex >= totalRows - fixedRowsBottom) {\n                tableMeta.fixedRowsBottom -= Math.min(groupAmount, fixedRowsBottom);\n              }\n              offset += groupAmount;\n            });\n          };\n          if (Array.isArray(index)) {\n            removeRow(normalizeIndexesGroup(index));\n          } else {\n            removeRow([[index, amount]]);\n          }\n          grid.adjustRowsAndCols();\n          instance._refreshBorders(); // it will call render and prepare methods\n          break;\n        case 'remove_col':\n          var removeCol = function removeCol(indexes) {\n            var offset = 0;\n\n            // Normalize the {index, amount} groups into bigger groups.\n            arrayEach(indexes, function (_ref10) {\n              var _ref11 = _slicedToArray(_ref10, 2),\n                groupIndex = _ref11[0],\n                groupAmount = _ref11[1];\n              var calcIndex = isEmpty(groupIndex) ? instance.countCols() - 1 : Math.max(groupIndex - offset, 0);\n              var physicalColumnIndex = instance.toPhysicalColumn(calcIndex);\n\n              // If the 'index' is an integer decrease it by 'offset' otherwise pass it through to make the value\n              // compatible with datamap.removeCol method.\n              if (Number.isInteger(groupIndex)) {\n                // eslint-disable-next-line no-param-reassign\n                groupIndex = Math.max(groupIndex - offset, 0);\n              }\n\n              // TODO: for datamap.removeCol index should be passed as it is (with undefined and null values). If not, the logic\n              // inside the datamap.removeCol breaks the removing functionality.\n              var wasRemoved = datamap.removeCol(groupIndex, groupAmount, source);\n              if (!wasRemoved) {\n                return;\n              }\n              var fixedColumnsStart = tableMeta.fixedColumnsStart;\n              if (fixedColumnsStart >= calcIndex + 1) {\n                tableMeta.fixedColumnsStart -= Math.min(groupAmount, fixedColumnsStart - calcIndex);\n              }\n              if (Array.isArray(tableMeta.colHeaders)) {\n                if (typeof physicalColumnIndex === 'undefined') {\n                  physicalColumnIndex = -1;\n                }\n                tableMeta.colHeaders.splice(physicalColumnIndex, groupAmount);\n              }\n              offset += groupAmount;\n            });\n          };\n          if (Array.isArray(index)) {\n            removeCol(normalizeIndexesGroup(index));\n          } else {\n            removeCol([[index, amount]]);\n          }\n          grid.adjustRowsAndCols();\n          instance._refreshBorders(); // it will call render and prepare methods\n\n          break;\n        default:\n          throw new Error(\"There is no such action \\\"\".concat(action, \"\\\"\"));\n      }\n      if (!keepEmptyRows) {\n        grid.adjustRowsAndCols(); // makes sure that we did not add rows that will be removed in next refresh\n      }\n    },\n\n    /**\n     * Makes sure there are empty rows at the bottom of the table.\n     *\n     * @private\n     */\n    adjustRowsAndCols: function adjustRowsAndCols() {\n      var minRows = tableMeta.minRows;\n      var minSpareRows = tableMeta.minSpareRows;\n      var minCols = tableMeta.minCols;\n      var minSpareCols = tableMeta.minSpareCols;\n      if (instance.countRows() === 0 && instance.countCols() === 0) {\n        selection.deselect();\n      }\n      if (minRows) {\n        // should I add empty rows to data source to meet minRows?\n        var nrOfRows = instance.countRows();\n        if (nrOfRows < minRows) {\n          // The synchronization with cell meta is not desired here. For `minRows` option,\n          // we don't want to touch/shift cell meta objects.\n          datamap.createRow(nrOfRows, minRows - nrOfRows, {\n            source: 'auto'\n          });\n        }\n      }\n      if (minSpareRows) {\n        var emptyRows = instance.countEmptyRows(true);\n\n        // should I add empty rows to meet minSpareRows?\n        if (emptyRows < minSpareRows) {\n          var emptyRowsMissing = minSpareRows - emptyRows;\n          var rowsToCreate = Math.min(emptyRowsMissing, tableMeta.maxRows - instance.countSourceRows());\n\n          // The synchronization with cell meta is not desired here. For `minSpareRows` option,\n          // we don't want to touch/shift cell meta objects.\n          datamap.createRow(instance.countRows(), rowsToCreate, {\n            source: 'auto'\n          });\n        }\n      }\n      {\n        var emptyCols;\n\n        // count currently empty cols\n        if (minCols || minSpareCols) {\n          emptyCols = instance.countEmptyCols(true);\n        }\n        var nrOfColumns = instance.countCols();\n\n        // should I add empty cols to meet minCols?\n        if (minCols && !tableMeta.columns && nrOfColumns < minCols) {\n          // The synchronization with cell meta is not desired here. For `minSpareRows` option,\n          // we don't want to touch/shift cell meta objects.\n          var colsToCreate = minCols - nrOfColumns;\n          emptyCols += colsToCreate;\n          datamap.createCol(nrOfColumns, colsToCreate, {\n            source: 'auto'\n          });\n        }\n        // should I add empty cols to meet minSpareCols?\n        if (minSpareCols && !tableMeta.columns && instance.dataType === 'array' && emptyCols < minSpareCols) {\n          nrOfColumns = instance.countCols();\n          var emptyColsMissing = minSpareCols - emptyCols;\n          var _colsToCreate = Math.min(emptyColsMissing, tableMeta.maxCols - nrOfColumns);\n\n          // The synchronization with cell meta is not desired here. For `minSpareRows` option,\n          // we don't want to touch/shift cell meta objects.\n          datamap.createCol(nrOfColumns, _colsToCreate, {\n            source: 'auto'\n          });\n        }\n      }\n      if (selection.isSelected()) {\n        var rowCount = instance.countRows();\n        var colCount = instance.countCols();\n        arrayEach(selection.selectedRange, function (range) {\n          var selectionChanged = false;\n          var fromRow = range.from.row;\n          var fromCol = range.from.col;\n          var toRow = range.to.row;\n          var toCol = range.to.col;\n\n          // if selection is outside, move selection to last row\n          if (fromRow > rowCount - 1) {\n            fromRow = rowCount - 1;\n            selectionChanged = true;\n            if (toRow > fromRow) {\n              toRow = fromRow;\n            }\n          } else if (toRow > rowCount - 1) {\n            toRow = rowCount - 1;\n            selectionChanged = true;\n            if (fromRow > toRow) {\n              fromRow = toRow;\n            }\n          }\n          // if selection is outside, move selection to last row\n          if (fromCol > colCount - 1) {\n            fromCol = colCount - 1;\n            selectionChanged = true;\n            if (toCol > fromCol) {\n              toCol = fromCol;\n            }\n          } else if (toCol > colCount - 1) {\n            toCol = colCount - 1;\n            selectionChanged = true;\n            if (fromCol > toCol) {\n              fromCol = toCol;\n            }\n          }\n          if (selectionChanged) {\n            instance.selectCell(fromRow, fromCol, toRow, toCol);\n          }\n        });\n      }\n      if (instance.view) {\n        instance.view.adjustElementsSize();\n      }\n    },\n    /**\n     * Populate the data from the provided 2d array from the given cell coordinates.\n     *\n     * @private\n     * @param {object} start Start selection position. Visual indexes.\n     * @param {Array} input 2d data array.\n     * @param {object} [end] End selection position (only for drag-down mode). Visual indexes.\n     * @param {string} [source=\"populateFromArray\"] Source information string.\n     * @param {string} [method=\"overwrite\"] Populate method. Possible options: `shift_down`, `shift_right`, `overwrite`.\n     * @param {string} direction (left|right|up|down) String specifying the direction.\n     * @param {Array} deltas The deltas array. A difference between values of adjacent cells.\n     *                       Useful **only** when the type of handled cells is `numeric`.\n     * @returns {object|undefined} Ending td in pasted area (only if any cell was changed).\n     */\n    populateFromArray: function populateFromArray(start, input, end, source, method, direction, deltas) {\n      // TODO: either remove or implement the `direction` argument. Currently it's not working at all.\n      var r;\n      var rlen;\n      var c;\n      var clen;\n      var setData = [];\n      var current = {};\n      var newDataByColumns = [];\n      var startRow = start.row;\n      var startColumn = start.col;\n      rlen = input.length;\n      if (rlen === 0) {\n        return false;\n      }\n      var columnsPopulationEnd = 0;\n      var rowsPopulationEnd = 0;\n      if (isObject(end)) {\n        columnsPopulationEnd = end.col - startColumn + 1;\n        rowsPopulationEnd = end.row - startRow + 1;\n      }\n\n      // insert data with specified pasteMode method\n      switch (method) {\n        case 'shift_down':\n          // translate data from a list of rows to a list of columns\n          var populatedDataByColumns = pivot(input);\n          var numberOfDataColumns = populatedDataByColumns.length;\n          // method's argument can extend the range of data population (data would be repeated)\n          var numberOfColumnsToPopulate = Math.max(numberOfDataColumns, columnsPopulationEnd);\n          var pushedDownDataByRows = instance.getData().slice(startRow);\n\n          // translate data from a list of rows to a list of columns\n          var pushedDownDataByColumns = pivot(pushedDownDataByRows).slice(startColumn, startColumn + numberOfColumnsToPopulate);\n          for (c = 0; c < numberOfColumnsToPopulate; c += 1) {\n            if (c < numberOfDataColumns) {\n              for (r = 0, rlen = populatedDataByColumns[c].length; r < rowsPopulationEnd - rlen; r += 1) {\n                // repeating data for rows\n                populatedDataByColumns[c].push(populatedDataByColumns[c][r % rlen]);\n              }\n              if (c < pushedDownDataByColumns.length) {\n                newDataByColumns.push(populatedDataByColumns[c].concat(pushedDownDataByColumns[c]));\n              } else {\n                // if before data population, there was no data in the column\n                // we fill the required rows' newly-created cells with `null` values\n                newDataByColumns.push(populatedDataByColumns[c].concat(new Array(pushedDownDataByRows.length).fill(null)));\n              }\n            } else {\n              // Repeating data for columns.\n              newDataByColumns.push(populatedDataByColumns[c % numberOfDataColumns].concat(pushedDownDataByColumns[c]));\n            }\n          }\n          instance.populateFromArray(startRow, startColumn, pivot(newDataByColumns));\n          break;\n        case 'shift_right':\n          var numberOfDataRows = input.length;\n          // method's argument can extend the range of data population (data would be repeated)\n          var numberOfRowsToPopulate = Math.max(numberOfDataRows, rowsPopulationEnd);\n          var pushedRightDataByRows = instance.getData().slice(startRow).map(function (rowData) {\n            return rowData.slice(startColumn);\n          });\n          for (r = 0; r < numberOfRowsToPopulate; r += 1) {\n            if (r < numberOfDataRows) {\n              for (c = 0, clen = input[r].length; c < columnsPopulationEnd - clen; c += 1) {\n                // repeating data for rows\n                input[r].push(input[r][c % clen]);\n              }\n              if (r < pushedRightDataByRows.length) {\n                for (var i = 0; i < pushedRightDataByRows[r].length; i += 1) {\n                  input[r].push(pushedRightDataByRows[r][i]);\n                }\n              } else {\n                var _input$r;\n                // if before data population, there was no data in the row\n                // we fill the required columns' newly-created cells with `null` values\n                (_input$r = input[r]).push.apply(_input$r, _toConsumableArray(new Array(pushedRightDataByRows[0].length).fill(null)));\n              }\n            } else {\n              // Repeating data for columns.\n              input.push(input[r % rlen].slice(0, numberOfRowsToPopulate).concat(pushedRightDataByRows[r]));\n            }\n          }\n          instance.populateFromArray(startRow, startColumn, input);\n          break;\n        case 'overwrite':\n        default:\n          // overwrite and other not specified options\n          current.row = start.row;\n          current.col = start.col;\n          var selected = {\n            // selected range\n            row: end && start ? end.row - start.row + 1 : 1,\n            col: end && start ? end.col - start.col + 1 : 1\n          };\n          var skippedRow = 0;\n          var skippedColumn = 0;\n          var pushData = true;\n          var cellMeta;\n          var getInputValue = function getInputValue(row) {\n            var col = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n            var rowValue = input[row % input.length];\n            if (col !== null) {\n              return rowValue[col % rowValue.length];\n            }\n            return rowValue;\n          };\n          var rowInputLength = input.length;\n          var rowSelectionLength = end ? end.row - start.row + 1 : 0;\n          if (end) {\n            rlen = rowSelectionLength;\n          } else {\n            rlen = Math.max(rowInputLength, rowSelectionLength);\n          }\n          for (r = 0; r < rlen; r++) {\n            if (end && current.row > end.row && rowSelectionLength > rowInputLength || !tableMeta.allowInsertRow && current.row > instance.countRows() - 1 || current.row >= tableMeta.maxRows) {\n              break;\n            }\n            var visualRow = r - skippedRow;\n            var colInputLength = getInputValue(visualRow).length;\n            var colSelectionLength = end ? end.col - start.col + 1 : 0;\n            if (end) {\n              clen = colSelectionLength;\n            } else {\n              clen = Math.max(colInputLength, colSelectionLength);\n            }\n            current.col = start.col;\n            cellMeta = instance.getCellMeta(current.row, current.col);\n            if ((source === 'CopyPaste.paste' || source === 'Autofill.fill') && cellMeta.skipRowOnPaste) {\n              skippedRow += 1;\n              current.row += 1;\n              rlen += 1;\n              /* eslint-disable no-continue */\n              continue;\n            }\n            skippedColumn = 0;\n            for (c = 0; c < clen; c++) {\n              if (end && current.col > end.col && colSelectionLength > colInputLength || !tableMeta.allowInsertColumn && current.col > instance.countCols() - 1 || current.col >= tableMeta.maxCols) {\n                break;\n              }\n              cellMeta = instance.getCellMeta(current.row, current.col);\n              if ((source === 'CopyPaste.paste' || source === 'Autofill.fill') && cellMeta.skipColumnOnPaste) {\n                skippedColumn += 1;\n                current.col += 1;\n                clen += 1;\n                continue;\n              }\n              if (cellMeta.readOnly && source !== 'UndoRedo.undo') {\n                current.col += 1;\n                /* eslint-disable no-continue */\n                continue;\n              }\n              var visualColumn = c - skippedColumn;\n              var value = getInputValue(visualRow, visualColumn);\n              var orgValue = instance.getDataAtCell(current.row, current.col);\n              var index = {\n                row: visualRow,\n                col: visualColumn\n              };\n              if (source === 'Autofill.fill') {\n                var result = instance.runHooks('beforeAutofillInsidePopulate', index, direction, input, deltas, {}, selected);\n                if (result) {\n                  value = isUndefined(result.value) ? value : result.value;\n                }\n              }\n              if (value !== null && _typeof(value) === 'object') {\n                // when 'value' is array and 'orgValue' is null, set 'orgValue' to\n                // an empty array so that the null value can be compared to 'value'\n                // as an empty value for the array context\n                if (Array.isArray(value) && orgValue === null) orgValue = [];\n                if (orgValue === null || _typeof(orgValue) !== 'object') {\n                  pushData = false;\n                } else {\n                  var orgValueSchema = duckSchema(Array.isArray(orgValue) ? orgValue : orgValue[0] || orgValue);\n                  var valueSchema = duckSchema(Array.isArray(value) ? value : value[0] || value);\n\n                  // Allow overwriting values with the same object-based schema or any array-based schema.\n                  if (isObjectEqual(orgValueSchema, valueSchema) || Array.isArray(orgValueSchema) && Array.isArray(valueSchema)) {\n                    value = deepClone(value);\n                  } else {\n                    pushData = false;\n                  }\n                }\n              } else if (orgValue !== null && _typeof(orgValue) === 'object') {\n                pushData = false;\n              }\n              if (pushData) {\n                setData.push([current.row, current.col, value]);\n              }\n              pushData = true;\n              current.col += 1;\n            }\n            current.row += 1;\n          }\n          instance.setDataAtCell(setData, null, null, source || 'populateFromArray');\n          break;\n      }\n    }\n  };\n\n  /**\n   * Internal function to set `language` key of settings.\n   *\n   * @private\n   * @param {string} languageCode Language code for specific language i.e. 'en-US', 'pt-BR', 'de-DE'.\n   * @fires Hooks#afterLanguageChange\n   */\n  function setLanguage(languageCode) {\n    var normalizedLanguageCode = normalizeLanguageCode(languageCode);\n    if (hasLanguageDictionary(normalizedLanguageCode)) {\n      instance.runHooks('beforeLanguageChange', normalizedLanguageCode);\n      globalMeta.language = normalizedLanguageCode;\n      instance.runHooks('afterLanguageChange', normalizedLanguageCode);\n    } else {\n      warnUserAboutLanguageRegistration(languageCode);\n    }\n  }\n\n  /**\n   * Internal function to set `className` or `tableClassName`, depending on the key from the settings object.\n   *\n   * @private\n   * @param {string} className `className` or `tableClassName` from the key in the settings object.\n   * @param {string|string[]} classSettings String or array of strings. Contains class name(s) from settings object.\n   */\n  function setClassName(className, classSettings) {\n    var element = className === 'className' ? instance.rootElement : instance.table;\n    if (firstRun) {\n      addClass(element, classSettings);\n    } else {\n      var globalMetaSettingsArray = [];\n      var settingsArray = [];\n      if (globalMeta[className]) {\n        globalMetaSettingsArray = Array.isArray(globalMeta[className]) ? globalMeta[className] : stringToArray(globalMeta[className]);\n      }\n      if (classSettings) {\n        settingsArray = Array.isArray(classSettings) ? classSettings : stringToArray(classSettings);\n      }\n      var classNameToRemove = getDifferenceOfArrays(globalMetaSettingsArray, settingsArray);\n      var classNameToAdd = getDifferenceOfArrays(settingsArray, globalMetaSettingsArray);\n      if (classNameToRemove.length) {\n        removeClass(element, classNameToRemove);\n      }\n      if (classNameToAdd.length) {\n        addClass(element, classNameToAdd);\n      }\n    }\n    globalMeta[className] = classSettings;\n  }\n  this.init = function () {\n    dataSource.setData(tableMeta.data);\n    instance.runHooks('beforeInit');\n    if (isMobileBrowser() || isIpadOS()) {\n      addClass(instance.rootElement, 'mobile');\n    }\n    this.updateSettings(tableMeta, true);\n    this.view = new TableView(this);\n    editorManager = EditorManager.getInstance(instance, tableMeta, selection);\n    instance.runHooks('init');\n    this.forceFullRender = true; // used when data was changed\n    this.view.render();\n\n    // Run the logic only if it's the table's initialization and the root element is not visible.\n    if (!!firstRun && instance.rootElement.offsetParent === null) {\n      observeVisibilityChangeOnce(instance.rootElement, function () {\n        // Update the spreader size cache before rendering.\n        instance.view._wt.wtOverlays.updateLastSpreaderSize();\n        instance.render();\n        instance.view.adjustElementsSize();\n      });\n    }\n    if (_typeof(firstRun) === 'object') {\n      instance.runHooks('afterChange', firstRun[0], firstRun[1]);\n      firstRun = false;\n    }\n    instance.runHooks('afterInit');\n  };\n\n  /**\n   * @ignore\n   * @returns {object}\n   */\n  function ValidatorsQueue() {\n    // moved this one level up so it can be used in any function here. Probably this should be moved to a separate file\n    var resolved = false;\n    return {\n      validatorsInQueue: 0,\n      valid: true,\n      addValidatorToQueue: function addValidatorToQueue() {\n        this.validatorsInQueue += 1;\n        resolved = false;\n      },\n      removeValidatorFormQueue: function removeValidatorFormQueue() {\n        this.validatorsInQueue = this.validatorsInQueue - 1 < 0 ? 0 : this.validatorsInQueue - 1;\n        this.checkIfQueueIsEmpty();\n      },\n      onQueueEmpty: function onQueueEmpty() {},\n      checkIfQueueIsEmpty: function checkIfQueueIsEmpty() {\n        if (this.validatorsInQueue === 0 && resolved === false) {\n          resolved = true;\n          this.onQueueEmpty(this.valid);\n        }\n      }\n    };\n  }\n\n  /**\n   * Get parsed number from numeric string.\n   *\n   * @private\n   * @param {string} numericData Float (separated by a dot or a comma) or integer.\n   * @returns {number} Number if we get data in parsable format, not changed value otherwise.\n   */\n  function getParsedNumber(numericData) {\n    // Unifying \"float like\" string. Change from value with comma determiner to value with dot determiner,\n    // for example from `450,65` to `450.65`.\n    var unifiedNumericData = numericData.replace(',', '.');\n    if (isNaN(parseFloat(unifiedNumericData)) === false) {\n      return parseFloat(unifiedNumericData);\n    }\n    return numericData;\n  }\n\n  /**\n   * @ignore\n   * @param {Array} changes The 2D array containing information about each of the edited cells.\n   * @param {string} source The string that identifies source of validation.\n   * @param {Function} callback The callback function fot async validation.\n   */\n  function validateChanges(changes, source, callback) {\n    if (!changes.length) {\n      return;\n    }\n    var activeEditor = instance.getActiveEditor();\n    var beforeChangeResult = instance.runHooks('beforeChange', changes, source || 'edit');\n    var shouldBeCanceled = true;\n    if (beforeChangeResult === false) {\n      if (activeEditor) {\n        activeEditor.cancelChanges();\n      }\n      return;\n    }\n    var waitingForValidator = new ValidatorsQueue();\n    waitingForValidator.onQueueEmpty = function (isValid) {\n      if (activeEditor && shouldBeCanceled) {\n        activeEditor.cancelChanges();\n      }\n      callback(isValid); // called when async validators are resolved and beforeChange was not async\n    };\n\n    for (var i = changes.length - 1; i >= 0; i--) {\n      if (changes[i] === null) {\n        changes.splice(i, 1);\n      } else {\n        var _changes$i = _slicedToArray(changes[i], 4),\n          row = _changes$i[0],\n          prop = _changes$i[1],\n          newValue = _changes$i[3];\n        var col = datamap.propToCol(prop);\n        var cellProperties = instance.getCellMeta(row, col);\n        if (cellProperties.type === 'numeric' && typeof newValue === 'string' && isNumericLike(newValue)) {\n          changes[i][3] = getParsedNumber(newValue);\n        }\n\n        /* eslint-disable no-loop-func */\n        if (instance.getCellValidator(cellProperties)) {\n          waitingForValidator.addValidatorToQueue();\n          instance.validateCell(changes[i][3], cellProperties, function (index, cellPropertiesReference) {\n            return function (result) {\n              if (typeof result !== 'boolean') {\n                throw new Error('Validation error: result is not boolean');\n              }\n              if (result === false && cellPropertiesReference.allowInvalid === false) {\n                shouldBeCanceled = false;\n                changes.splice(index, 1); // cancel the change\n                cellPropertiesReference.valid = true; // we cancelled the change, so cell value is still valid\n\n                var cell = instance.getCell(cellPropertiesReference.visualRow, cellPropertiesReference.visualCol);\n                if (cell !== null) {\n                  removeClass(cell, tableMeta.invalidCellClassName);\n                }\n                // index -= 1;\n              }\n\n              waitingForValidator.removeValidatorFormQueue();\n            };\n          }(i, cellProperties), source);\n        }\n      }\n    }\n    waitingForValidator.checkIfQueueIsEmpty();\n  }\n\n  /**\n   * Internal function to apply changes. Called after validateChanges.\n   *\n   * @private\n   * @param {Array} changes Array in form of [row, prop, oldValue, newValue].\n   * @param {string} source String that identifies how this change will be described in changes array (useful in onChange callback).\n   * @fires Hooks#beforeChangeRender\n   * @fires Hooks#afterChange\n   */\n  function applyChanges(changes, source) {\n    var i = changes.length - 1;\n    if (i < 0) {\n      return;\n    }\n    for (; i >= 0; i--) {\n      var skipThisChange = false;\n      if (changes[i] === null) {\n        changes.splice(i, 1);\n        /* eslint-disable no-continue */\n        continue;\n      }\n      if ((changes[i][2] === null || changes[i][2] === void 0) && (changes[i][3] === null || changes[i][3] === void 0)) {\n        /* eslint-disable no-continue */\n        continue;\n      }\n      if (tableMeta.allowInsertRow) {\n        while (changes[i][0] > instance.countRows() - 1) {\n          var _datamap$createRow2 = datamap.createRow(void 0, void 0, {\n              source: source\n            }),\n            numberOfCreatedRows = _datamap$createRow2.delta;\n          if (numberOfCreatedRows === 0) {\n            skipThisChange = true;\n            break;\n          }\n        }\n      }\n      if (instance.dataType === 'array' && (!tableMeta.columns || tableMeta.columns.length === 0) && tableMeta.allowInsertColumn) {\n        while (datamap.propToCol(changes[i][1]) > instance.countCols() - 1) {\n          var _datamap$createCol2 = datamap.createCol(void 0, void 0, {\n              source: source\n            }),\n            numberOfCreatedColumns = _datamap$createCol2.delta;\n          if (numberOfCreatedColumns === 0) {\n            skipThisChange = true;\n            break;\n          }\n        }\n      }\n      if (skipThisChange) {\n        /* eslint-disable no-continue */\n        continue;\n      }\n      datamap.set(changes[i][0], changes[i][1], changes[i][3]);\n    }\n    instance.forceFullRender = true; // used when data was changed\n    grid.adjustRowsAndCols();\n    instance.runHooks('beforeChangeRender', changes, source);\n    editorManager.lockEditor();\n    instance._refreshBorders(null);\n    editorManager.unlockEditor();\n    instance.view.adjustElementsSize();\n    instance.runHooks('afterChange', changes, source || 'edit');\n    var activeEditor = instance.getActiveEditor();\n    if (activeEditor && isDefined(activeEditor.refreshValue)) {\n      activeEditor.refreshValue();\n    }\n  }\n\n  /**\n   * Creates and returns the CellCoords object.\n   *\n   * @private\n   * @memberof Core#\n   * @function _createCellCoords\n   * @param {number} row The row index.\n   * @param {number} column The column index.\n   * @returns {CellCoords}\n   */\n  this._createCellCoords = function (row, column) {\n    return instance.view._wt.createCellCoords(row, column);\n  };\n\n  /**\n   * Creates and returns the CellRange object.\n   *\n   * @private\n   * @memberof Core#\n   * @function _createCellRange\n   * @param {CellCoords} highlight Defines the border around a cell where selection was started and to edit the cell\n   *                               when you press Enter. The highlight cannot point to headers (negative values).\n   * @param {CellCoords} from Initial coordinates.\n   * @param {CellCoords} to Final coordinates.\n   * @returns {CellRange}\n   */\n  this._createCellRange = function (highlight, from, to) {\n    return instance.view._wt.createCellRange(highlight, from, to);\n  };\n\n  /**\n   * Validate a single cell.\n   *\n   * @memberof Core#\n   * @function validateCell\n   * @param {string|number} value The value to validate.\n   * @param {object} cellProperties The cell meta which corresponds with the value.\n   * @param {Function} callback The callback function.\n   * @param {string} source The string that identifies source of the validation.\n   */\n  this.validateCell = function (value, cellProperties, callback, source) {\n    var validator = instance.getCellValidator(cellProperties);\n\n    // the `canBeValidated = false` argument suggests, that the cell passes validation by default.\n    /**\n     * @private\n     * @function done\n     * @param {boolean} valid Indicates if the validation was successful.\n     * @param {boolean} [canBeValidated=true] Flag which controls the validation process.\n     */\n    function done(valid) {\n      var canBeValidated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      // Fixes GH#3903\n      if (!canBeValidated || cellProperties.hidden === true) {\n        callback(valid);\n        return;\n      }\n      var col = cellProperties.visualCol;\n      var row = cellProperties.visualRow;\n      var td = instance.getCell(row, col, true);\n      if (td && td.nodeName !== 'TH') {\n        var renderableRow = instance.rowIndexMapper.getRenderableFromVisualIndex(row);\n        var renderableColumn = instance.columnIndexMapper.getRenderableFromVisualIndex(col);\n        instance.view._wt.getSetting('cellRenderer', renderableRow, renderableColumn, td);\n      }\n      callback(valid);\n    }\n    if (isRegExp(validator)) {\n      validator = function (expression) {\n        return function (cellValue, validatorCallback) {\n          validatorCallback(expression.test(cellValue));\n        };\n      }(validator);\n    }\n    if (isFunction(validator)) {\n      // eslint-disable-next-line no-param-reassign\n      value = instance.runHooks('beforeValidate', value, cellProperties.visualRow, cellProperties.prop, source);\n\n      // To provide consistent behaviour, validation should be always asynchronous\n      instance._registerImmediate(function () {\n        validator.call(cellProperties, value, function (valid) {\n          if (!instance) {\n            return;\n          }\n          // eslint-disable-next-line no-param-reassign\n          valid = instance.runHooks('afterValidate', valid, value, cellProperties.visualRow, cellProperties.prop, source);\n          cellProperties.valid = valid;\n          done(valid);\n          instance.runHooks('postAfterValidate', valid, value, cellProperties.visualRow, cellProperties.prop, source);\n        });\n      });\n    } else {\n      // resolve callback even if validator function was not found\n      instance._registerImmediate(function () {\n        cellProperties.valid = true;\n        done(cellProperties.valid, false);\n      });\n    }\n  };\n\n  /**\n   * @ignore\n   * @param {number} row The visual row index.\n   * @param {string|number} propOrCol The visual prop or column index.\n   * @param {*} value The cell value.\n   * @returns {Array}\n   */\n  function setDataInputToArray(row, propOrCol, value) {\n    if (Array.isArray(row)) {\n      // it's an array of changes\n      return row;\n    }\n    return [[row, propOrCol, value]];\n  }\n\n  /**\n   * @description\n   * Set new value to a cell. To change many cells at once (recommended way), pass an array of `changes` in format\n   * `[[row, col, value],...]` as the first argument.\n   *\n   * @memberof Core#\n   * @function setDataAtCell\n   * @param {number|Array} row Visual row index or array of changes in format `[[row, col, value],...]`.\n   * @param {number} [column] Visual column index.\n   * @param {string} [value] New value.\n   * @param {string} [source] String that identifies how this change will be described in the changes array (useful in afterChange or beforeChange callback). Set to 'edit' if left empty.\n   */\n  this.setDataAtCell = function (row, column, value, source) {\n    var input = setDataInputToArray(row, column, value);\n    var changes = [];\n    var changeSource = source;\n    var i;\n    var ilen;\n    var prop;\n    for (i = 0, ilen = input.length; i < ilen; i++) {\n      if (_typeof(input[i]) !== 'object') {\n        throw new Error('Method `setDataAtCell` accepts row number or changes array of arrays as its first parameter');\n      }\n      if (typeof input[i][1] !== 'number') {\n        throw new Error('Method `setDataAtCell` accepts row and column number as its parameters. If you want to use object property name, use method `setDataAtRowProp`'); // eslint-disable-line max-len\n      }\n\n      if (input[i][1] >= this.countCols()) {\n        prop = input[i][1];\n      } else {\n        prop = datamap.colToProp(input[i][1]);\n      }\n      changes.push([input[i][0], prop, dataSource.getAtCell(this.toPhysicalRow(input[i][0]), input[i][1]), input[i][2]]);\n    }\n    if (!changeSource && _typeof(row) === 'object') {\n      changeSource = column;\n    }\n    instance.runHooks('afterSetDataAtCell', changes, changeSource);\n    validateChanges(changes, changeSource, function () {\n      applyChanges(changes, changeSource);\n    });\n  };\n\n  /**\n   * @description\n   * Set new value to a cell. To change many cells at once (recommended way), pass an array of `changes` in format\n   * `[[row, prop, value],...]` as the first argument.\n   *\n   * @memberof Core#\n   * @function setDataAtRowProp\n   * @param {number|Array} row Visual row index or array of changes in format `[[row, prop, value], ...]`.\n   * @param {string} prop Property name or the source string (e.g. `'first.name'` or `'0'`).\n   * @param {string} value Value to be set.\n   * @param {string} [source] String that identifies how this change will be described in changes array (useful in onChange callback).\n   */\n  this.setDataAtRowProp = function (row, prop, value, source) {\n    var input = setDataInputToArray(row, prop, value);\n    var changes = [];\n    var changeSource = source;\n    var i;\n    var ilen;\n    for (i = 0, ilen = input.length; i < ilen; i++) {\n      changes.push([input[i][0], input[i][1], dataSource.getAtCell(this.toPhysicalRow(input[i][0]), input[i][1]), input[i][2]]);\n    }\n    if (!changeSource && _typeof(row) === 'object') {\n      changeSource = prop;\n    }\n    instance.runHooks('afterSetDataAtRowProp', changes, changeSource);\n    validateChanges(changes, changeSource, function () {\n      applyChanges(changes, changeSource);\n    });\n  };\n\n  /**\n   * Listen to the keyboard input on document body. This allows Handsontable to capture keyboard events and respond\n   * in the right way.\n   *\n   * @memberof Core#\n   * @function listen\n   * @fires Hooks#afterListen\n   */\n  this.listen = function () {\n    if (instance && !instance.isListening()) {\n      activeGuid = instance.guid;\n      instance.runHooks('afterListen');\n    }\n  };\n\n  /**\n   * Stop listening to keyboard input on the document body. Calling this method makes the Handsontable inactive for\n   * any keyboard events.\n   *\n   * @memberof Core#\n   * @function unlisten\n   */\n  this.unlisten = function () {\n    if (this.isListening()) {\n      activeGuid = null;\n      instance.runHooks('afterUnlisten');\n    }\n  };\n\n  /**\n   * Returns `true` if the current Handsontable instance is listening to keyboard input on document body.\n   *\n   * @memberof Core#\n   * @function isListening\n   * @returns {boolean} `true` if the instance is listening, `false` otherwise.\n   */\n  this.isListening = function () {\n    return activeGuid === instance.guid;\n  };\n\n  /**\n   * Destroys the current editor, render the table and prepares the editor of the newly selected cell.\n   *\n   * @memberof Core#\n   * @function destroyEditor\n   * @param {boolean} [revertOriginal=false] If `true`, the previous value will be restored. Otherwise, the edited value will be saved.\n   * @param {boolean} [prepareEditorIfNeeded=true] If `true` the editor under the selected cell will be prepared to open.\n   */\n  this.destroyEditor = function () {\n    var revertOriginal = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var prepareEditorIfNeeded = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    instance._refreshBorders(revertOriginal, prepareEditorIfNeeded);\n  };\n\n  /**\n   * Populates cells at position with 2D input array (e.g. `[[1, 2], [3, 4]]`). Use `endRow`, `endCol` when you\n   * want to cut input when a certain row is reached.\n   *\n   * The `populateFromArray()` method can't change [`readOnly`](@/api/options.md#readonly) cells.\n   *\n   * Optional `method` argument has the same effect as pasteMode option (see {@link Options#pasteMode}).\n   *\n   * @memberof Core#\n   * @function populateFromArray\n   * @param {number} row Start visual row index.\n   * @param {number} column Start visual column index.\n   * @param {Array} input 2d array.\n   * @param {number} [endRow] End visual row index (use when you want to cut input when certain row is reached).\n   * @param {number} [endCol] End visual column index (use when you want to cut input when certain column is reached).\n   * @param {string} [source=populateFromArray] Used to identify this call in the resulting events (beforeChange, afterChange).\n   * @param {string} [method=overwrite] Populate method, possible values: `'shift_down'`, `'shift_right'`, `'overwrite'`.\n   * @param {string} direction Populate direction, possible values: `'left'`, `'right'`, `'up'`, `'down'`.\n   * @param {Array} deltas The deltas array. A difference between values of adjacent cells.\n   *                       Useful **only** when the type of handled cells is `numeric`.\n   * @returns {object|undefined} Ending td in pasted area (only if any cell was changed).\n   */\n  this.populateFromArray = function (row, column, input, endRow, endCol, source, method, direction, deltas) {\n    if (!(_typeof(input) === 'object' && _typeof(input[0]) === 'object')) {\n      throw new Error('populateFromArray parameter `input` must be an array of arrays'); // API changed in 0.9-beta2, let's check if you use it correctly\n    }\n\n    var c = typeof endRow === 'number' ? instance._createCellCoords(endRow, endCol) : null;\n    return grid.populateFromArray(instance._createCellCoords(row, column), input, c, source, method, direction, deltas);\n  };\n\n  /**\n   * Adds/removes data from the column. This method works the same as Array.splice for arrays.\n   *\n   * @memberof Core#\n   * @function spliceCol\n   * @param {number} column Index of the column in which do you want to do splice.\n   * @param {number} index Index at which to start changing the array. If negative, will begin that many elements from the end.\n   * @param {number} amount An integer indicating the number of old array elements to remove. If amount is 0, no elements are removed.\n   * @param {...number} [elements] The elements to add to the array. If you don't specify any elements, spliceCol simply removes elements from the array.\n   * @returns {Array} Returns removed portion of columns.\n   */\n  this.spliceCol = function (column, index, amount) {\n    var _datamap;\n    for (var _len = arguments.length, elements = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n      elements[_key - 3] = arguments[_key];\n    }\n    return (_datamap = datamap).spliceCol.apply(_datamap, [column, index, amount].concat(elements));\n  };\n\n  /**\n   * Adds/removes data from the row. This method works the same as Array.splice for arrays.\n   *\n   * @memberof Core#\n   * @function spliceRow\n   * @param {number} row Index of column in which do you want to do splice.\n   * @param {number} index Index at which to start changing the array. If negative, will begin that many elements from the end.\n   * @param {number} amount An integer indicating the number of old array elements to remove. If amount is 0, no elements are removed.\n   * @param {...number} [elements] The elements to add to the array. If you don't specify any elements, spliceCol simply removes elements from the array.\n   * @returns {Array} Returns removed portion of rows.\n   */\n  this.spliceRow = function (row, index, amount) {\n    var _datamap2;\n    for (var _len2 = arguments.length, elements = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {\n      elements[_key2 - 3] = arguments[_key2];\n    }\n    return (_datamap2 = datamap).spliceRow.apply(_datamap2, [row, index, amount].concat(elements));\n  };\n\n  /**\n   * Returns indexes of the currently selected cells as an array of arrays `[[startRow, startCol, endRow, endCol],...]`.\n   *\n   * Start row and start column are the coordinates of the active cell (where the selection was started).\n   *\n   * The version 0.36.0 adds a non-consecutive selection feature. Since this version, the method returns an array of arrays.\n   * Additionally to collect the coordinates of the currently selected area (as it was previously done by the method)\n   * you need to use `getSelectedLast` method.\n   *\n   * @memberof Core#\n   * @function getSelected\n   * @returns {Array[]|undefined} An array of arrays of the selection's coordinates.\n   */\n  this.getSelected = function () {\n    // https://github.com/handsontable/handsontable/issues/44  //cjl\n    if (selection.isSelected()) {\n      return arrayMap(selection.getSelectedRange(), function (_ref12) {\n        var from = _ref12.from,\n          to = _ref12.to;\n        return [from.row, from.col, to.row, to.col];\n      });\n    }\n  };\n\n  /**\n   * Returns the last coordinates applied to the table as a an array `[startRow, startCol, endRow, endCol]`.\n   *\n   * @since 0.36.0\n   * @memberof Core#\n   * @function getSelectedLast\n   * @returns {Array|undefined} An array of the selection's coordinates.\n   */\n  this.getSelectedLast = function () {\n    var selected = this.getSelected();\n    var result;\n    if (selected && selected.length > 0) {\n      result = selected[selected.length - 1];\n    }\n    return result;\n  };\n\n  /**\n   * Returns the current selection as an array of CellRange objects.\n   *\n   * The version 0.36.0 adds a non-consecutive selection feature. Since this version, the method returns an array of arrays.\n   * Additionally to collect the coordinates of the currently selected area (as it was previously done by the method)\n   * you need to use `getSelectedRangeLast` method.\n   *\n   * @memberof Core#\n   * @function getSelectedRange\n   * @returns {CellRange[]|undefined} Selected range object or undefined if there is no selection.\n   */\n  this.getSelectedRange = function () {\n    // https://github.com/handsontable/handsontable/issues/44  //cjl\n    if (selection.isSelected()) {\n      return Array.from(selection.getSelectedRange());\n    }\n  };\n\n  /**\n   * Returns the last coordinates applied to the table as a CellRange object.\n   *\n   * @memberof Core#\n   * @function getSelectedRangeLast\n   * @since 0.36.0\n   * @returns {CellRange|undefined} Selected range object or undefined` if there is no selection.\n   */\n  this.getSelectedRangeLast = function () {\n    var selectedRange = this.getSelectedRange();\n    var result;\n    if (selectedRange && selectedRange.length > 0) {\n      result = selectedRange[selectedRange.length - 1];\n    }\n    return result;\n  };\n\n  /**\n   * Erases content from cells that have been selected in the table.\n   *\n   * @memberof Core#\n   * @function emptySelectedCells\n   * @param {string} [source] String that identifies how this change will be described in the changes array (useful in afterChange or beforeChange callback). Set to 'edit' if left empty.\n   * @since 0.36.0\n   */\n  this.emptySelectedCells = function (source) {\n    var _this2 = this;\n    if (!selection.isSelected() || this.countRows() === 0 || this.countCols() === 0) {\n      return;\n    }\n    var changes = [];\n    arrayEach(selection.getSelectedRange(), function (cellRange) {\n      var topStart = cellRange.getTopStartCorner();\n      var bottomEnd = cellRange.getBottomEndCorner();\n      rangeEach(topStart.row, bottomEnd.row, function (row) {\n        rangeEach(topStart.col, bottomEnd.col, function (column) {\n          if (!_this2.getCellMeta(row, column).readOnly) {\n            changes.push([row, column, null]);\n          }\n        });\n      });\n    });\n    if (changes.length > 0) {\n      this.setDataAtCell(changes, source);\n    }\n  };\n\n  /**\n   * Checks if the table rendering process was suspended. See explanation in {@link Core#suspendRender}.\n   *\n   * @memberof Core#\n   * @function isRenderSuspended\n   * @since 8.3.0\n   * @returns {boolean}\n   */\n  this.isRenderSuspended = function () {\n    return this.renderSuspendedCounter > 0;\n  };\n\n  /**\n   * Suspends the rendering process. It's helpful to wrap the table render\n   * cycles triggered by API calls or UI actions (or both) and call the \"render\"\n   * once in the end. As a result, it improves the performance of wrapped operations.\n   * When the table is in the suspend state, most operations will have no visual\n   * effect until the rendering state is resumed. Resuming the state automatically\n   * invokes the table rendering. To make sure that after executing all operations,\n   * the table will be rendered, it's highly recommended to use the {@link Core#batchRender}\n   * method or {@link Core#batch}, which additionally aggregates the logic execution\n   * that happens behind the table.\n   *\n   * The method is intended to be used by advanced users. Suspending the rendering\n   * process could cause visual glitches when wrongly implemented.\n   *\n   * Every [`suspendRender()`](@/api/core.md#suspendrender) call needs to correspond with one [`resumeRender()`](@/api/core.md#resumerender) call.\n   * For example, if you call [`suspendRender()`](@/api/core.md#suspendrender) 5 times, you need to call [`resumeRender()`](@/api/core.md#resumerender) 5 times as well.\n   *\n   * @memberof Core#\n   * @function suspendRender\n   * @since 8.3.0\n   * @example\n   * ```js\n   * hot.suspendRender();\n   * hot.alter('insert_row_above', 5, 45);\n   * hot.alter('insert_col_start', 10, 40);\n   * hot.setDataAtCell(1, 1, 'John');\n   * hot.setDataAtCell(2, 2, 'Mark');\n   * hot.setDataAtCell(3, 3, 'Ann');\n   * hot.setDataAtCell(4, 4, 'Sophia');\n   * hot.setDataAtCell(5, 5, 'Mia');\n   * hot.selectCell(0, 0);\n   * hot.resumeRender(); // It re-renders the table internally\n   * ```\n   */\n  this.suspendRender = function () {\n    this.renderSuspendedCounter += 1;\n  };\n\n  /**\n   * Resumes the rendering process. In combination with the {@link Core#suspendRender}\n   * method it allows aggregating the table render cycles triggered by API calls or UI\n   * actions (or both) and calls the \"render\" once in the end. When the table is in\n   * the suspend state, most operations will have no visual effect until the rendering\n   * state is resumed. Resuming the state automatically invokes the table rendering.\n   *\n   * The method is intended to be used by advanced users. Suspending the rendering\n   * process could cause visual glitches when wrongly implemented.\n   *\n   * Every [`suspendRender()`](@/api/core.md#suspendrender) call needs to correspond with one [`resumeRender()`](@/api/core.md#resumerender) call.\n   * For example, if you call [`suspendRender()`](@/api/core.md#suspendrender) 5 times, you need to call [`resumeRender()`](@/api/core.md#resumerender) 5 times as well.\n   *\n   * @memberof Core#\n   * @function resumeRender\n   * @since 8.3.0\n   * @example\n   * ```js\n   * hot.suspendRender();\n   * hot.alter('insert_row_above', 5, 45);\n   * hot.alter('insert_col_start', 10, 40);\n   * hot.setDataAtCell(1, 1, 'John');\n   * hot.setDataAtCell(2, 2, 'Mark');\n   * hot.setDataAtCell(3, 3, 'Ann');\n   * hot.setDataAtCell(4, 4, 'Sophia');\n   * hot.setDataAtCell(5, 5, 'Mia');\n   * hot.selectCell(0, 0);\n   * hot.resumeRender(); // It re-renders the table internally\n   * ```\n   */\n  this.resumeRender = function () {\n    var nextValue = this.renderSuspendedCounter - 1;\n    this.renderSuspendedCounter = Math.max(nextValue, 0);\n    if (!this.isRenderSuspended() && nextValue === this.renderSuspendedCounter) {\n      if (this.renderCall) {\n        this.render();\n      } else {\n        this._refreshBorders(null);\n      }\n    }\n  };\n\n  /**\n   * Rerender the table. Calling this method starts the process of recalculating, redrawing and applying the changes\n   * to the DOM. While rendering the table all cell renderers are recalled.\n   *\n   * Calling this method manually is not recommended. Handsontable tries to render itself by choosing the most\n   * optimal moments in its lifecycle.\n   *\n   * @memberof Core#\n   * @function render\n   */\n  this.render = function () {\n    if (this.view) {\n      this.renderCall = true;\n      this.forceFullRender = true; // used when data was changed\n\n      if (!this.isRenderSuspended()) {\n        editorManager.lockEditor();\n        this._refreshBorders(null);\n        editorManager.unlockEditor();\n      }\n    }\n  };\n\n  /**\n   * The method aggregates multi-line API calls into a callback and postpones the\n   * table rendering process. After the execution of the operations, the table is\n   * rendered once. As a result, it improves the performance of wrapped operations.\n   * Without batching, a similar case could trigger multiple table render calls.\n   *\n   * @memberof Core#\n   * @function batchRender\n   * @param {Function} wrappedOperations Batched operations wrapped in a function.\n   * @returns {*} Returns result from the wrappedOperations callback.\n   * @since 8.3.0\n   * @example\n   * ```js\n   * hot.batchRender(() => {\n   *   hot.alter('insert_row_above', 5, 45);\n   *   hot.alter('insert_col_start', 10, 40);\n   *   hot.setDataAtCell(1, 1, 'John');\n   *   hot.setDataAtCell(2, 2, 'Mark');\n   *   hot.setDataAtCell(3, 3, 'Ann');\n   *   hot.setDataAtCell(4, 4, 'Sophia');\n   *   hot.setDataAtCell(5, 5, 'Mia');\n   *   hot.selectCell(0, 0);\n   *   // The table will be rendered once after executing the callback\n   * });\n   * ```\n   */\n  this.batchRender = function (wrappedOperations) {\n    this.suspendRender();\n    var result = wrappedOperations();\n    this.resumeRender();\n    return result;\n  };\n\n  /**\n   * Checks if the table indexes recalculation process was suspended. See explanation\n   * in {@link Core#suspendExecution}.\n   *\n   * @memberof Core#\n   * @function isExecutionSuspended\n   * @since 8.3.0\n   * @returns {boolean}\n   */\n  this.isExecutionSuspended = function () {\n    return this.executionSuspendedCounter > 0;\n  };\n\n  /**\n   * Suspends the execution process. It's helpful to wrap the table logic changes\n   * such as index changes into one call after which the cache is updated. As a result,\n   * it improves the performance of wrapped operations.\n   *\n   * The method is intended to be used by advanced users. Suspending the execution\n   * process could cause visual glitches caused by not updated the internal table cache.\n   *\n   * @memberof Core#\n   * @function suspendExecution\n   * @since 8.3.0\n   * @example\n   * ```js\n   * hot.suspendExecution();\n   * const filters = hot.getPlugin('filters');\n   *\n   * filters.addCondition(2, 'contains', ['3']);\n   * filters.filter();\n   * hot.getPlugin('columnSorting').sort({ column: 1, sortOrder: 'desc' });\n   * hot.resumeExecution(); // It updates the cache internally\n   * ```\n   */\n  this.suspendExecution = function () {\n    this.executionSuspendedCounter += 1;\n    this.columnIndexMapper.suspendOperations();\n    this.rowIndexMapper.suspendOperations();\n  };\n\n  /**\n   * Resumes the execution process. In combination with the {@link Core#suspendExecution}\n   * method it allows aggregating the table logic changes after which the cache is\n   * updated. Resuming the state automatically invokes the table cache updating process.\n   *\n   * The method is intended to be used by advanced users. Suspending the execution\n   * process could cause visual glitches caused by not updated the internal table cache.\n   *\n   * @memberof Core#\n   * @function resumeExecution\n   * @param {boolean} [forceFlushChanges=false] If `true`, the table internal data cache\n   * is recalculated after the execution of the batched operations. For nested\n   * {@link Core#batchExecution} calls, it can be desire to recalculate the table\n   * after each batch.\n   * @since 8.3.0\n   * @example\n   * ```js\n   * hot.suspendExecution();\n   * const filters = hot.getPlugin('filters');\n   *\n   * filters.addCondition(2, 'contains', ['3']);\n   * filters.filter();\n   * hot.getPlugin('columnSorting').sort({ column: 1, sortOrder: 'desc' });\n   * hot.resumeExecution(); // It updates the cache internally\n   * ```\n   */\n  this.resumeExecution = function () {\n    var forceFlushChanges = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var nextValue = this.executionSuspendedCounter - 1;\n    this.executionSuspendedCounter = Math.max(nextValue, 0);\n    if (!this.isExecutionSuspended() && nextValue === this.executionSuspendedCounter || forceFlushChanges) {\n      this.columnIndexMapper.resumeOperations();\n      this.rowIndexMapper.resumeOperations();\n    }\n  };\n\n  /**\n   * The method aggregates multi-line API calls into a callback and postpones the\n   * table execution process. After the execution of the operations, the internal table\n   * cache is recalculated once. As a result, it improves the performance of wrapped\n   * operations. Without batching, a similar case could trigger multiple table cache rebuilds.\n   *\n   * @memberof Core#\n   * @function batchExecution\n   * @param {Function} wrappedOperations Batched operations wrapped in a function.\n   * @param {boolean} [forceFlushChanges=false] If `true`, the table internal data cache\n   * is recalculated after the execution of the batched operations. For nested calls,\n   * it can be a desire to recalculate the table after each batch.\n   * @returns {*} Returns result from the wrappedOperations callback.\n   * @since 8.3.0\n   * @example\n   * ```js\n   * hot.batchExecution(() => {\n   *   const filters = hot.getPlugin('filters');\n   *\n   *   filters.addCondition(2, 'contains', ['3']);\n   *   filters.filter();\n   *   hot.getPlugin('columnSorting').sort({ column: 1, sortOrder: 'desc' });\n   *   // The table cache will be recalculated once after executing the callback\n   * });\n   * ```\n   */\n  this.batchExecution = function (wrappedOperations) {\n    var forceFlushChanges = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    this.suspendExecution();\n    var result = wrappedOperations();\n    this.resumeExecution(forceFlushChanges);\n    return result;\n  };\n\n  /**\n   * It batches the rendering process and index recalculations. The method aggregates\n   * multi-line API calls into a callback and postpones the table rendering process\n   * as well aggregates the table logic changes such as index changes into one call\n   * after which the cache is updated. After the execution of the operations, the\n   * table is rendered, and the cache is updated once. As a result, it improves the\n   * performance of wrapped operations.\n   *\n   * @memberof Core#\n   * @function batch\n   * @param {Function} wrappedOperations Batched operations wrapped in a function.\n   * @returns {*} Returns result from the wrappedOperations callback.\n   * @since 8.3.0\n   * @example\n   * ```js\n   * hot.batch(() => {\n   *   hot.alter('insert_row_above', 5, 45);\n   *   hot.alter('insert_col_start', 10, 40);\n   *   hot.setDataAtCell(1, 1, 'x');\n   *   hot.setDataAtCell(2, 2, 'c');\n   *   hot.setDataAtCell(3, 3, 'v');\n   *   hot.setDataAtCell(4, 4, 'b');\n   *   hot.setDataAtCell(5, 5, 'n');\n   *   hot.selectCell(0, 0);\n   *\n   *   const filters = hot.getPlugin('filters');\n   *\n   *   filters.addCondition(2, 'contains', ['3']);\n   *   filters.filter();\n   *   hot.getPlugin('columnSorting').sort({ column: 1, sortOrder: 'desc' });\n   *   // The table will be re-rendered and cache will be recalculated once after executing the callback\n   * });\n   * ```\n   */\n  this.batch = function (wrappedOperations) {\n    this.suspendRender();\n    this.suspendExecution();\n    var result = wrappedOperations();\n    this.resumeExecution();\n    this.resumeRender();\n    return result;\n  };\n\n  /**\n   * Updates dimensions of the table. The method compares previous dimensions with the current ones and updates accordingly.\n   *\n   * @memberof Core#\n   * @function refreshDimensions\n   * @fires Hooks#beforeRefreshDimensions\n   * @fires Hooks#afterRefreshDimensions\n   */\n  this.refreshDimensions = function () {\n    if (!instance.view) {\n      return;\n    }\n    var _instance$view$getLas = instance.view.getLastSize(),\n      lastWidth = _instance$view$getLas.width,\n      lastHeight = _instance$view$getLas.height;\n    var _instance$rootElement = instance.rootElement.getBoundingClientRect(),\n      width = _instance$rootElement.width,\n      height = _instance$rootElement.height;\n    var isSizeChanged = width !== lastWidth || height !== lastHeight;\n    var isResizeBlocked = instance.runHooks('beforeRefreshDimensions', {\n      width: lastWidth,\n      height: lastHeight\n    }, {\n      width: width,\n      height: height\n    }, isSizeChanged) === false;\n    if (isResizeBlocked) {\n      return;\n    }\n    if (isSizeChanged || instance.view._wt.wtOverlays.scrollableElement === instance.rootWindow) {\n      instance.view.setLastSize(width, height);\n      instance.render();\n    }\n    instance.runHooks('afterRefreshDimensions', {\n      width: lastWidth,\n      height: lastHeight\n    }, {\n      width: width,\n      height: height\n    }, isSizeChanged);\n  };\n\n  /**\n   * The `updateData()` method replaces Handsontable's [`data`](@/api/options.md#data) with a new dataset.\n   *\n   * The `updateData()` method:\n   * - Keeps cells' states (e.g. cells' [formatting](@/guides/cell-features/formatting-cells.md) and cells' [`readOnly`](@/api/options.md#readonly) states)\n   * - Keeps rows' states (e.g. row order)\n   * - Keeps columns' states (e.g. column order)\n   *\n   * To replace Handsontable's [`data`](@/api/options.md#data) and reset states, use the [`loadData()`](#loaddata) method.\n   *\n   * Read more:\n   * - [Binding to data](@/guides/getting-started/binding-to-data.md)\n   * - [Saving data](@/guides/getting-started/saving-data.md)\n   *\n   * @memberof Core#\n   * @function updateData\n   * @since 11.1.0\n   * @param {Array} data An [array of arrays](@/guides/getting-started/binding-to-data.md#array-of-arrays), or an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects), that contains Handsontable's data\n   * @param {string} [source] The source of the `updateData()` call\n   * @fires Hooks#beforeUpdateData\n   * @fires Hooks#afterUpdateData\n   * @fires Hooks#afterChange\n   */\n  this.updateData = function (data, source) {\n    var _this3 = this;\n    replaceData(data, function (newDataMap) {\n      datamap = newDataMap;\n    }, function (newDataMap) {\n      datamap = newDataMap;\n      instance.columnIndexMapper.fitToLength(_this3.getInitialColumnCount());\n      instance.rowIndexMapper.fitToLength(_this3.countSourceRows());\n      grid.adjustRowsAndCols();\n    }, {\n      hotInstance: instance,\n      dataMap: datamap,\n      dataSource: dataSource,\n      internalSource: 'updateData',\n      source: source,\n      metaManager: metaManager,\n      firstRun: firstRun\n    });\n  };\n\n  /**\n   * The `loadData()` method replaces Handsontable's [`data`](@/api/options.md#data) with a new dataset.\n   *\n   * Additionally, the `loadData()` method:\n   * - Resets cells' states (e.g. cells' [formatting](@/guides/cell-features/formatting-cells.md) and cells' [`readOnly`](@/api/options.md#readonly) states)\n   * - Resets rows' states (e.g. row order)\n   * - Resets columns' states (e.g. column order)\n   *\n   * To replace Handsontable's [`data`](@/api/options.md#data) without resetting states, use the [`updateData()`](#updatedata) method.\n   *\n   * Read more:\n   * - [Binding to data](@/guides/getting-started/binding-to-data.md)\n   * - [Saving data](@/guides/getting-started/saving-data.md)\n   *\n   * @memberof Core#\n   * @function loadData\n   * @param {Array} data An [array of arrays](@/guides/getting-started/binding-to-data.md#array-of-arrays), or an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects), that contains Handsontable's data\n   * @param {string} [source] The source of the `loadData()` call\n   * @fires Hooks#beforeLoadData\n   * @fires Hooks#afterLoadData\n   * @fires Hooks#afterChange\n   */\n  this.loadData = function (data, source) {\n    replaceData(data, function (newDataMap) {\n      datamap = newDataMap;\n    }, function () {\n      metaManager.clearCellsCache();\n      instance.initIndexMappers();\n      grid.adjustRowsAndCols();\n      if (firstRun) {\n        firstRun = [null, 'loadData'];\n      }\n    }, {\n      hotInstance: instance,\n      dataMap: datamap,\n      dataSource: dataSource,\n      internalSource: 'loadData',\n      source: source,\n      metaManager: metaManager,\n      firstRun: firstRun\n    });\n  };\n\n  /**\n   * Gets the initial column count, calculated based on the `columns` setting.\n   *\n   * @private\n   * @returns {number} The calculated number of columns.\n   */\n  this.getInitialColumnCount = function () {\n    var columnsSettings = tableMeta.columns;\n    var finalNrOfColumns = 0;\n\n    // We will check number of columns when the `columns` property was defined as an array. Columns option may\n    // narrow down or expand displayed dataset in that case.\n    if (Array.isArray(columnsSettings)) {\n      finalNrOfColumns = columnsSettings.length;\n    } else if (isFunction(columnsSettings)) {\n      if (instance.dataType === 'array') {\n        var nrOfSourceColumns = this.countSourceCols();\n        for (var columnIndex = 0; columnIndex < nrOfSourceColumns; columnIndex += 1) {\n          if (columnsSettings(columnIndex)) {\n            finalNrOfColumns += 1;\n          }\n        }\n\n        // Extended dataset by the `columns` property? Moved code right from the refactored `countCols` method.\n      } else if (instance.dataType === 'object' || instance.dataType === 'function') {\n        finalNrOfColumns = datamap.colToPropCache.length;\n      }\n\n      // In some cases we need to check columns length from the schema, i.e. `data` may be empty.\n    } else if (isDefined(tableMeta.dataSchema)) {\n      var schema = datamap.getSchema();\n\n      // Schema may be defined as an array of objects. Each object will define column.\n      finalNrOfColumns = Array.isArray(schema) ? schema.length : deepObjectSize(schema);\n    } else {\n      // We init index mappers by length of source data to provide indexes also for skipped indexes.\n      finalNrOfColumns = this.countSourceCols();\n    }\n    return finalNrOfColumns;\n  };\n\n  /**\n   * Init index mapper which manage indexes assigned to the data.\n   *\n   * @private\n   */\n  this.initIndexMappers = function () {\n    this.columnIndexMapper.initToLength(this.getInitialColumnCount());\n    this.rowIndexMapper.initToLength(this.countSourceRows());\n  };\n\n  /**\n   * Returns the current data object (the same one that was passed by `data` configuration option or `loadData` method,\n   * unless some modifications have been applied (i.e. Sequence of rows/columns was changed, some row/column was skipped).\n   * If that's the case - use the {@link Core#getSourceData} method.).\n   *\n   * Optionally you can provide cell range by defining `row`, `column`, `row2`, `column2` to get only a fragment of table data.\n   *\n   * @memberof Core#\n   * @function getData\n   * @param {number} [row] From visual row index.\n   * @param {number} [column] From visual column index.\n   * @param {number} [row2] To visual row index.\n   * @param {number} [column2] To visual column index.\n   * @returns {Array[]} Array with the data.\n   * @example\n   * ```js\n   * // Get all data (in order how it is rendered in the table).\n   * hot.getData();\n   * // Get data fragment (from top-left 0, 0 to bottom-right 3, 3).\n   * hot.getData(3, 3);\n   * // Get data fragment (from top-left 2, 1 to bottom-right 3, 3).\n   * hot.getData(2, 1, 3, 3);\n   * ```\n   */\n  this.getData = function (row, column, row2, column2) {\n    if (isUndefined(row)) {\n      return datamap.getAll();\n    }\n    return datamap.getRange(instance._createCellCoords(row, column), instance._createCellCoords(row2, column2), datamap.DESTINATION_RENDERER);\n  };\n\n  /**\n   * Returns a string value of the selected range. Each column is separated by tab, each row is separated by a new\n   * line character.\n   *\n   * @memberof Core#\n   * @function getCopyableText\n   * @param {number} startRow From visual row index.\n   * @param {number} startCol From visual column index.\n   * @param {number} endRow To visual row index.\n   * @param {number} endCol To visual column index.\n   * @returns {string}\n   */\n  this.getCopyableText = function (startRow, startCol, endRow, endCol) {\n    return datamap.getCopyableText(instance._createCellCoords(startRow, startCol), instance._createCellCoords(endRow, endCol));\n  };\n\n  /**\n   * Returns the data's copyable value at specified `row` and `column` index.\n   *\n   * @memberof Core#\n   * @function getCopyableData\n   * @param {number} row Visual row index.\n   * @param {number} column Visual column index.\n   * @returns {string}\n   */\n  this.getCopyableData = function (row, column) {\n    return datamap.getCopyable(row, datamap.colToProp(column));\n  };\n\n  /**\n   * Returns schema provided by constructor settings. If it doesn't exist then it returns the schema based on the data\n   * structure in the first row.\n   *\n   * @memberof Core#\n   * @function getSchema\n   * @returns {object} Schema object.\n   */\n  this.getSchema = function () {\n    return datamap.getSchema();\n  };\n\n  /**\n   * Use it if you need to change configuration after initialization. The `settings` argument is an object containing the changed\n   * settings, declared the same way as in the initial settings object.\n   *\n   * __Note__, that although the `updateSettings` method doesn't overwrite the previously declared settings, it might reset\n   * the settings made post-initialization. (for example - ignore changes made using the columnResize feature).\n   *\n   * Since 8.0.0 passing `columns` or `data` inside `settings` objects will result in resetting states corresponding to rows and columns\n   * (for example, row/column sequence, column width, row height, frozen columns etc.).\n   *\n   * Since 12.0.0 passing `data` inside `settings` objects no longer results in resetting states corresponding to rows and columns\n   * (for example, row/column sequence, column width, row height, frozen columns etc.).\n   *\n   * @memberof Core#\n   * @function updateSettings\n   * @param {object} settings A settings object (see {@link Options}). Only provide the settings that are changed, not the whole settings object that was used for initialization.\n   * @param {boolean} [init=false] Internally used for in initialization mode.\n   * @example\n   * ```js\n   * hot.updateSettings({\n   *    contextMenu: true,\n   *    colHeaders: true,\n   *    fixedRowsTop: 2\n   * });\n   * ```\n   * @fires Hooks#afterCellMetaReset\n   * @fires Hooks#afterUpdateSettings\n   */\n  this.updateSettings = function (settings) {\n    var init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var dataUpdateFunction = (firstRun ? instance.loadData : instance.updateData).bind(this);\n    var columnsAsFunc = false;\n    var i;\n    var j;\n    if (isDefined(settings.rows)) {\n      throw new Error('The \"rows\" setting is no longer supported. Do you mean startRows, minRows or maxRows?');\n    }\n    if (isDefined(settings.cols)) {\n      throw new Error('The \"cols\" setting is no longer supported. Do you mean startCols, minCols or maxCols?');\n    }\n    if (isDefined(settings.ganttChart)) {\n      throw new Error('Since 8.0.0 the \"ganttChart\" setting is no longer supported.');\n    }\n\n    // eslint-disable-next-line no-restricted-syntax\n    for (i in settings) {\n      if (i === 'data') {\n        // Do nothing. loadData will be triggered later\n      } else if (i === 'language') {\n        setLanguage(settings.language);\n      } else if (i === 'className') {\n        setClassName('className', settings.className);\n      } else if (i === 'tableClassName' && instance.table) {\n        setClassName('tableClassName', settings.tableClassName);\n        instance.view._wt.wtOverlays.syncOverlayTableClassNames();\n      } else if (Hooks.getSingleton().isRegistered(i) || Hooks.getSingleton().isDeprecated(i)) {\n        if (isFunction(settings[i]) || Array.isArray(settings[i])) {\n          settings[i].initialHook = true;\n          instance.addHook(i, settings[i]);\n        }\n      } else if (!init && hasOwnProperty(settings, i)) {\n        // Update settings\n        globalMeta[i] = settings[i];\n      }\n    }\n\n    // Load data or create data map\n    if (settings.data === void 0 && tableMeta.data === void 0) {\n      dataUpdateFunction(null, 'updateSettings'); // data source created just now\n    } else if (settings.data !== void 0) {\n      dataUpdateFunction(settings.data, 'updateSettings'); // data source given as option\n    } else if (settings.columns !== void 0) {\n      datamap.createMap();\n\n      // The `column` property has changed - dataset may be expanded or narrowed down. The `loadData` do the same.\n      instance.initIndexMappers();\n    }\n    var clen = instance.countCols();\n    var columnSetting = tableMeta.columns;\n\n    // Init columns constructors configuration\n    if (columnSetting && isFunction(columnSetting)) {\n      columnsAsFunc = true;\n    }\n\n    // Clear cell meta cache\n    if (settings.cell !== void 0 || settings.cells !== void 0 || settings.columns !== void 0) {\n      metaManager.clearCache();\n    }\n    if (clen > 0) {\n      for (i = 0, j = 0; i < clen; i++) {\n        // Use settings provided by user\n        if (columnSetting) {\n          var column = columnsAsFunc ? columnSetting(i) : columnSetting[j];\n          if (column) {\n            metaManager.updateColumnMeta(j, column);\n          }\n        }\n        j += 1;\n      }\n    }\n    if (isDefined(settings.cell)) {\n      objectEach(settings.cell, function (cell) {\n        instance.setCellMetaObject(cell.row, cell.col, cell);\n      });\n    }\n    instance.runHooks('afterCellMetaReset');\n    var currentHeight = instance.rootElement.style.height;\n    if (currentHeight !== '') {\n      currentHeight = parseInt(instance.rootElement.style.height, 10);\n    }\n    var height = settings.height;\n    if (isFunction(height)) {\n      height = height();\n    }\n    if (init) {\n      var initialStyle = instance.rootElement.getAttribute('style');\n      if (initialStyle) {\n        instance.rootElement.setAttribute('data-initialstyle', instance.rootElement.getAttribute('style'));\n      }\n    }\n    if (height === null) {\n      var _initialStyle = instance.rootElement.getAttribute('data-initialstyle');\n      if (_initialStyle && (_initialStyle.indexOf('height') > -1 || _initialStyle.indexOf('overflow') > -1)) {\n        instance.rootElement.setAttribute('style', _initialStyle);\n      } else {\n        instance.rootElement.style.height = '';\n        instance.rootElement.style.overflow = '';\n      }\n    } else if (height !== void 0) {\n      instance.rootElement.style.height = isNaN(height) ? \"\".concat(height) : \"\".concat(height, \"px\");\n      instance.rootElement.style.overflow = 'hidden';\n    }\n    if (typeof settings.width !== 'undefined') {\n      var width = settings.width;\n      if (isFunction(width)) {\n        width = width();\n      }\n      instance.rootElement.style.width = isNaN(width) ? \"\".concat(width) : \"\".concat(width, \"px\");\n    }\n    if (!init) {\n      if (instance.view) {\n        instance.view._wt.wtViewport.resetHasOversizedColumnHeadersMarked();\n        instance.view._wt.exportSettingsAsClassNames();\n      }\n      instance.runHooks('afterUpdateSettings', settings);\n    }\n    grid.adjustRowsAndCols();\n    if (instance.view && !firstRun) {\n      instance.forceFullRender = true; // used when data was changed\n      editorManager.lockEditor();\n      instance._refreshBorders(null);\n      instance.view._wt.wtOverlays.adjustElementsSize();\n      editorManager.unlockEditor();\n    }\n    if (!init && instance.view && (currentHeight === '' || height === '' || height === void 0) && currentHeight !== height) {\n      instance.view._wt.wtOverlays.updateMainScrollableElements();\n    }\n  };\n\n  /**\n   * Get value from the selected cell.\n   *\n   * @memberof Core#\n   * @function getValue\n   * @returns {*} Value of selected cell.\n   */\n  this.getValue = function () {\n    var sel = instance.getSelectedLast();\n    if (tableMeta.getValue) {\n      if (isFunction(tableMeta.getValue)) {\n        return tableMeta.getValue.call(instance);\n      } else if (sel) {\n        return instance.getData()[sel[0][0]][tableMeta.getValue];\n      }\n    } else if (sel) {\n      return instance.getDataAtCell(sel[0], sel[1]);\n    }\n  };\n\n  /**\n   * Returns the object settings.\n   *\n   * @memberof Core#\n   * @function getSettings\n   * @returns {TableMeta} Object containing the current table settings.\n   */\n  this.getSettings = function () {\n    return tableMeta;\n  };\n\n  /**\n   * Clears the data from the table (the table settings remain intact).\n   *\n   * @memberof Core#\n   * @function clear\n   */\n  this.clear = function () {\n    this.selectAll();\n    this.emptySelectedCells();\n  };\n\n  /**\n   * The `alter()` method lets you alter the grid's structure\n   * by adding or removing rows and columns at specified positions.\n   *\n   * ::: tip\n   * The `alter()` method works only when your [`data`](@/api/options.md#data)\n   * is an [array of arrays](@/guides/getting-started/binding-to-data.md#array-of-arrays).\n   * :::\n   *\n   * ```js\n   * // above row 10 (by visual index), insert 1 new row\n   * hot.alter('insert_row_above', 10);\n   * ```\n   *\n   *  | Action               | With `index` | Without `index` |\n   *  | -------------------- | ------------ | --------------- |\n   *  | `'insert_row_above'` | Inserts rows above the `index` row. | Inserts rows above the first row. |\n   *  | `'insert_row_below'` | Inserts rows below the `index` row. | Inserts rows below the last row. |\n   *  | `'remove_row'`       | Removes rows, starting from the `index` row. | Removes rows, starting from the last row. |\n   *  | `'insert_col_start'` | Inserts columns before the `index` column. | Inserts columns before the first column. |\n   *  | `'insert_col_end'`   | Inserts columns after the `index` column. | Inserts columns after the last column. |\n   *  | `'remove_col'`       | Removes columns, starting from the `index` column. | Removes columns, starting from the last column. |\n   *  | `'insert_row'` (<b>Deprecated</b>) |  Inserts rows above the `index` row. | Inserts rows below the last row. |\n   *  | `'insert_col'` (<b>Deprecated</b>) |  Inserts columns before the `index` column. | Inserts columns after the last column. |\n   *\n   * The behavior of `'insert_col_start'`, `'insert_col_end'`, and `'insert_col'` depends on your [`layoutDirection`](@/api/options.md#layoutdirection).\n   *\n   * @memberof Core#\n   * @function alter\n   * @param {string} action Available operations:\n   * <ul>\n   *    <li> `'insert_row_above'` </li>\n   *    <li> `'insert_row_below'` </li>\n   *    <li> `'remove_row'` </li> </li>\n   *    <li> `'insert_col_start'` </li>\n   *    <li> `'insert_col_end'` </li>\n   *    <li> `'remove_col'` </li>\n   *    <li> `'insert_row'` (<b>Deprecated</b>) </li>\n   *    <li> `'insert_col'` (<b>Deprecated</b>) </li>\n   * </ul>\n   * @param {number|number[]} [index] A visual index of the row/column before or after which the new row/column will be\n   *                                inserted or removed. Can also be an array of arrays, in format `[[index, amount],...]`.\n   * @param {number} [amount] The amount of rows or columns to be inserted or removed (default: `1`).\n   * @param {string} [source] Source indicator.\n   * @param {boolean} [keepEmptyRows] If set to `true`: prevents removing empty rows.\n   * @example\n   * ```js\n   * // above row 10 (by visual index), insert 1 new row\n   * hot.alter('insert_row_above', 10);\n   *\n   * // below row 10 (by visual index), insert 3 new rows\n   * hot.alter('insert_row_below', 10, 3);\n   *\n   * // in the LTR layout direction: to the left of column 10 (by visual index), insert 3 new columns\n   * // in the RTL layout direction: to the right of column 10 (by visual index), insert 3 new columns\n   * hot.alter('insert_col_start', 10, 3);\n   *\n   * // in the LTR layout direction: to the right of column 10 (by visual index), insert 1 new column\n   * // in the RTL layout direction: to the left of column 10 (by visual index), insert 1 new column\n   * hot.alter('insert_col_end', 10);\n   *\n   * // remove 2 rows, starting from row 10 (by visual index)\n   * hot.alter('remove_row', 10, 2);\n   *\n   * // remove 3 rows, starting from row 1 (by visual index)\n   * // remove 2 rows, starting from row 5 (by visual index)\n   * hot.alter('remove_row', [[1, 3], [5, 2]]);\n   * ```\n   */\n  this.alter = function (action, index, amount, source, keepEmptyRows) {\n    grid.alter(action, index, amount, source, keepEmptyRows);\n  };\n\n  /**\n   * Returns a TD element for the given `row` and `column` arguments, if it is rendered on screen.\n   * Returns `null` if the TD is not rendered on screen (probably because that part of the table is not visible).\n   *\n   * @memberof Core#\n   * @function getCell\n   * @param {number} row Visual row index.\n   * @param {number} column Visual column index.\n   * @param {boolean} [topmost=false] If set to `true`, it returns the TD element from the topmost overlay. For example,\n   * if the wanted cell is in the range of fixed rows, it will return a TD element from the `top` overlay.\n   * @returns {HTMLTableCellElement|null} The cell's TD element.\n   */\n  this.getCell = function (row, column) {\n    var topmost = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var renderableColumnIndex = column; // Handling also column headers.\n    var renderableRowIndex = row; // Handling also row headers.\n\n    if (column >= 0) {\n      if (this.columnIndexMapper.isHidden(this.toPhysicalColumn(column))) {\n        return null;\n      }\n      renderableColumnIndex = this.columnIndexMapper.getRenderableFromVisualIndex(column);\n    }\n    if (row >= 0) {\n      if (this.rowIndexMapper.isHidden(this.toPhysicalRow(row))) {\n        return null;\n      }\n      renderableRowIndex = this.rowIndexMapper.getRenderableFromVisualIndex(row);\n    }\n    if (renderableRowIndex === null || renderableColumnIndex === null) {\n      return null;\n    }\n    return instance.view.getCellAtCoords(instance._createCellCoords(renderableRowIndex, renderableColumnIndex), topmost);\n  };\n\n  /**\n   * Returns the coordinates of the cell, provided as a HTML table cell element.\n   *\n   * @memberof Core#\n   * @function getCoords\n   * @param {HTMLTableCellElement} element The HTML Element representing the cell.\n   * @returns {CellCoords|null} Visual coordinates object.\n   * @example\n   * ```js\n   * hot.getCoords(hot.getCell(1, 1));\n   * // it returns CellCoords object instance with props row: 1 and col: 1.\n   * ```\n   */\n  this.getCoords = function (element) {\n    var renderableCoords = this.view._wt.wtTable.getCoords(element);\n    if (renderableCoords === null) {\n      return null;\n    }\n    var renderableRow = renderableCoords.row,\n      renderableColumn = renderableCoords.col;\n    var visualRow = renderableRow;\n    var visualColumn = renderableColumn;\n    if (renderableRow >= 0) {\n      visualRow = this.rowIndexMapper.getVisualFromRenderableIndex(renderableRow);\n    }\n    if (renderableColumn >= 0) {\n      visualColumn = this.columnIndexMapper.getVisualFromRenderableIndex(renderableColumn);\n    }\n    return instance._createCellCoords(visualRow, visualColumn);\n  };\n\n  /**\n   * Returns the property name that corresponds with the given column index.\n   * If the data source is an array of arrays, it returns the columns index.\n   *\n   * @memberof Core#\n   * @function colToProp\n   * @param {number} column Visual column index.\n   * @returns {string|number} Column property or physical column index.\n   */\n  this.colToProp = function (column) {\n    return datamap.colToProp(column);\n  };\n\n  /**\n   * Returns column index that corresponds with the given property.\n   *\n   * @memberof Core#\n   * @function propToCol\n   * @param {string|number} prop Property name or physical column index.\n   * @returns {number} Visual column index.\n   */\n  this.propToCol = function (prop) {\n    return datamap.propToCol(prop);\n  };\n\n  /**\n   * Translate physical row index into visual.\n   *\n   * This method is useful when you want to retrieve visual row index which can be reordered, moved or trimmed\n   * based on a physical index.\n   *\n   * @memberof Core#\n   * @function toVisualRow\n   * @param {number} row Physical row index.\n   * @returns {number} Returns visual row index.\n   */\n  this.toVisualRow = function (row) {\n    return _this.rowIndexMapper.getVisualFromPhysicalIndex(row);\n  };\n\n  /**\n   * Translate physical column index into visual.\n   *\n   * This method is useful when you want to retrieve visual column index which can be reordered, moved or trimmed\n   * based on a physical index.\n   *\n   * @memberof Core#\n   * @function toVisualColumn\n   * @param {number} column Physical column index.\n   * @returns {number} Returns visual column index.\n   */\n  this.toVisualColumn = function (column) {\n    return _this.columnIndexMapper.getVisualFromPhysicalIndex(column);\n  };\n\n  /**\n   * Translate visual row index into physical.\n   *\n   * This method is useful when you want to retrieve physical row index based on a visual index which can be\n   * reordered, moved or trimmed.\n   *\n   * @memberof Core#\n   * @function toPhysicalRow\n   * @param {number} row Visual row index.\n   * @returns {number} Returns physical row index.\n   */\n  this.toPhysicalRow = function (row) {\n    return _this.rowIndexMapper.getPhysicalFromVisualIndex(row);\n  };\n\n  /**\n   * Translate visual column index into physical.\n   *\n   * This method is useful when you want to retrieve physical column index based on a visual index which can be\n   * reordered, moved or trimmed.\n   *\n   * @memberof Core#\n   * @function toPhysicalColumn\n   * @param {number} column Visual column index.\n   * @returns {number} Returns physical column index.\n   */\n  this.toPhysicalColumn = function (column) {\n    return _this.columnIndexMapper.getPhysicalFromVisualIndex(column);\n  };\n\n  /**\n   * @description\n   * Returns the cell value at `row`, `column`.\n   *\n   * __Note__: If data is reordered, sorted or trimmed, the currently visible order will be used.\n   *\n   * @memberof Core#\n   * @function getDataAtCell\n   * @param {number} row Visual row index.\n   * @param {number} column Visual column index.\n   * @returns {*} Data at cell.\n   */\n  this.getDataAtCell = function (row, column) {\n    return datamap.get(row, datamap.colToProp(column));\n  };\n\n  /**\n   * Returns value at visual `row` and `prop` indexes.\n   *\n   * __Note__: If data is reordered, sorted or trimmed, the currently visible order will be used.\n   *\n   * @memberof Core#\n   * @function getDataAtRowProp\n   * @param {number} row Visual row index.\n   * @param {string} prop Property name.\n   * @returns {*} Cell value.\n   */\n  this.getDataAtRowProp = function (row, prop) {\n    return datamap.get(row, prop);\n  };\n\n  /**\n   * @description\n   * Returns array of column values from the data source.\n   *\n   * __Note__: If columns were reordered or sorted, the currently visible order will be used.\n   *\n   * @memberof Core#\n   * @function getDataAtCol\n   * @param {number} column Visual column index.\n   * @returns {Array} Array of cell values.\n   */\n  this.getDataAtCol = function (column) {\n    var _ref13;\n    return (_ref13 = []).concat.apply(_ref13, _toConsumableArray(datamap.getRange(instance._createCellCoords(0, column), instance._createCellCoords(tableMeta.data.length - 1, column), datamap.DESTINATION_RENDERER)));\n  };\n\n  /**\n   * Given the object property name (e.g. `'first.name'` or `'0'`), returns an array of column's values from the table data.\n   * You can also provide a column index as the first argument.\n   *\n   * @memberof Core#\n   * @function getDataAtProp\n   * @param {string|number} prop Property name or physical column index.\n   * @returns {Array} Array of cell values.\n   */\n  // TODO: Getting data from `datamap` should work on visual indexes.\n  this.getDataAtProp = function (prop) {\n    var _ref14;\n    var range = datamap.getRange(instance._createCellCoords(0, datamap.propToCol(prop)), instance._createCellCoords(tableMeta.data.length - 1, datamap.propToCol(prop)), datamap.DESTINATION_RENDERER);\n    return (_ref14 = []).concat.apply(_ref14, _toConsumableArray(range));\n  };\n\n  /**\n   * Returns a clone of the source data object.\n   * Optionally you can provide a cell range by using the `row`, `column`, `row2`, `column2` arguments, to get only a\n   * fragment of the table data.\n   *\n   * __Note__: This method does not participate in data transformation. If the visual data of the table is reordered,\n   * sorted or trimmed only physical indexes are correct.\n   *\n   * @memberof Core#\n   * @function getSourceData\n   * @param {number} [row] From physical row index.\n   * @param {number} [column] From physical column index (or visual index, if data type is an array of objects).\n   * @param {number} [row2] To physical row index.\n   * @param {number} [column2] To physical column index (or visual index, if data type is an array of objects).\n   * @returns {Array[]|object[]} The table data.\n   */\n  this.getSourceData = function (row, column, row2, column2) {\n    var data;\n    if (row === void 0) {\n      data = dataSource.getData();\n    } else {\n      data = dataSource.getByRange(instance._createCellCoords(row, column), instance._createCellCoords(row2, column2));\n    }\n    return data;\n  };\n\n  /**\n   * Returns the source data object as an arrays of arrays format even when source data was provided in another format.\n   * Optionally you can provide a cell range by using the `row`, `column`, `row2`, `column2` arguments, to get only a\n   * fragment of the table data.\n   *\n   * __Note__: This method does not participate in data transformation. If the visual data of the table is reordered,\n   * sorted or trimmed only physical indexes are correct.\n   *\n   * @memberof Core#\n   * @function getSourceDataArray\n   * @param {number} [row] From physical row index.\n   * @param {number} [column] From physical column index (or visual index, if data type is an array of objects).\n   * @param {number} [row2] To physical row index.\n   * @param {number} [column2] To physical column index (or visual index, if data type is an array of objects).\n   * @returns {Array} An array of arrays.\n   */\n  this.getSourceDataArray = function (row, column, row2, column2) {\n    var data;\n    if (row === void 0) {\n      data = dataSource.getData(true);\n    } else {\n      data = dataSource.getByRange(instance._createCellCoords(row, column), instance._createCellCoords(row2, column2), true);\n    }\n    return data;\n  };\n\n  /**\n   * Returns an array of column values from the data source.\n   *\n   * @memberof Core#\n   * @function getSourceDataAtCol\n   * @param {number} column Visual column index.\n   * @returns {Array} Array of the column's cell values.\n   */\n  // TODO: Getting data from `sourceData` should work always on physical indexes.\n  this.getSourceDataAtCol = function (column) {\n    return dataSource.getAtColumn(column);\n  };\n\n  /* eslint-disable jsdoc/require-param */\n  /**\n   * Set the provided value in the source data set at the provided coordinates.\n   *\n   * @memberof Core#\n   * @function setSourceDataAtCell\n   * @param {number|Array} row Physical row index or array of changes in format `[[row, prop, value], ...]`.\n   * @param {number|string} column Physical column index / prop name.\n   * @param {*} value The value to be set at the provided coordinates.\n   * @param {string} [source] Source of the change as a string.\n   */\n  /* eslint-enable jsdoc/require-param */\n  this.setSourceDataAtCell = function (row, column, value, source) {\n    var input = setDataInputToArray(row, column, value);\n    var isThereAnySetSourceListener = this.hasHook('afterSetSourceDataAtCell');\n    var changesForHook = [];\n    if (isThereAnySetSourceListener) {\n      arrayEach(input, function (_ref15) {\n        var _ref16 = _slicedToArray(_ref15, 3),\n          changeRow = _ref16[0],\n          changeProp = _ref16[1],\n          changeValue = _ref16[2];\n        changesForHook.push([changeRow, changeProp, dataSource.getAtCell(changeRow, changeProp),\n        // The previous value.\n        changeValue]);\n      });\n    }\n    arrayEach(input, function (_ref17) {\n      var _ref18 = _slicedToArray(_ref17, 3),\n        changeRow = _ref18[0],\n        changeProp = _ref18[1],\n        changeValue = _ref18[2];\n      dataSource.setAtCell(changeRow, changeProp, changeValue);\n    });\n    if (isThereAnySetSourceListener) {\n      this.runHooks('afterSetSourceDataAtCell', changesForHook, source);\n    }\n    this.render();\n    var activeEditor = instance.getActiveEditor();\n    if (activeEditor && isDefined(activeEditor.refreshValue)) {\n      activeEditor.refreshValue();\n    }\n  };\n\n  /**\n   * Returns a single row of the data (array or object, depending on what data format you use).\n   *\n   * __Note__: This method does not participate in data transformation. If the visual data of the table is reordered,\n   * sorted or trimmed only physical indexes are correct.\n   *\n   * @memberof Core#\n   * @function getSourceDataAtRow\n   * @param {number} row Physical row index.\n   * @returns {Array|object} Single row of data.\n   */\n  this.getSourceDataAtRow = function (row) {\n    return dataSource.getAtRow(row);\n  };\n\n  /**\n   * Returns a single value from the data source.\n   *\n   * @memberof Core#\n   * @function getSourceDataAtCell\n   * @param {number} row Physical row index.\n   * @param {number} column Visual column index.\n   * @returns {*} Cell data.\n   */\n  // TODO: Getting data from `sourceData` should work always on physical indexes.\n  this.getSourceDataAtCell = function (row, column) {\n    return dataSource.getAtCell(row, column);\n  };\n\n  /**\n   * @description\n   * Returns a single row of the data.\n   *\n   * __Note__: If rows were reordered, sorted or trimmed, the currently visible order will be used.\n   *\n   * @memberof Core#\n   * @function getDataAtRow\n   * @param {number} row Visual row index.\n   * @returns {Array} Array of row's cell data.\n   */\n  this.getDataAtRow = function (row) {\n    var data = datamap.getRange(instance._createCellCoords(row, 0), instance._createCellCoords(row, this.countCols() - 1), datamap.DESTINATION_RENDERER);\n    return data[0] || [];\n  };\n\n  /**\n   * @description\n   * Returns a data type defined in the Handsontable settings under the `type` key ({@link Options#type}).\n   * If there are cells with different types in the selected range, it returns `'mixed'`.\n   *\n   * __Note__: If data is reordered, sorted or trimmed, the currently visible order will be used.\n   *\n   * @memberof Core#\n   * @function getDataType\n   * @param {number} rowFrom From visual row index.\n   * @param {number} columnFrom From visual column index.\n   * @param {number} rowTo To visual row index.\n   * @param {number} columnTo To visual column index.\n   * @returns {string} Cell type (e.q: `'mixed'`, `'text'`, `'numeric'`, `'autocomplete'`).\n   */\n  this.getDataType = function (rowFrom, columnFrom, rowTo, columnTo) {\n    var _this4 = this;\n    var coords = rowFrom === void 0 ? [0, 0, this.countRows(), this.countCols()] : [rowFrom, columnFrom, rowTo, columnTo];\n    var rowStart = coords[0],\n      columnStart = coords[1];\n    var rowEnd = coords[2],\n      columnEnd = coords[3];\n    var previousType = null;\n    var currentType = null;\n    if (rowEnd === void 0) {\n      rowEnd = rowStart;\n    }\n    if (columnEnd === void 0) {\n      columnEnd = columnStart;\n    }\n    var type = 'mixed';\n    rangeEach(Math.max(Math.min(rowStart, rowEnd), 0), Math.max(rowStart, rowEnd), function (row) {\n      var isTypeEqual = true;\n      rangeEach(Math.max(Math.min(columnStart, columnEnd), 0), Math.max(columnStart, columnEnd), function (column) {\n        var cellType = _this4.getCellMeta(row, column);\n        currentType = cellType.type;\n        if (previousType) {\n          isTypeEqual = previousType === currentType;\n        } else {\n          previousType = currentType;\n        }\n        return isTypeEqual;\n      });\n      type = isTypeEqual ? currentType : 'mixed';\n      return isTypeEqual;\n    });\n    return type;\n  };\n\n  /**\n   * Remove a property defined by the `key` argument from the cell meta object for the provided `row` and `column` coordinates.\n   *\n   * @memberof Core#\n   * @function removeCellMeta\n   * @param {number} row Visual row index.\n   * @param {number} column Visual column index.\n   * @param {string} key Property name.\n   * @fires Hooks#beforeRemoveCellMeta\n   * @fires Hooks#afterRemoveCellMeta\n   */\n  this.removeCellMeta = function (row, column, key) {\n    var _ref19 = [this.toPhysicalRow(row), this.toPhysicalColumn(column)],\n      physicalRow = _ref19[0],\n      physicalColumn = _ref19[1];\n    var cachedValue = metaManager.getCellMetaKeyValue(physicalRow, physicalColumn, key);\n    var hookResult = instance.runHooks('beforeRemoveCellMeta', row, column, key, cachedValue);\n    if (hookResult !== false) {\n      metaManager.removeCellMeta(physicalRow, physicalColumn, key);\n      instance.runHooks('afterRemoveCellMeta', row, column, key, cachedValue);\n    }\n    cachedValue = null;\n  };\n\n  /**\n   * Removes or adds one or more rows of the cell meta objects to the cell meta collections.\n   *\n   * @since 0.30.0\n   * @memberof Core#\n   * @function spliceCellsMeta\n   * @param {number} visualIndex A visual index that specifies at what position to add/remove items.\n   * @param {number} [deleteAmount=0] The number of items to be removed. If set to 0, no cell meta objects will be removed.\n   * @param {...object} [cellMetaRows] The new cell meta row objects to be added to the cell meta collection.\n   */\n  this.spliceCellsMeta = function (visualIndex) {\n    var _this5 = this;\n    var deleteAmount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    for (var _len3 = arguments.length, cellMetaRows = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {\n      cellMetaRows[_key3 - 2] = arguments[_key3];\n    }\n    if (cellMetaRows.length > 0 && !Array.isArray(cellMetaRows[0])) {\n      throw new Error('The 3rd argument (cellMetaRows) has to be passed as an array of cell meta objects array.');\n    }\n    if (deleteAmount > 0) {\n      metaManager.removeRow(this.toPhysicalRow(visualIndex), deleteAmount);\n    }\n    if (cellMetaRows.length > 0) {\n      arrayEach(cellMetaRows.reverse(), function (cellMetaRow) {\n        metaManager.createRow(_this5.toPhysicalRow(visualIndex));\n        arrayEach(cellMetaRow, function (cellMeta, columnIndex) {\n          return _this5.setCellMetaObject(visualIndex, columnIndex, cellMeta);\n        });\n      });\n    }\n    instance.render();\n  };\n\n  /**\n   * Set cell meta data object defined by `prop` to the corresponding params `row` and `column`.\n   *\n   * @memberof Core#\n   * @function setCellMetaObject\n   * @param {number} row Visual row index.\n   * @param {number} column Visual column index.\n   * @param {object} prop Meta object.\n   */\n  this.setCellMetaObject = function (row, column, prop) {\n    var _this6 = this;\n    if (_typeof(prop) === 'object') {\n      objectEach(prop, function (value, key) {\n        _this6.setCellMeta(row, column, key, value);\n      });\n    }\n  };\n\n  /**\n   * Sets a property defined by the `key` property to the meta object of a cell corresponding to params `row` and `column`.\n   *\n   * @memberof Core#\n   * @function setCellMeta\n   * @param {number} row Visual row index.\n   * @param {number} column Visual column index.\n   * @param {string} key Property name.\n   * @param {string} value Property value.\n   * @fires Hooks#beforeSetCellMeta\n   * @fires Hooks#afterSetCellMeta\n   */\n  this.setCellMeta = function (row, column, key, value) {\n    var allowSetCellMeta = instance.runHooks('beforeSetCellMeta', row, column, key, value);\n    if (allowSetCellMeta === false) {\n      return;\n    }\n    var physicalRow = row;\n    var physicalColumn = column;\n    if (row < this.countRows()) {\n      physicalRow = this.toPhysicalRow(row);\n    }\n    if (column < this.countCols()) {\n      physicalColumn = this.toPhysicalColumn(column);\n    }\n    metaManager.setCellMeta(physicalRow, physicalColumn, key, value);\n    instance.runHooks('afterSetCellMeta', row, column, key, value);\n  };\n\n  /**\n   * Get all the cells meta settings at least once generated in the table (in order of cell initialization).\n   *\n   * @memberof Core#\n   * @function getCellsMeta\n   * @returns {Array} Returns an array of ColumnSettings object instances.\n   */\n  this.getCellsMeta = function () {\n    return metaManager.getCellsMeta();\n  };\n\n  /**\n   * Returns the cell properties object for the given `row` and `column` coordinates.\n   *\n   * @memberof Core#\n   * @function getCellMeta\n   * @param {number} row Visual row index.\n   * @param {number} column Visual column index.\n   * @returns {object} The cell properties object.\n   * @fires Hooks#beforeGetCellMeta\n   * @fires Hooks#afterGetCellMeta\n   */\n  this.getCellMeta = function (row, column) {\n    var physicalRow = this.toPhysicalRow(row);\n    var physicalColumn = this.toPhysicalColumn(column);\n    if (physicalRow === null) {\n      physicalRow = row;\n    }\n    if (physicalColumn === null) {\n      physicalColumn = column;\n    }\n    return metaManager.getCellMeta(physicalRow, physicalColumn, {\n      visualRow: row,\n      visualColumn: column\n    });\n  };\n\n  /**\n   * Returns an array of cell meta objects for specified physical row index.\n   *\n   * @memberof Core#\n   * @function getCellMetaAtRow\n   * @param {number} row Physical row index.\n   * @returns {Array}\n   */\n  this.getCellMetaAtRow = function (row) {\n    return metaManager.getCellsMetaAtRow(row);\n  };\n\n  /**\n   * Checks if the data format and config allows user to modify the column structure.\n   *\n   * @memberof Core#\n   * @function isColumnModificationAllowed\n   * @returns {boolean}\n   */\n  this.isColumnModificationAllowed = function () {\n    return !(instance.dataType === 'object' || tableMeta.columns);\n  };\n\n  /**\n   * Returns the cell renderer function by given `row` and `column` arguments.\n   *\n   * @memberof Core#\n   * @function getCellRenderer\n   * @param {number|object} rowOrMeta Visual row index or cell meta object (see {@link Core#getCellMeta}).\n   * @param {number} column Visual column index.\n   * @returns {Function} Returns the renderer function.\n   * @example\n   * ```js\n   * // Get cell renderer using `row` and `column` coordinates.\n   * hot.getCellRenderer(1, 1);\n   * // Get cell renderer using cell meta object.\n   * hot.getCellRenderer(hot.getCellMeta(1, 1));\n   * ```\n   */\n  this.getCellRenderer = function (rowOrMeta, column) {\n    var cellRenderer = typeof rowOrMeta === 'number' ? instance.getCellMeta(rowOrMeta, column).renderer : rowOrMeta.renderer;\n    if (typeof cellRenderer === 'string') {\n      return getRenderer(cellRenderer);\n    }\n    return isUndefined(cellRenderer) ? getRenderer('text') : cellRenderer;\n  };\n\n  /**\n   * Returns the cell editor class by the provided `row` and `column` arguments.\n   *\n   * @memberof Core#\n   * @function getCellEditor\n   * @param {number} rowOrMeta Visual row index or cell meta object (see {@link Core#getCellMeta}).\n   * @param {number} column Visual column index.\n   * @returns {Function|boolean} Returns the editor class or `false` is cell editor is disabled.\n   * @example\n   * ```js\n   * // Get cell editor class using `row` and `column` coordinates.\n   * hot.getCellEditor(1, 1);\n   * // Get cell editor class using cell meta object.\n   * hot.getCellEditor(hot.getCellMeta(1, 1));\n   * ```\n   */\n  this.getCellEditor = function (rowOrMeta, column) {\n    var cellEditor = typeof rowOrMeta === 'number' ? instance.getCellMeta(rowOrMeta, column).editor : rowOrMeta.editor;\n    if (typeof cellEditor === 'string') {\n      return getEditor(cellEditor);\n    }\n    return isUndefined(cellEditor) ? getEditor('text') : cellEditor;\n  };\n\n  /**\n   * Returns the cell validator by `row` and `column`.\n   *\n   * @memberof Core#\n   * @function getCellValidator\n   * @param {number|object} rowOrMeta Visual row index or cell meta object (see {@link Core#getCellMeta}).\n   * @param {number} column Visual column index.\n   * @returns {Function|RegExp|undefined} The validator function.\n   * @example\n   * ```js\n   * // Get cell validator using `row` and `column` coordinates.\n   * hot.getCellValidator(1, 1);\n   * // Get cell validator using cell meta object.\n   * hot.getCellValidator(hot.getCellMeta(1, 1));\n   * ```\n   */\n  this.getCellValidator = function (rowOrMeta, column) {\n    var cellValidator = typeof rowOrMeta === 'number' ? instance.getCellMeta(rowOrMeta, column).validator : rowOrMeta.validator;\n    if (typeof cellValidator === 'string') {\n      return getValidator(cellValidator);\n    }\n    return cellValidator;\n  };\n\n  /**\n   * Validates all cells using their validator functions and calls callback when finished.\n   *\n   * If one of the cells is invalid, the callback will be fired with `'valid'` arguments as `false` - otherwise it\n   * would equal `true`.\n   *\n   * @memberof Core#\n   * @function validateCells\n   * @param {Function} [callback] The callback function.\n   * @example\n   * ```js\n   * hot.validateCells((valid) => {\n   *   if (valid) {\n   *     // ... code for validated cells\n   *   }\n   * })\n   * ```\n   */\n  this.validateCells = function (callback) {\n    this._validateCells(callback);\n  };\n\n  /**\n   * Validates rows using their validator functions and calls callback when finished.\n   *\n   * If one of the cells is invalid, the callback will be fired with `'valid'` arguments as `false` - otherwise it\n   *  would equal `true`.\n   *\n   * @memberof Core#\n   * @function validateRows\n   * @param {Array} [rows] Array of validation target visual row indexes.\n   * @param {Function} [callback] The callback function.\n   * @example\n   * ```js\n   * hot.validateRows([3, 4, 5], (valid) => {\n   *   if (valid) {\n   *     // ... code for validated rows\n   *   }\n   * })\n   * ```\n   */\n  this.validateRows = function (rows, callback) {\n    if (!Array.isArray(rows)) {\n      throw new Error('validateRows parameter `rows` must be an array');\n    }\n    this._validateCells(callback, rows);\n  };\n\n  /**\n   * Validates columns using their validator functions and calls callback when finished.\n   *\n   * If one of the cells is invalid, the callback will be fired with `'valid'` arguments as `false` - otherwise it\n   *  would equal `true`.\n   *\n   * @memberof Core#\n   * @function validateColumns\n   * @param {Array} [columns] Array of validation target visual columns indexes.\n   * @param {Function} [callback] The callback function.\n   * @example\n   * ```js\n   * hot.validateColumns([3, 4, 5], (valid) => {\n   *   if (valid) {\n   *     // ... code for validated columns\n   *   }\n   * })\n   * ```\n   */\n  this.validateColumns = function (columns, callback) {\n    if (!Array.isArray(columns)) {\n      throw new Error('validateColumns parameter `columns` must be an array');\n    }\n    this._validateCells(callback, undefined, columns);\n  };\n\n  /**\n   * Validates all cells using their validator functions and calls callback when finished.\n   *\n   * If one of the cells is invalid, the callback will be fired with `'valid'` arguments as `false` - otherwise it would equal `true`.\n   *\n   * Private use intended.\n   *\n   * @private\n   * @memberof Core#\n   * @function _validateCells\n   * @param {Function} [callback] The callback function.\n   * @param {Array} [rows] An array of validation target visual row indexes.\n   * @param {Array} [columns] An array of validation target visual column indexes.\n   */\n  this._validateCells = function (callback, rows, columns) {\n    var waitingForValidator = new ValidatorsQueue();\n    if (callback) {\n      waitingForValidator.onQueueEmpty = callback;\n    }\n    var i = instance.countRows() - 1;\n    while (i >= 0) {\n      if (rows !== undefined && rows.indexOf(i) === -1) {\n        i -= 1;\n        continue;\n      }\n      var j = instance.countCols() - 1;\n      while (j >= 0) {\n        if (columns !== undefined && columns.indexOf(j) === -1) {\n          j -= 1;\n          continue;\n        }\n        waitingForValidator.addValidatorToQueue();\n        instance.validateCell(instance.getDataAtCell(i, j), instance.getCellMeta(i, j), function (result) {\n          if (typeof result !== 'boolean') {\n            throw new Error('Validation error: result is not boolean');\n          }\n          if (result === false) {\n            waitingForValidator.valid = false;\n          }\n          waitingForValidator.removeValidatorFormQueue();\n        }, 'validateCells');\n        j -= 1;\n      }\n      i -= 1;\n    }\n    waitingForValidator.checkIfQueueIsEmpty();\n  };\n\n  /**\n   * Returns an array of row headers' values (if they are enabled). If param `row` was given, it returns the header of the given row as a string.\n   *\n   * @memberof Core#\n   * @function getRowHeader\n   * @param {number} [row] Visual row index.\n   * @fires Hooks#modifyRowHeader\n   * @returns {Array|string|number} Array of header values / single header value.\n   */\n  this.getRowHeader = function (row) {\n    var rowHeader = tableMeta.rowHeaders;\n    var physicalRow = row;\n    if (physicalRow !== void 0) {\n      physicalRow = instance.runHooks('modifyRowHeader', physicalRow);\n    }\n    if (physicalRow === void 0) {\n      rowHeader = [];\n      rangeEach(instance.countRows() - 1, function (i) {\n        rowHeader.push(instance.getRowHeader(i));\n      });\n    } else if (Array.isArray(rowHeader) && rowHeader[physicalRow] !== void 0) {\n      rowHeader = rowHeader[physicalRow];\n    } else if (isFunction(rowHeader)) {\n      rowHeader = rowHeader(physicalRow);\n    } else if (rowHeader && typeof rowHeader !== 'string' && typeof rowHeader !== 'number') {\n      rowHeader = physicalRow + 1;\n    }\n    return rowHeader;\n  };\n\n  /**\n   * Returns information about if this table is configured to display row headers.\n   *\n   * @memberof Core#\n   * @function hasRowHeaders\n   * @returns {boolean} `true` if the instance has the row headers enabled, `false` otherwise.\n   */\n  this.hasRowHeaders = function () {\n    return !!tableMeta.rowHeaders;\n  };\n\n  /**\n   * Returns information about if this table is configured to display column headers.\n   *\n   * @memberof Core#\n   * @function hasColHeaders\n   * @returns {boolean} `true` if the instance has the column headers enabled, `false` otherwise.\n   */\n  this.hasColHeaders = function () {\n    if (tableMeta.colHeaders !== void 0 && tableMeta.colHeaders !== null) {\n      // Polymer has empty value = null\n      return !!tableMeta.colHeaders;\n    }\n    for (var i = 0, ilen = instance.countCols(); i < ilen; i++) {\n      if (instance.getColHeader(i)) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  /**\n   * Gets the values of column headers (if column headers are [enabled](@/api/options.md#colheaders)).\n   *\n   * To get an array with the values of all\n   * [bottom-most](@/guides/cell-features/clipboard.md#copy-with-headers) column headers,\n   * call `getColHeader()` with no arguments.\n   *\n   * To get the value of the bottom-most header of a specific column, use the `column` parameter.\n   *\n   * To get the value of a [specific-level](@/guides/columns/column-groups.md) header\n   * of a specific column, use the `column` and `headerLevel` parameters.\n   *\n   * Read more:\n   * - [Guides: Column groups](@/guides/columns/column-groups.md)\n   * - [Options: `colHeaders`](@/api/options.md#colheaders)\n   * - [Guides: Copy with headers](@/guides/cell-features/clipboard.md#copy-with-headers)\n   *\n   * ```js\n   * // get the contents of all bottom-most column headers\n   * hot.getColHeader();\n   *\n   * // get the contents of the bottom-most header of a specific column\n   * hot.getColHeader(5);\n   *\n   * // get the contents of a specific column header at a specific level\n   * hot.getColHeader(5, -2);\n   * ```\n   *\n   * @memberof Core#\n   * @function getColHeader\n   * @param {number} [column] A visual column index.\n   * @param {number} [headerLevel=-1] (Since 12.3.0) Header level index. Accepts positive (0 to n)\n   *                                  and negative (-1 to -n) values. For positive values, 0 points to the\n   *                                  topmost header. For negative values, -1 points to the bottom-most\n   *                                  header (the header closest to the cells).\n   * @fires Hooks#modifyColHeader\n   * @fires Hooks#modifyColumnHeaderValue\n   * @returns {Array|string|number} Column header values.\n   */\n  this.getColHeader = function (column) {\n    var headerLevel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n    var columnIndex = instance.runHooks('modifyColHeader', column);\n    if (columnIndex === void 0) {\n      var out = [];\n      var ilen = instance.countCols();\n      for (var i = 0; i < ilen; i++) {\n        out.push(instance.getColHeader(i));\n      }\n      return out;\n    }\n    var result = tableMeta.colHeaders;\n    var translateVisualIndexToColumns = function translateVisualIndexToColumns(visualColumnIndex) {\n      var arr = [];\n      var columnsLen = instance.countCols();\n      var index = 0;\n      for (; index < columnsLen; index++) {\n        if (isFunction(tableMeta.columns) && tableMeta.columns(index)) {\n          arr.push(index);\n        }\n      }\n      return arr[visualColumnIndex];\n    };\n    var physicalColumn = instance.toPhysicalColumn(columnIndex);\n    var prop = translateVisualIndexToColumns(physicalColumn);\n    if (tableMeta.colHeaders === false) {\n      result = null;\n    } else if (tableMeta.columns && isFunction(tableMeta.columns) && tableMeta.columns(prop) && tableMeta.columns(prop).title) {\n      result = tableMeta.columns(prop).title;\n    } else if (tableMeta.columns && tableMeta.columns[physicalColumn] && tableMeta.columns[physicalColumn].title) {\n      result = tableMeta.columns[physicalColumn].title;\n    } else if (Array.isArray(tableMeta.colHeaders) && tableMeta.colHeaders[physicalColumn] !== void 0) {\n      result = tableMeta.colHeaders[physicalColumn];\n    } else if (isFunction(tableMeta.colHeaders)) {\n      result = tableMeta.colHeaders(physicalColumn);\n    } else if (tableMeta.colHeaders && typeof tableMeta.colHeaders !== 'string' && typeof tableMeta.colHeaders !== 'number') {\n      result = spreadsheetColumnLabel(columnIndex); // see #1458\n    }\n\n    result = instance.runHooks('modifyColumnHeaderValue', result, column, headerLevel);\n    return result;\n  };\n\n  /**\n   * Return column width from settings (no guessing). Private use intended.\n   *\n   * @private\n   * @memberof Core#\n   * @function _getColWidthFromSettings\n   * @param {number} col Visual col index.\n   * @returns {number}\n   */\n  this._getColWidthFromSettings = function (col) {\n    var width;\n\n    // We currently don't support cell meta objects for headers (negative values)\n    if (col >= 0) {\n      var cellProperties = instance.getCellMeta(0, col);\n      width = cellProperties.width;\n    }\n    if (width === void 0 || width === tableMeta.width) {\n      width = tableMeta.colWidths;\n    }\n    if (width !== void 0 && width !== null) {\n      switch (_typeof(width)) {\n        case 'object':\n          // array\n          width = width[col];\n          break;\n        case 'function':\n          width = width(col);\n          break;\n        default:\n          break;\n      }\n      if (typeof width === 'string') {\n        width = parseInt(width, 10);\n      }\n    }\n    return width;\n  };\n\n  /**\n   * Returns the width of the requested column.\n   *\n   * @memberof Core#\n   * @function getColWidth\n   * @param {number} column Visual column index.\n   * @returns {number} Column width.\n   * @fires Hooks#modifyColWidth\n   */\n  this.getColWidth = function (column) {\n    var width = instance._getColWidthFromSettings(column);\n    width = instance.runHooks('modifyColWidth', width, column);\n    if (width === void 0) {\n      width = ViewportColumnsCalculator.DEFAULT_WIDTH;\n    }\n    return width;\n  };\n\n  /**\n   * Return row height from settings (no guessing). Private use intended.\n   *\n   * @private\n   * @memberof Core#\n   * @function _getRowHeightFromSettings\n   * @param {number} row Visual row index.\n   * @returns {number}\n   */\n  this._getRowHeightFromSettings = function (row) {\n    // let cellProperties = instance.getCellMeta(row, 0);\n    // let height = cellProperties.height;\n    //\n    // if (height === void 0 || height === tableMeta.height) {\n    //  height = cellProperties.rowHeights;\n    // }\n    var height = tableMeta.rowHeights;\n    if (height !== void 0 && height !== null) {\n      switch (_typeof(height)) {\n        case 'object':\n          // array\n          height = height[row];\n          break;\n        case 'function':\n          height = height(row);\n          break;\n        default:\n          break;\n      }\n      if (typeof height === 'string') {\n        height = parseInt(height, 10);\n      }\n    }\n    return height;\n  };\n\n  /**\n   * Returns a row's height, as recognized by Handsontable.\n   *\n   * Depending on your configuration, the method returns (in order of priority):\n   *   1. The row height set by the [`ManualRowResize`](@/api/manualRowResize.md) plugin\n   *     (if the plugin is enabled).\n   *   2. The row height set by the [`rowHeights`](@/api/options.md#rowheights) configuration option\n   *     (if the option is set).\n   *   3. The row height as measured in the DOM by the [`AutoRowSize`](@/api/autoRowSize.md) plugin\n   *     (if the plugin is enabled).\n   *   4. `undefined`, if neither [`ManualRowResize`](@/api/manualRowResize.md),\n   *     nor [`rowHeights`](@/api/options.md#rowheights),\n   *     nor [`AutoRowSize`](@/api/autoRowSize.md) is used.\n   *\n   * The height returned includes 1 px of the row's bottom border.\n   *\n   * Mind that this method is different from the\n   * [`getRowHeight()`](@/api/autoRowSize.md#getrowheight) method\n   * of the [`AutoRowSize`](@/api/autoRowSize.md) plugin.\n   *\n   * @memberof Core#\n   * @function getRowHeight\n   * @param {number} row A visual row index.\n   * @returns {number|undefined} The height of the specified row, in pixels.\n   * @fires Hooks#modifyRowHeight\n   */\n  this.getRowHeight = function (row) {\n    var height = instance._getRowHeightFromSettings(row);\n    height = instance.runHooks('modifyRowHeight', height, row);\n    return height;\n  };\n\n  /**\n   * Returns the total number of rows in the data source.\n   *\n   * @memberof Core#\n   * @function countSourceRows\n   * @returns {number} Total number of rows.\n   */\n  this.countSourceRows = function () {\n    return dataSource.countRows();\n  };\n\n  /**\n   * Returns the total number of columns in the data source.\n   *\n   * @memberof Core#\n   * @function countSourceCols\n   * @returns {number} Total number of columns.\n   */\n  this.countSourceCols = function () {\n    return dataSource.countFirstRowKeys();\n  };\n\n  /**\n   * Returns the total number of visual rows in the table.\n   *\n   * @memberof Core#\n   * @function countRows\n   * @returns {number} Total number of rows.\n   */\n  this.countRows = function () {\n    return datamap.getLength();\n  };\n\n  /**\n   * Returns the total number of visible columns in the table.\n   *\n   * @memberof Core#\n   * @function countCols\n   * @returns {number} Total number of columns.\n   */\n  this.countCols = function () {\n    var maxCols = tableMeta.maxCols;\n    var dataLen = this.columnIndexMapper.getNotTrimmedIndexesLength();\n    return Math.min(maxCols, dataLen);\n  };\n\n  /**\n   * Returns the number of rendered rows including rows that are partially or fully rendered\n   * outside the table viewport.\n   *\n   * @memberof Core#\n   * @function countRenderedRows\n   * @returns {number} Returns -1 if table is not visible.\n   */\n  this.countRenderedRows = function () {\n    return instance.view._wt.drawn ? instance.view._wt.wtTable.getRenderedRowsCount() : -1;\n  };\n\n  /**\n   * Returns the number of rendered rows that are only visible in the table viewport.\n   * The rows that are partially visible are not counted.\n   *\n   * @memberof Core#\n   * @function countVisibleRows\n   * @returns {number} Number of visible rows or -1.\n   */\n  this.countVisibleRows = function () {\n    return instance.view._wt.drawn ? instance.view._wt.wtTable.getVisibleRowsCount() : -1;\n  };\n\n  /**\n   * Returns the number of rendered rows including columns that are partially or fully rendered\n   * outside the table viewport.\n   *\n   * @memberof Core#\n   * @function countRenderedCols\n   * @returns {number} Returns -1 if table is not visible.\n   */\n  this.countRenderedCols = function () {\n    return instance.view._wt.drawn ? instance.view._wt.wtTable.getRenderedColumnsCount() : -1;\n  };\n\n  /**\n   * Returns the number of rendered columns that are only visible in the table viewport.\n   * The columns that are partially visible are not counted.\n   *\n   * @memberof Core#\n   * @function countVisibleCols\n   * @returns {number} Number of visible columns or -1.\n   */\n  this.countVisibleCols = function () {\n    return instance.view._wt.drawn ? instance.view._wt.wtTable.getVisibleColumnsCount() : -1;\n  };\n\n  /**\n   * Returns the number of empty rows. If the optional ending parameter is `true`, returns the\n   * number of empty rows at the bottom of the table.\n   *\n   * @memberof Core#\n   * @function countEmptyRows\n   * @param {boolean} [ending=false] If `true`, will only count empty rows at the end of the data source.\n   * @returns {number} Count empty rows.\n   */\n  this.countEmptyRows = function () {\n    var ending = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var emptyRows = 0;\n    rangeEachReverse(instance.countRows() - 1, function (visualIndex) {\n      if (instance.isEmptyRow(visualIndex)) {\n        emptyRows += 1;\n      } else if (ending === true) {\n        return false;\n      }\n    });\n    return emptyRows;\n  };\n\n  /**\n   * Returns the number of empty columns. If the optional ending parameter is `true`, returns the number of empty\n   * columns at right hand edge of the table.\n   *\n   * @memberof Core#\n   * @function countEmptyCols\n   * @param {boolean} [ending=false] If `true`, will only count empty columns at the end of the data source row.\n   * @returns {number} Count empty cols.\n   */\n  this.countEmptyCols = function () {\n    var ending = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var emptyColumns = 0;\n    rangeEachReverse(instance.countCols() - 1, function (visualIndex) {\n      if (instance.isEmptyCol(visualIndex)) {\n        emptyColumns += 1;\n      } else if (ending === true) {\n        return false;\n      }\n    });\n    return emptyColumns;\n  };\n\n  /**\n   * Check if all cells in the row declared by the `row` argument are empty.\n   *\n   * @memberof Core#\n   * @function isEmptyRow\n   * @param {number} row Visual row index.\n   * @returns {boolean} `true` if the row at the given `row` is empty, `false` otherwise.\n   */\n  this.isEmptyRow = function (row) {\n    return tableMeta.isEmptyRow.call(instance, row);\n  };\n\n  /**\n   * Check if all cells in the the column declared by the `column` argument are empty.\n   *\n   * @memberof Core#\n   * @function isEmptyCol\n   * @param {number} column Column index.\n   * @returns {boolean} `true` if the column at the given `col` is empty, `false` otherwise.\n   */\n  this.isEmptyCol = function (column) {\n    return tableMeta.isEmptyCol.call(instance, column);\n  };\n\n  /**\n   * Select a single cell, or a single range of adjacent cells.\n   *\n   * To select a cell, pass its visual row and column indexes, for example: `selectCell(2, 4)`.\n   *\n   * To select a range, pass the visual indexes of the first and last cell in the range, for example: `selectCell(2, 4, 3, 5)`.\n   *\n   * If your columns have properties, you can pass those properties' values instead of column indexes, for example: `selectCell(2, 'first_name')`.\n   *\n   * By default, `selectCell()` also:\n   *  - Scrolls the viewport to the newly-selected cells.\n   *  - Switches the keyboard focus to Handsontable (by calling Handsontable's [`listen()`](#listen) method).\n   *\n   * @example\n   * ```js\n   * // select a single cell\n   * hot.selectCell(2, 4);\n   *\n   * // select a range of cells\n   * hot.selectCell(2, 4, 3, 5);\n   *\n   * // select a single cell, using a column property\n   * hot.selectCell(2, 'first_name');\n   *\n   * // select a range of cells, using column properties\n   * hot.selectCell(2, 'first_name', 3, 'last_name');\n   *\n   * // select a range of cells, without scrolling to them\n   * hot.selectCell(2, 4, 3, 5, false);\n   *\n   * // select a range of cells, without switching the keyboard focus to Handsontable\n   * hot.selectCell(2, 4, 3, 5, null, false);\n   * ```\n   *\n   * @memberof Core#\n   * @function selectCell\n   * @param {number} row A visual row index.\n   * @param {number|string} column A visual column index (`number`), or a column property's value (`string`).\n   * @param {number} [endRow] If selecting a range: the visual row index of the last cell in the range.\n   * @param {number|string} [endColumn] If selecting a range: the visual column index (or a column property's value) of the last cell in the range.\n   * @param {boolean} [scrollToCell=true] `true`: scroll the viewport to the newly-selected cells. `false`: keep the previous viewport.\n   * @param {boolean} [changeListener=true] `true`: switch the keyboard focus to Handsontable. `false`: keep the previous keyboard focus.\n   * @returns {boolean} `true`: the selection was successful, `false`: the selection failed.\n   */\n  this.selectCell = function (row, column, endRow, endColumn) {\n    var scrollToCell = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n    var changeListener = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n    if (isUndefined(row) || isUndefined(column)) {\n      return false;\n    }\n    return this.selectCells([[row, column, endRow, endColumn]], scrollToCell, changeListener);\n  };\n\n  /**\n   * Select multiple cells or ranges of cells, adjacent or non-adjacent.\n   *\n   * You can pass one of the below:\n   * - An array of arrays (which matches the output of Handsontable's [`getSelected()`](#getselected) method).\n   * - An array of [`CellRange`](@/api/cellRange.md) objects (which matches the output of Handsontable's [`getSelectedRange()`](#getselectedrange) method).\n   *\n   * To select multiple cells, pass the visual row and column indexes of each cell, for example: `hot.selectCells([[1, 1], [5, 5]])`.\n   *\n   * To select multiple ranges, pass the visual indexes of the first and last cell in each range, for example: `hot.selectCells([[1, 1, 2, 2], [6, 2, 0, 2]])`.\n   *\n   * If your columns have properties, you can pass those properties' values instead of column indexes, for example: `hot.selectCells([[1, 'first_name'], [5, 'last_name']])`.\n   *\n   * By default, `selectCell()` also:\n   *  - Scrolls the viewport to the newly-selected cells.\n   *  - Switches the keyboard focus to Handsontable (by calling Handsontable's [`listen()`](#listen) method).\n   *\n   * @example\n   * ```js\n   * // select non-adjacent cells\n   * hot.selectCells([[1, 1], [5, 5], [10, 10]]);\n   *\n   * // select non-adjacent ranges of cells\n   * hot.selectCells([[1, 1, 2, 2], [10, 10, 20, 20]]);\n   *\n   * // select cells and ranges of cells\n   * hot.selectCells([[1, 1, 2, 2], [3, 3], [6, 2, 0, 2]]);\n   *\n   * // select cells, using column properties\n   * hot.selectCells([[1, 'id', 2, 'first_name'], [3, 'full_name'], [6, 'last_name', 0, 'first_name']]);\n   *\n   * // select multiple ranges, using an array of `CellRange` objects\n   * const selected = hot.getSelectedRange();\n   *\n   * selected[0].from.row = 0;\n   * selected[0].from.col = 0;\n   * selected[0].to.row = 5;\n   * selected[0].to.col = 5;\n   *\n   * selected[1].from.row = 10;\n   * selected[1].from.col = 10;\n   * selected[1].to.row = 20;\n   * selected[1].to.col = 20;\n   *\n   * hot.selectCells(selected);\n   * ```\n   *\n   * @memberof Core#\n   * @since 0.38.0\n   * @function selectCells\n   * @param {Array[]|CellRange[]} coords Visual coordinates,\n   * passed either as an array of arrays (`[[rowStart, columnStart, rowEnd, columnEnd], ...]`)\n   * or as an array of [`CellRange`](@/api/cellRange.md) objects.\n   * @param {boolean} [scrollToCell=true] `true`: scroll the viewport to the newly-selected cells. `false`: keep the previous viewport.\n   * @param {boolean} [changeListener=true] `true`: switch the keyboard focus to Handsontable. `false`: keep the previous keyboard focus.\n   * @returns {boolean} `true`: the selection was successful, `false`: the selection failed.\n   */\n  this.selectCells = function () {\n    var coords = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [[]];\n    var scrollToCell = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    var changeListener = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    if (scrollToCell === false) {\n      preventScrollingToCell = true;\n    }\n    var wasSelected = selection.selectCells(coords);\n    if (wasSelected && changeListener) {\n      instance.listen();\n    }\n    preventScrollingToCell = false;\n    return wasSelected;\n  };\n\n  /**\n   * Select column specified by `startColumn` visual index, column property or a range of columns finishing at `endColumn`.\n   *\n   * @example\n   * ```js\n   * // Select column using visual index.\n   * hot.selectColumns(1);\n   * // Select column using column property.\n   * hot.selectColumns('id');\n   * // Select range of columns using visual indexes.\n   * hot.selectColumns(1, 4);\n   * // Select range of columns using column properties.\n   * hot.selectColumns('id', 'last_name');\n   * ```\n   *\n   * @memberof Core#\n   * @since 0.38.0\n   * @function selectColumns\n   * @param {number} startColumn The visual column index from which the selection starts.\n   * @param {number} [endColumn=startColumn] The visual column index to which the selection finishes. If `endColumn`\n   *                                         is not defined the column defined by `startColumn` will be selected.\n   * @returns {boolean} `true` if selection was successful, `false` otherwise.\n   */\n  this.selectColumns = function (startColumn) {\n    var endColumn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : startColumn;\n    return selection.selectColumns(startColumn, endColumn);\n  };\n\n  /**\n   * Select row specified by `startRow` visual index or a range of rows finishing at `endRow`.\n   *\n   * @example\n   * ```js\n   * // Select row using visual index.\n   * hot.selectRows(1);\n   * // Select range of rows using visual indexes.\n   * hot.selectRows(1, 4);\n   * ```\n   *\n   * @memberof Core#\n   * @since 0.38.0\n   * @function selectRows\n   * @param {number} startRow The visual row index from which the selection starts.\n   * @param {number} [endRow=startRow] The visual row index to which the selection finishes. If `endRow`\n   *                                   is not defined the row defined by `startRow` will be selected.\n   * @returns {boolean} `true` if selection was successful, `false` otherwise.\n   */\n  this.selectRows = function (startRow) {\n    var endRow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : startRow;\n    return selection.selectRows(startRow, endRow);\n  };\n\n  /**\n   * Deselects the current cell selection on the table.\n   *\n   * @memberof Core#\n   * @function deselectCell\n   */\n  this.deselectCell = function () {\n    selection.deselect();\n  };\n\n  /**\n   * Select the whole table.\n   *\n   * The previous selection is overwritten.\n   *\n   * ```js\n   * // select all cells in the table, including all headers\n   * hot.selectAll();\n   *\n   * // select all cells in the table, without headers\n   * hot.selectAll(false);\n   * ```\n   *\n   * @since 0.38.2\n   * @memberof Core#\n   * @function selectAll\n   * @param {boolean} [includeHeaders=true] `true`: include all row, column and corner headers.\n   * `false`: don't include any headers.\n   */\n  this.selectAll = function () {\n    var includeHeaders = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    var includeRowHeaders = includeHeaders && this.hasRowHeaders();\n    var includeColumnHeaders = includeHeaders && this.hasColHeaders();\n    preventScrollingToCell = true;\n    selection.selectAll(includeRowHeaders, includeColumnHeaders);\n    preventScrollingToCell = false;\n  };\n  var getIndexToScroll = function getIndexToScroll(indexMapper, visualIndex) {\n    // Looking for a visual index on the right and then (when not found) on the left.\n    return indexMapper.getNearestNotHiddenIndex(visualIndex, 1, true);\n  };\n\n  /**\n   * Scroll viewport to coordinates specified by the `row` and `column` arguments.\n   *\n   * @memberof Core#\n   * @function scrollViewportTo\n   * @param {number} [row] Row index. If the last argument isn't defined we treat the index as a visual row index. Otherwise,\n   * we are using the index for numbering only this rows which may be rendered (we don't consider hidden rows).\n   * @param {number} [column] Column index. If the last argument isn't defined we treat the index as a visual column index.\n   * Otherwise, we are using the index for numbering only this columns which may be rendered (we don't consider hidden columns).\n   * @param {boolean} [snapToBottom=false] If `true`, the viewport is scrolled to show the cell at the bottom of the table.\n   * However, if the cell's height is greater than the table's viewport height, the cell is snapped to the top edge.\n   * @param {boolean} [snapToRight=false] If `true`, the viewport is scrolled to show the cell at the right side of the table.\n   * However, if the cell is wider than the table's viewport width, the cell is snapped to the left edge (or to the right edge, if the layout direction is set to `rtl`).\n   * @param {boolean} [considerHiddenIndexes=true] If `true`, we handle visual indexes, otherwise we handle only indexes which\n   * may be rendered when they are in the viewport (we don't consider hidden indexes as they aren't rendered).\n   * @returns {boolean} `true` if scroll was successful, `false` otherwise.\n   */\n  this.scrollViewportTo = function (row, column) {\n    var snapToBottom = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var snapToRight = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    var considerHiddenIndexes = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n    var snapToTop = !snapToBottom;\n    var snapToLeft = !snapToRight;\n    var renderableRow = row;\n    var renderableColumn = column;\n    if (considerHiddenIndexes) {\n      var _isRowInteger = Number.isInteger(row);\n      var _isColumnInteger = Number.isInteger(column);\n      var visualRowToScroll = _isRowInteger ? getIndexToScroll(this.rowIndexMapper, row) : void 0;\n      var visualColumnToScroll = _isColumnInteger ? getIndexToScroll(this.columnIndexMapper, column) : void 0;\n      if (visualRowToScroll === null || visualColumnToScroll === null) {\n        return false;\n      }\n      renderableRow = _isRowInteger ? instance.rowIndexMapper.getRenderableFromVisualIndex(visualRowToScroll) : void 0;\n      renderableColumn = _isColumnInteger ? instance.columnIndexMapper.getRenderableFromVisualIndex(visualColumnToScroll) : void 0;\n    }\n    var isRowInteger = Number.isInteger(renderableRow);\n    var isColumnInteger = Number.isInteger(renderableColumn);\n    if (isRowInteger && isColumnInteger) {\n      return instance.view.scrollViewport(instance._createCellCoords(renderableRow, renderableColumn), snapToTop, snapToRight, snapToBottom, snapToLeft);\n    }\n    if (isRowInteger && isColumnInteger === false) {\n      return instance.view.scrollViewportVertically(renderableRow, snapToTop, snapToBottom);\n    }\n    if (isColumnInteger && isRowInteger === false) {\n      return instance.view.scrollViewportHorizontally(renderableColumn, snapToRight, snapToLeft);\n    }\n    return false;\n  };\n\n  /**\n   * Removes the table from the DOM and destroys the instance of the Handsontable.\n   *\n   * @memberof Core#\n   * @function destroy\n   * @fires Hooks#afterDestroy\n   */\n  this.destroy = function () {\n    instance._clearTimeouts();\n    instance._clearImmediates();\n    if (instance.view) {\n      // in case HT is destroyed before initialization has finished\n      instance.view.destroy();\n    }\n    if (dataSource) {\n      dataSource.destroy();\n    }\n    dataSource = null;\n    this.getShortcutManager().destroy();\n    metaManager.clearCache();\n    if (isRootInstance(instance)) {\n      var licenseInfo = this.rootDocument.querySelector('.hot-display-license-info');\n      if (licenseInfo) {\n        licenseInfo.parentNode.removeChild(licenseInfo);\n      }\n    }\n    empty(instance.rootElement);\n    eventManager.destroy();\n    if (editorManager) {\n      editorManager.destroy();\n    }\n\n    // The plugin's `destroy` method is called as a consequence and it should handle\n    // unregistration of plugin's maps. Some unregistered maps reset the cache.\n    instance.batchExecution(function () {\n      instance.rowIndexMapper.unregisterAll();\n      instance.columnIndexMapper.unregisterAll();\n      pluginsRegistry.getItems().forEach(function (_ref20) {\n        var _ref21 = _slicedToArray(_ref20, 2),\n          plugin = _ref21[1];\n        plugin.destroy();\n      });\n      pluginsRegistry.clear();\n      instance.runHooks('afterDestroy');\n    }, true);\n    Hooks.getSingleton().destroy(instance);\n    objectEach(instance, function (property, key, obj) {\n      // replace instance methods with post mortem\n      if (isFunction(property)) {\n        obj[key] = postMortem(key);\n      } else if (key !== 'guid') {\n        // replace instance properties with null (restores memory)\n        // it should not be necessary but this prevents a memory leak side effects that show itself in Jasmine tests\n        obj[key] = null;\n      }\n    });\n    instance.isDestroyed = true;\n\n    // replace private properties with null (restores memory)\n    // it should not be necessary but this prevents a memory leak side effects that show itself in Jasmine tests\n    if (datamap) {\n      datamap.destroy();\n    }\n    instance.rowIndexMapper = null;\n    instance.columnIndexMapper = null;\n    datamap = null;\n    grid = null;\n    selection = null;\n    editorManager = null;\n    instance = null;\n  };\n\n  /**\n   * Replacement for all methods after the Handsontable was destroyed.\n   *\n   * @private\n   * @param {string} method The method name.\n   * @returns {Function}\n   */\n  function postMortem(method) {\n    return function () {\n      throw new Error(\"The \\\"\".concat(method, \"\\\" method cannot be called because this Handsontable instance has been destroyed\"));\n    };\n  }\n\n  /**\n   * Returns the active editor class instance.\n   *\n   * @memberof Core#\n   * @function getActiveEditor\n   * @returns {BaseEditor} The active editor instance.\n   */\n  this.getActiveEditor = function () {\n    return editorManager.getActiveEditor();\n  };\n\n  /**\n   * Returns plugin instance by provided its name.\n   *\n   * @memberof Core#\n   * @function getPlugin\n   * @param {string} pluginName The plugin name.\n   * @returns {BasePlugin|undefined} The plugin instance or undefined if there is no plugin.\n   */\n  this.getPlugin = function (pluginName) {\n    var unifiedPluginName = toUpperCaseFirst(pluginName);\n\n    // Workaround for the UndoRedo plugin which, currently doesn't follow the plugin architecture.\n    if (unifiedPluginName === 'UndoRedo') {\n      return this.undoRedo;\n    }\n    return pluginsRegistry.getItem(unifiedPluginName);\n  };\n\n  /**\n   * Returns name of the passed plugin.\n   *\n   * @private\n   * @memberof Core#\n   * @param {BasePlugin} plugin The plugin instance.\n   * @returns {string}\n   */\n  this.getPluginName = function (plugin) {\n    // Workaround for the UndoRedo plugin which, currently doesn't follow the plugin architecture.\n    if (plugin === this.undoRedo) {\n      return this.undoRedo.constructor.PLUGIN_KEY;\n    }\n    return pluginsRegistry.getId(plugin);\n  };\n\n  /**\n   * Returns the Handsontable instance.\n   *\n   * @memberof Core#\n   * @function getInstance\n   * @returns {Handsontable} The Handsontable instance.\n   */\n  this.getInstance = function () {\n    return instance;\n  };\n\n  /**\n   * Adds listener to the specified hook name (only for this Handsontable instance).\n   *\n   * @memberof Core#\n   * @function addHook\n   * @see Hooks#add\n   * @param {string} key Hook name (see {@link Hooks}).\n   * @param {Function|Array} callback Function or array of functions.\n   * @example\n   * ```js\n   * hot.addHook('beforeInit', myCallback);\n   * ```\n   */\n  this.addHook = function (key, callback) {\n    Hooks.getSingleton().add(key, callback, instance);\n  };\n\n  /**\n   * Check if for a specified hook name there are added listeners (only for this Handsontable instance). All available\n   * hooks you will find {@link Hooks}.\n   *\n   * @memberof Core#\n   * @function hasHook\n   * @see Hooks#has\n   * @param {string} key Hook name.\n   * @returns {boolean}\n   *\n   * @example\n   * ```js\n   * const hasBeforeInitListeners = hot.hasHook('beforeInit');\n   * ```\n   */\n  this.hasHook = function (key) {\n    return Hooks.getSingleton().has(key, instance) || Hooks.getSingleton().has(key);\n  };\n\n  /**\n   * Adds listener to specified hook name (only for this Handsontable instance). After the listener is triggered,\n   * it will be automatically removed.\n   *\n   * @memberof Core#\n   * @function addHookOnce\n   * @see Hooks#once\n   * @param {string} key Hook name (see {@link Hooks}).\n   * @param {Function|Array} callback Function or array of functions.\n   * @example\n   * ```js\n   * hot.addHookOnce('beforeInit', myCallback);\n   * ```\n   */\n  this.addHookOnce = function (key, callback) {\n    Hooks.getSingleton().once(key, callback, instance);\n  };\n\n  /**\n   * Removes the hook listener previously registered with {@link Core#addHook}.\n   *\n   * @memberof Core#\n   * @function removeHook\n   * @see Hooks#remove\n   * @param {string} key Hook name.\n   * @param {Function} callback Reference to the function which has been registered using {@link Core#addHook}.\n   *\n   * @example\n   * ```js\n   * hot.removeHook('beforeInit', myCallback);\n   * ```\n   */\n  this.removeHook = function (key, callback) {\n    Hooks.getSingleton().remove(key, callback, instance);\n  };\n\n  /**\n   * Run the callbacks for the hook provided in the `key` argument using the parameters given in the other arguments.\n   *\n   * @memberof Core#\n   * @function runHooks\n   * @see Hooks#run\n   * @param {string} key Hook name.\n   * @param {*} [p1] Argument passed to the callback.\n   * @param {*} [p2] Argument passed to the callback.\n   * @param {*} [p3] Argument passed to the callback.\n   * @param {*} [p4] Argument passed to the callback.\n   * @param {*} [p5] Argument passed to the callback.\n   * @param {*} [p6] Argument passed to the callback.\n   * @returns {*}\n   *\n   * @example\n   * ```js\n   * // Run built-in hook\n   * hot.runHooks('beforeInit');\n   * // Run custom hook\n   * hot.runHooks('customAction', 10, 'foo');\n   * ```\n   */\n  this.runHooks = function (key, p1, p2, p3, p4, p5, p6) {\n    return Hooks.getSingleton().run(instance, key, p1, p2, p3, p4, p5, p6);\n  };\n\n  /**\n   * Get language phrase for specified dictionary key.\n   *\n   * @memberof Core#\n   * @function getTranslatedPhrase\n   * @since 0.35.0\n   * @param {string} dictionaryKey Constant which is dictionary key.\n   * @param {*} extraArguments Arguments which will be handled by formatters.\n   * @returns {string}\n   */\n  this.getTranslatedPhrase = function (dictionaryKey, extraArguments) {\n    return getTranslatedPhrase(tableMeta.language, dictionaryKey, extraArguments);\n  };\n\n  /**\n   * Converts instance into outerHTML of HTMLTableElement.\n   *\n   * @memberof Core#\n   * @function toHTML\n   * @since 7.1.0\n   * @returns {string}\n   */\n  this.toHTML = function () {\n    return instanceToHTML(_this);\n  };\n\n  /**\n   * Converts instance into HTMLTableElement.\n   *\n   * @memberof Core#\n   * @function toTableElement\n   * @since 7.1.0\n   * @returns {HTMLTableElement}\n   */\n  this.toTableElement = function () {\n    var tempElement = _this.rootDocument.createElement('div');\n    tempElement.insertAdjacentHTML('afterbegin', instanceToHTML(_this));\n    return tempElement.firstElementChild;\n  };\n  this.timeouts = [];\n\n  /**\n   * Sets timeout. Purpose of this method is to clear all known timeouts when `destroy` method is called.\n   *\n   * @param {number|Function} handle Handler returned from setTimeout or function to execute (it will be automatically wraped\n   *                                 by setTimeout function).\n   * @param {number} [delay=0] If first argument is passed as a function this argument set delay of the execution of that function.\n   * @private\n   */\n  this._registerTimeout = function (handle) {\n    var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var handleFunc = handle;\n    if (typeof handleFunc === 'function') {\n      handleFunc = setTimeout(handleFunc, delay);\n    }\n    this.timeouts.push(handleFunc);\n  };\n\n  /**\n   * Clears all known timeouts.\n   *\n   * @private\n   */\n  this._clearTimeouts = function () {\n    arrayEach(this.timeouts, function (handler) {\n      clearTimeout(handler);\n    });\n  };\n  this.immediates = [];\n\n  /**\n   * Execute function execution to the next event loop cycle. Purpose of this method is to clear all known timeouts when `destroy` method is called.\n   *\n   * @param {Function} callback Function to be delayed in execution.\n   * @private\n   */\n  this._registerImmediate = function (callback) {\n    this.immediates.push(setImmediate(callback));\n  };\n\n  /**\n   * Clears all known timeouts.\n   *\n   * @private\n   */\n  this._clearImmediates = function () {\n    arrayEach(this.immediates, function (handler) {\n      clearImmediate(handler);\n    });\n  };\n\n  /**\n   * Refresh selection borders. This is temporary method relic after selection rewrite.\n   *\n   * @private\n   * @param {boolean} [revertOriginal=false] If `true`, the previous value will be restored. Otherwise, the edited value will be saved.\n   * @param {boolean} [prepareEditorIfNeeded=true] If `true` the editor under the selected cell will be prepared to open.\n   */\n  this._refreshBorders = function () {\n    var revertOriginal = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var prepareEditorIfNeeded = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    editorManager.destroyEditor(revertOriginal);\n    instance.view.render();\n    if (prepareEditorIfNeeded && selection.isSelected()) {\n      editorManager.prepareEditor();\n    }\n  };\n\n  /**\n   * Check if currently it is RTL direction.\n   *\n   * @private\n   * @memberof Core#\n   * @function isRtl\n   * @returns {boolean} True if RTL.\n   */\n  this.isRtl = function () {\n    return instance.rootWindow.getComputedStyle(instance.rootElement).direction === 'rtl';\n  };\n\n  /**\n   * Check if currently it is LTR direction.\n   *\n   * @private\n   * @memberof Core#\n   * @function isLtr\n   * @returns {boolean} True if LTR.\n   */\n  this.isLtr = function () {\n    return !instance.isRtl();\n  };\n\n  /**\n   * Returns 1 for LTR; -1 for RTL. Useful for calculations.\n   *\n   * @private\n   * @memberof Core#\n   * @function getDirectionFactor\n   * @returns {number} Returns 1 for LTR; -1 for RTL.\n   */\n  this.getDirectionFactor = function () {\n    return instance.isLtr() ? 1 : -1;\n  };\n  var shortcutManager = createShortcutManager({\n    handleEvent: function handleEvent(event) {\n      var isListening = instance.isListening();\n      var isKeyboardEventWithKey = (event === null || event === void 0 ? void 0 : event.key) !== void 0;\n      return isListening && isKeyboardEventWithKey;\n    },\n    beforeKeyDown: function beforeKeyDown(event) {\n      return _this.runHooks('beforeKeyDown', event);\n    },\n    afterKeyDown: function afterKeyDown(event) {\n      if (_this.isDestroyed) {\n        // Handsontable could be destroyed after performing action (executing a callback).\n        return;\n      }\n      instance.runHooks('afterDocumentKeyDown', event);\n    },\n    ownerWindow: this.rootWindow\n  });\n  this.addHook('beforeOnCellMouseDown', function (event) {\n    // Releasing keys as some browser/system shortcuts break events sequence (thus the `keyup` event isn't triggered).\n    if (event.ctrlKey === false && event.metaKey === false) {\n      shortcutManager.releasePressedKeys();\n    }\n  });\n\n  /**\n   * Returns instance of a manager responsible for handling shortcuts stored in some contexts. It run actions after\n   * pressing key combination in active Handsontable instance.\n   *\n   * @memberof Core#\n   * @since 12.0.0\n   * @function getShortcutManager\n   * @returns {ShortcutManager} Instance of {@link ShortcutManager}\n   */\n  this.getShortcutManager = function () {\n    return shortcutManager;\n  };\n  var gridContext = shortcutManager.addContext('grid');\n  var gridConfig = {\n    runOnlyIf: function runOnlyIf() {\n      return isDefined(instance.getSelected()) && instance.countRenderedRows() > 0 && instance.countRenderedCols() > 0;\n    },\n    group: SHORTCUTS_GROUP\n  };\n  shortcutManager.setActiveContextName('grid');\n  gridContext.addShortcuts([{\n    keys: [['Control/Meta', 'A']],\n    callback: function callback() {\n      instance.selectAll();\n    }\n  }, {\n    keys: [['Control/Meta', 'Enter']],\n    callback: function callback() {\n      var selectedRange = instance.getSelectedRange();\n      var _selectedRange$highli = selectedRange[selectedRange.length - 1].highlight,\n        highlightRow = _selectedRange$highli.row,\n        highlightColumn = _selectedRange$highli.col;\n      var valueToPopulate = instance.getDataAtCell(highlightRow, highlightColumn);\n      var cellValues = new Map();\n      for (var i = 0; i < selectedRange.length; i++) {\n        selectedRange[i].forAll(function (row, column) {\n          if (row >= 0 && column >= 0 && (row !== highlightRow || column !== highlightColumn)) {\n            var _instance$getCellMeta = instance.getCellMeta(row, column),\n              readOnly = _instance$getCellMeta.readOnly;\n            if (!readOnly) {\n              cellValues.set(\"\".concat(row, \"x\").concat(column), [row, column, valueToPopulate]);\n            }\n          }\n        });\n      }\n      instance.setDataAtCell(Array.from(cellValues.values()));\n    },\n    runOnlyIf: function runOnlyIf() {\n      return instance.getSelectedRangeLast().getCellsCount() > 1;\n    }\n  }, {\n    keys: [['ArrowUp']],\n    callback: function callback() {\n      selection.transformStart(-1, 0);\n    }\n  }, {\n    keys: [['ArrowUp', 'Control/Meta']],\n    captureCtrl: true,\n    callback: function callback() {\n      selection.setRangeStart(instance._createCellCoords(instance.rowIndexMapper.getNearestNotHiddenIndex(0, 1), instance.getSelectedRangeLast().highlight.col));\n    }\n  }, {\n    keys: [['ArrowUp', 'Shift']],\n    callback: function callback() {\n      selection.transformEnd(-1, 0);\n    }\n  }, {\n    keys: [['ArrowUp', 'Shift', 'Control/Meta']],\n    captureCtrl: true,\n    callback: function callback() {\n      var _instance$getSelected = instance.getSelectedRangeLast(),\n        from = _instance$getSelected.from,\n        to = _instance$getSelected.to;\n      var row = instance.rowIndexMapper.getNearestNotHiddenIndex(0, 1);\n      selection.setRangeStart(from.clone());\n      selection.setRangeEnd(instance._createCellCoords(row, to.col));\n    },\n    runOnlyIf: function runOnlyIf() {\n      return !(instance.selection.isSelectedByCorner() || instance.selection.isSelectedByColumnHeader());\n    }\n  }, {\n    keys: [['ArrowDown']],\n    callback: function callback() {\n      selection.transformStart(1, 0);\n    }\n  }, {\n    keys: [['ArrowDown', 'Control/Meta']],\n    captureCtrl: true,\n    callback: function callback() {\n      selection.setRangeStart(instance._createCellCoords(instance.rowIndexMapper.getNearestNotHiddenIndex(instance.countRows() - 1, -1), instance.getSelectedRangeLast().highlight.col));\n    }\n  }, {\n    keys: [['ArrowDown', 'Shift']],\n    callback: function callback() {\n      selection.transformEnd(1, 0);\n    }\n  }, {\n    keys: [['ArrowDown', 'Shift', 'Control/Meta']],\n    captureCtrl: true,\n    callback: function callback() {\n      var _instance$getSelected2 = instance.getSelectedRangeLast(),\n        from = _instance$getSelected2.from,\n        to = _instance$getSelected2.to;\n      var row = instance.rowIndexMapper.getNearestNotHiddenIndex(instance.countRows() - 1, -1);\n      selection.setRangeStart(from.clone());\n      selection.setRangeEnd(instance._createCellCoords(row, to.col));\n    },\n    runOnlyIf: function runOnlyIf() {\n      return !(instance.selection.isSelectedByCorner() || instance.selection.isSelectedByColumnHeader());\n    }\n  }, {\n    keys: [['ArrowLeft']],\n    callback: function callback() {\n      selection.transformStart(0, -1 * instance.getDirectionFactor());\n    }\n  }, {\n    keys: [['ArrowLeft', 'Control/Meta']],\n    captureCtrl: true,\n    callback: function callback() {\n      var _instance$columnIndex;\n      var row = instance.getSelectedRangeLast().highlight.row;\n      var column = (_instance$columnIndex = instance.columnIndexMapper).getNearestNotHiddenIndex.apply(_instance$columnIndex, _toConsumableArray(instance.isRtl() ? [instance.countCols() - 1, -1] : [0, 1]));\n      selection.setRangeStart(instance._createCellCoords(row, column));\n    }\n  }, {\n    keys: [['ArrowLeft', 'Shift']],\n    callback: function callback() {\n      selection.transformEnd(0, -1 * instance.getDirectionFactor());\n    }\n  }, {\n    keys: [['ArrowLeft', 'Shift', 'Control/Meta']],\n    captureCtrl: true,\n    callback: function callback() {\n      var _instance$columnIndex2;\n      var _instance$getSelected3 = instance.getSelectedRangeLast(),\n        from = _instance$getSelected3.from,\n        to = _instance$getSelected3.to;\n      var column = (_instance$columnIndex2 = instance.columnIndexMapper).getNearestNotHiddenIndex.apply(_instance$columnIndex2, _toConsumableArray(instance.isRtl() ? [instance.countCols() - 1, -1] : [0, 1]));\n      selection.setRangeStart(from.clone());\n      selection.setRangeEnd(instance._createCellCoords(to.row, column));\n    },\n    runOnlyIf: function runOnlyIf() {\n      return !(instance.selection.isSelectedByCorner() || instance.selection.isSelectedByRowHeader());\n    }\n  }, {\n    keys: [['ArrowRight']],\n    callback: function callback() {\n      selection.transformStart(0, instance.getDirectionFactor());\n    }\n  }, {\n    keys: [['ArrowRight', 'Control/Meta']],\n    captureCtrl: true,\n    callback: function callback() {\n      var _instance$columnIndex3;\n      var row = instance.getSelectedRangeLast().highlight.row;\n      var column = (_instance$columnIndex3 = instance.columnIndexMapper).getNearestNotHiddenIndex.apply(_instance$columnIndex3, _toConsumableArray(instance.isRtl() ? [0, 1] : [instance.countCols() - 1, -1]));\n      selection.setRangeStart(instance._createCellCoords(row, column));\n    }\n  }, {\n    keys: [['ArrowRight', 'Shift']],\n    callback: function callback() {\n      selection.transformEnd(0, instance.getDirectionFactor());\n    }\n  }, {\n    keys: [['ArrowRight', 'Shift', 'Control/Meta']],\n    captureCtrl: true,\n    callback: function callback() {\n      var _instance$columnIndex4;\n      var _instance$getSelected4 = instance.getSelectedRangeLast(),\n        from = _instance$getSelected4.from,\n        to = _instance$getSelected4.to;\n      var column = (_instance$columnIndex4 = instance.columnIndexMapper).getNearestNotHiddenIndex.apply(_instance$columnIndex4, _toConsumableArray(instance.isRtl() ? [0, 1] : [instance.countCols() - 1, -1]));\n      selection.setRangeStart(from.clone());\n      selection.setRangeEnd(instance._createCellCoords(to.row, column));\n    },\n    runOnlyIf: function runOnlyIf() {\n      return !(instance.selection.isSelectedByCorner() || instance.selection.isSelectedByRowHeader());\n    }\n  }, {\n    keys: [['Home']],\n    captureCtrl: true,\n    callback: function callback() {\n      var fixedColumns = parseInt(instance.getSettings().fixedColumnsStart, 10);\n      var row = instance.getSelectedRangeLast().highlight.row;\n      var column = instance.columnIndexMapper.getNearestNotHiddenIndex(fixedColumns, 1);\n      selection.setRangeStart(instance._createCellCoords(row, column));\n    },\n    runOnlyIf: function runOnlyIf() {\n      return instance.view.isMainTableNotFullyCoveredByOverlays();\n    }\n  }, {\n    keys: [['Home', 'Shift']],\n    callback: function callback() {\n      selection.setRangeEnd(instance._createCellCoords(selection.selectedRange.current().from.row, instance.columnIndexMapper.getNearestNotHiddenIndex(0, 1)));\n    }\n  }, {\n    keys: [['Home', 'Control/Meta']],\n    captureCtrl: true,\n    callback: function callback() {\n      var fixedRows = parseInt(instance.getSettings().fixedRowsTop, 10);\n      var fixedColumns = parseInt(instance.getSettings().fixedColumnsStart, 10);\n      var row = instance.rowIndexMapper.getNearestNotHiddenIndex(fixedRows, 1);\n      var column = instance.columnIndexMapper.getNearestNotHiddenIndex(fixedColumns, 1);\n      selection.setRangeStart(instance._createCellCoords(row, column));\n    },\n    runOnlyIf: function runOnlyIf() {\n      return instance.view.isMainTableNotFullyCoveredByOverlays();\n    }\n  }, {\n    keys: [['End']],\n    captureCtrl: true,\n    callback: function callback() {\n      selection.setRangeStart(instance._createCellCoords(instance.getSelectedRangeLast().highlight.row, instance.columnIndexMapper.getNearestNotHiddenIndex(instance.countCols() - 1, -1)));\n    },\n    runOnlyIf: function runOnlyIf() {\n      return instance.view.isMainTableNotFullyCoveredByOverlays();\n    }\n  }, {\n    keys: [['End', 'Shift']],\n    callback: function callback() {\n      selection.setRangeEnd(instance._createCellCoords(selection.selectedRange.current().from.row, instance.columnIndexMapper.getNearestNotHiddenIndex(instance.countCols() - 1, -1)));\n    }\n  }, {\n    keys: [['End', 'Control/Meta']],\n    captureCtrl: true,\n    callback: function callback() {\n      var fixedRows = parseInt(instance.getSettings().fixedRowsBottom, 10);\n      var row = instance.rowIndexMapper.getNearestNotHiddenIndex(instance.countRows() - fixedRows - 1, -1);\n      var column = instance.columnIndexMapper.getNearestNotHiddenIndex(instance.countCols() - 1, -1);\n      selection.setRangeStart(instance._createCellCoords(row, column));\n    },\n    runOnlyIf: function runOnlyIf() {\n      return instance.view.isMainTableNotFullyCoveredByOverlays();\n    }\n  }, {\n    keys: [['PageUp']],\n    callback: function callback() {\n      selection.transformStart(-instance.countVisibleRows(), 0);\n    }\n  }, {\n    keys: [['PageUp', 'Shift']],\n    callback: function callback() {\n      var _instance$getSelected5 = instance.getSelectedRangeLast(),\n        to = _instance$getSelected5.to;\n      var nextRowIndexToSelect = Math.max(to.row - instance.countVisibleRows(), 0);\n      var row = instance.rowIndexMapper.getNearestNotHiddenIndex(nextRowIndexToSelect, 1);\n      if (row !== null) {\n        var coords = instance._createCellCoords(row, to.col);\n        var scrollPadding = to.row - instance.view.getFirstFullyVisibleRow();\n        var nextVerticalScroll = Math.max(coords.row - scrollPadding, 0);\n        selection.setRangeEnd(coords);\n        instance.scrollViewportTo(nextVerticalScroll);\n      }\n    }\n  }, {\n    keys: [['PageDown']],\n    callback: function callback() {\n      selection.transformStart(instance.countVisibleRows(), 0);\n    }\n  }, {\n    keys: [['PageDown', 'Shift']],\n    callback: function callback() {\n      var _instance$getSelected6 = instance.getSelectedRangeLast(),\n        to = _instance$getSelected6.to;\n      var nextRowIndexToSelect = Math.min(to.row + instance.countVisibleRows(), instance.countRows() - 1);\n      var row = instance.rowIndexMapper.getNearestNotHiddenIndex(nextRowIndexToSelect, -1);\n      if (row !== null) {\n        var coords = instance._createCellCoords(row, to.col);\n        var scrollPadding = to.row - instance.view.getFirstFullyVisibleRow();\n        var nextVerticalScroll = Math.min(coords.row - scrollPadding, instance.countRows() - 1);\n        selection.setRangeEnd(coords);\n        instance.scrollViewportTo(nextVerticalScroll);\n      }\n    }\n  }, {\n    keys: [['Tab']],\n    callback: function callback(event) {\n      var tabMoves = typeof tableMeta.tabMoves === 'function' ? tableMeta.tabMoves(event) : tableMeta.tabMoves;\n      selection.transformStart(tabMoves.row, tabMoves.col, true);\n    }\n  }, {\n    keys: [['Shift', 'Tab']],\n    callback: function callback(event) {\n      var tabMoves = typeof tableMeta.tabMoves === 'function' ? tableMeta.tabMoves(event) : tableMeta.tabMoves;\n      selection.transformStart(-tabMoves.row, -tabMoves.col);\n    }\n  }], gridConfig);\n  getPluginsNames().forEach(function (pluginName) {\n    var PluginClass = getPlugin(pluginName);\n    pluginsRegistry.addItem(pluginName, new PluginClass(_this));\n  });\n  Hooks.getSingleton().run(instance, 'construct');\n}","map":{"version":3,"names":["_templateObject","_templateObject2","_typeof","obj","Symbol","iterator","constructor","prototype","_taggedTemplateLiteral","strings","raw","slice","Object","freeze","defineProperties","value","_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","_i","_s","_e","_x","_r","_arr","_n","_d","call","next","done","push","length","err","return","Array","isArray","_toConsumableArray","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","o","minLen","_arrayLikeToArray","n","toString","name","from","test","iter","len","arr2","addClass","empty","observeVisibilityChangeOnce","removeClass","isFunction","isDefined","isUndefined","isRegExp","_injectProductInfo","isEmpty","isMobileBrowser","isIpadOS","warn","toSingleLine","EditorManager","EventManager","deepClone","duckSchema","isObjectEqual","isObject","deepObjectSize","hasOwnProperty","createObjectPropListener","objectEach","arrayMap","arrayEach","arrayReduce","getDifferenceOfArrays","stringToArray","pivot","instanceToHTML","getPlugin","getPluginsNames","getRenderer","getEditor","getValidator","randomString","toUpperCaseFirst","rangeEach","rangeEachReverse","isNumericLike","TableView","DataSource","spreadsheetColumnLabel","IndexMapper","registerAsRootInstance","hasValidParameter","isRootInstance","ViewportColumnsCalculator","Hooks","hasLanguageDictionary","getValidLanguageCode","getTranslatedPhrase","warnUserAboutLanguageRegistration","normalizeLanguageCode","Selection","MetaManager","DynamicCellMetaMod","ExtendMetaPropertiesMod","replaceData","createUniqueMap","createShortcutManager","SHORTCUTS_GROUP","activeGuid","deprecationWarns","Set","Core","rootElement","userSettings","_userSettings$layoutD","_this","rootInstanceSymbol","arguments","undefined","preventScrollingToCell","instance","eventManager","datamap","dataSource","grid","editorManager","firstRun","rootDocument","ownerDocument","rootWindow","defaultView","isDestroyed","renderSuspendedCounter","executionSuspendedCounter","layoutDirection","rootElementDirection","includes","getComputedStyle","direction","setAttribute","isRtl","isLtr","getDirectionFactor","language","metaManager","tableMeta","getTableMeta","globalMeta","getGlobalMeta","pluginsRegistry","container","createElement","renderCall","insertBefore","firstChild","licenseKey","guid","concat","columnIndexMapper","rowIndexMapper","id","substring","visualToRenderableCoords","coords","visualRow","row","visualColumn","col","_createCellCoords","getRenderableFromVisualIndex","renderableToVisualCoords","renderableRow","renderableColumn","getVisualFromRenderableIndex","selection","countCols","countRows","propToCol","prop","isEditorOpened","getActiveEditor","isOpened","countColsTranslated","view","countRenderableColumns","countRowsTranslated","countRenderableRows","getShortcutManager","createCellCoords","column","createCellRange","highlight","to","_createCellRange","isDisabledCellSelection","getCellMeta","disableVisualSelection","onIndexMapperCacheUpdate","_ref","hiddenIndexesChanged","refresh","addLocalHook","cellCoords","runHooks","_wt","wtTable","getFirstVisibleRow","getFirstVisibleColumn","preventScrolling","selectionRange","getSelectedRange","_selectionRange$curre","current","selectionLayerLevel","size","colToProp","isSelectedByAnyHeader","currentSelectedRange","selectedRange","scrollToCell","isTouched","isSelectedByRowHeader","isSelectedByColumnHeader","isMultiple","scrollViewport","scrollViewportVertically","scrollViewportHorizontally","_refreshBorders","cellRanges","_cellRanges$selection","changedIsMultiple","cellCoordsDelta","rowTransformDir","colTransformDir","destroyEditor","totalRows","alter","totalCols","action","index","_index","_index2","amount","source","keepEmptyRows","normalizeIndexesGroup","indexes","sortedIndexes","sort","_ref2","_ref3","_ref4","indexA","_ref5","indexB","normalizedIndexes","acc","_ref6","_ref7","groupIndex","groupAmount","previousItem","_previousItem","prevIndex","prevAmount","prevLastIndex","amountToAdd","Math","max","has","add","numberOfSourceRows","countSourceRows","maxRows","insertRowMode","_datamap$createRow","createRow","mode","rowDelta","delta","startRowPhysicalIndex","startPhysicalIndex","currentFromRange","currentFromRow","startVisualRowIndex","toVisualRow","isSelectedByCorner","selectAll","_currentSelectedRange","currentToRow","currentToColumn","currentFromColumn","pop","setRangeStartOnly","setRangeEnd","insertColumnMode","countSourceCols","_datamap$createCol","createCol","colDelta","startColumnPhysicalIndex","colHeaders","spliceArray","toVisualColumn","splice","apply","_currentSelectedRange2","_currentFromRange","_currentFromColumn","startVisualColumnIndex","_currentSelectedRange3","_currentToRow","_currentToColumn","_currentFromRow","removeRow","offset","_ref8","_ref9","calcIndex","Number","isInteger","wasRemoved","fixedRowsTop","min","fixedRowsBottom","adjustRowsAndCols","removeCol","_ref10","_ref11","physicalColumnIndex","toPhysicalColumn","fixedColumnsStart","Error","minRows","minSpareRows","minCols","minSpareCols","deselect","nrOfRows","emptyRows","countEmptyRows","emptyRowsMissing","rowsToCreate","emptyCols","countEmptyCols","nrOfColumns","columns","colsToCreate","dataType","emptyColsMissing","_colsToCreate","maxCols","isSelected","rowCount","colCount","range","selectionChanged","fromRow","fromCol","toRow","toCol","selectCell","adjustElementsSize","populateFromArray","start","input","end","method","deltas","r","rlen","c","clen","setData","newDataByColumns","startRow","startColumn","columnsPopulationEnd","rowsPopulationEnd","populatedDataByColumns","numberOfDataColumns","numberOfColumnsToPopulate","pushedDownDataByRows","getData","pushedDownDataByColumns","fill","numberOfDataRows","numberOfRowsToPopulate","pushedRightDataByRows","map","rowData","_input$r","selected","skippedRow","skippedColumn","pushData","cellMeta","getInputValue","rowValue","rowInputLength","rowSelectionLength","allowInsertRow","colInputLength","colSelectionLength","skipRowOnPaste","allowInsertColumn","skipColumnOnPaste","readOnly","orgValue","getDataAtCell","result","orgValueSchema","valueSchema","setDataAtCell","setLanguage","languageCode","normalizedLanguageCode","setClassName","className","classSettings","element","table","globalMetaSettingsArray","settingsArray","classNameToRemove","classNameToAdd","init","data","updateSettings","getInstance","forceFullRender","render","offsetParent","wtOverlays","updateLastSpreaderSize","ValidatorsQueue","resolved","validatorsInQueue","valid","addValidatorToQueue","removeValidatorFormQueue","checkIfQueueIsEmpty","onQueueEmpty","getParsedNumber","numericData","unifiedNumericData","replace","isNaN","parseFloat","validateChanges","changes","callback","activeEditor","beforeChangeResult","shouldBeCanceled","cancelChanges","waitingForValidator","isValid","_changes$i","newValue","cellProperties","type","getCellValidator","validateCell","cellPropertiesReference","allowInvalid","cell","getCell","visualCol","invalidCellClassName","applyChanges","skipThisChange","_datamap$createRow2","numberOfCreatedRows","_datamap$createCol2","numberOfCreatedColumns","set","lockEditor","unlockEditor","refreshValue","validator","canBeValidated","hidden","td","nodeName","getSetting","expression","cellValue","validatorCallback","_registerImmediate","setDataInputToArray","propOrCol","changeSource","ilen","getAtCell","toPhysicalRow","setDataAtRowProp","listen","isListening","unlisten","revertOriginal","prepareEditorIfNeeded","endRow","endCol","spliceCol","_datamap","_len","elements","_key","spliceRow","_datamap2","_len2","_key2","getSelected","_ref12","getSelectedLast","getSelectedRangeLast","emptySelectedCells","_this2","cellRange","topStart","getTopStartCorner","bottomEnd","getBottomEndCorner","isRenderSuspended","suspendRender","resumeRender","nextValue","batchRender","wrappedOperations","isExecutionSuspended","suspendExecution","suspendOperations","resumeExecution","forceFlushChanges","resumeOperations","batchExecution","batch","refreshDimensions","_instance$view$getLas","getLastSize","lastWidth","width","lastHeight","height","_instance$rootElement","getBoundingClientRect","isSizeChanged","isResizeBlocked","scrollableElement","setLastSize","updateData","_this3","newDataMap","fitToLength","getInitialColumnCount","hotInstance","dataMap","internalSource","loadData","clearCellsCache","initIndexMappers","columnsSettings","finalNrOfColumns","nrOfSourceColumns","columnIndex","colToPropCache","dataSchema","schema","getSchema","initToLength","row2","column2","getAll","getRange","DESTINATION_RENDERER","getCopyableText","startCol","getCopyableData","getCopyable","settings","dataUpdateFunction","bind","columnsAsFunc","j","rows","cols","ganttChart","tableClassName","syncOverlayTableClassNames","getSingleton","isRegistered","isDeprecated","initialHook","addHook","createMap","columnSetting","cells","clearCache","updateColumnMeta","setCellMetaObject","currentHeight","style","parseInt","initialStyle","getAttribute","_initialStyle","indexOf","overflow","wtViewport","resetHasOversizedColumnHeadersMarked","exportSettingsAsClassNames","updateMainScrollableElements","getValue","sel","getSettings","clear","topmost","renderableColumnIndex","renderableRowIndex","isHidden","getCellAtCoords","getCoords","renderableCoords","getVisualFromPhysicalIndex","getPhysicalFromVisualIndex","get","getDataAtRowProp","getDataAtCol","_ref13","getDataAtProp","_ref14","getSourceData","getByRange","getSourceDataArray","getSourceDataAtCol","getAtColumn","setSourceDataAtCell","isThereAnySetSourceListener","hasHook","changesForHook","_ref15","_ref16","changeRow","changeProp","changeValue","_ref17","_ref18","setAtCell","getSourceDataAtRow","getAtRow","getSourceDataAtCell","getDataAtRow","getDataType","rowFrom","columnFrom","rowTo","columnTo","_this4","rowStart","columnStart","rowEnd","columnEnd","previousType","currentType","isTypeEqual","cellType","removeCellMeta","key","_ref19","physicalRow","physicalColumn","cachedValue","getCellMetaKeyValue","hookResult","spliceCellsMeta","visualIndex","_this5","deleteAmount","_len3","cellMetaRows","_key3","reverse","cellMetaRow","_this6","setCellMeta","allowSetCellMeta","getCellsMeta","getCellMetaAtRow","getCellsMetaAtRow","isColumnModificationAllowed","getCellRenderer","rowOrMeta","cellRenderer","renderer","getCellEditor","cellEditor","editor","cellValidator","validateCells","_validateCells","validateRows","validateColumns","getRowHeader","rowHeader","rowHeaders","hasRowHeaders","hasColHeaders","getColHeader","headerLevel","out","translateVisualIndexToColumns","visualColumnIndex","columnsLen","title","_getColWidthFromSettings","colWidths","getColWidth","DEFAULT_WIDTH","_getRowHeightFromSettings","rowHeights","getRowHeight","countFirstRowKeys","getLength","dataLen","getNotTrimmedIndexesLength","countRenderedRows","drawn","getRenderedRowsCount","countVisibleRows","getVisibleRowsCount","countRenderedCols","getRenderedColumnsCount","countVisibleCols","getVisibleColumnsCount","ending","isEmptyRow","emptyColumns","isEmptyCol","endColumn","changeListener","selectCells","wasSelected","selectColumns","selectRows","deselectCell","includeHeaders","includeRowHeaders","includeColumnHeaders","getIndexToScroll","indexMapper","getNearestNotHiddenIndex","scrollViewportTo","snapToBottom","snapToRight","considerHiddenIndexes","snapToTop","snapToLeft","_isRowInteger","_isColumnInteger","visualRowToScroll","visualColumnToScroll","isRowInteger","isColumnInteger","destroy","_clearTimeouts","_clearImmediates","licenseInfo","querySelector","parentNode","removeChild","unregisterAll","getItems","forEach","_ref20","_ref21","plugin","property","postMortem","pluginName","unifiedPluginName","undoRedo","getItem","getPluginName","PLUGIN_KEY","getId","addHookOnce","once","removeHook","remove","p1","p2","p3","p4","p5","p6","run","dictionaryKey","extraArguments","toHTML","toTableElement","tempElement","insertAdjacentHTML","firstElementChild","timeouts","_registerTimeout","handle","delay","handleFunc","setTimeout","handler","clearTimeout","immediates","setImmediate","clearImmediate","prepareEditor","shortcutManager","handleEvent","event","isKeyboardEventWithKey","beforeKeyDown","afterKeyDown","ownerWindow","ctrlKey","metaKey","releasePressedKeys","gridContext","addContext","gridConfig","runOnlyIf","group","setActiveContextName","addShortcuts","keys","_selectedRange$highli","highlightRow","highlightColumn","valueToPopulate","cellValues","Map","forAll","_instance$getCellMeta","values","getCellsCount","transformStart","captureCtrl","setRangeStart","transformEnd","_instance$getSelected","clone","_instance$getSelected2","_instance$columnIndex","_instance$columnIndex2","_instance$getSelected3","_instance$columnIndex3","_instance$columnIndex4","_instance$getSelected4","fixedColumns","isMainTableNotFullyCoveredByOverlays","fixedRows","_instance$getSelected5","nextRowIndexToSelect","scrollPadding","getFirstFullyVisibleRow","nextVerticalScroll","_instance$getSelected6","tabMoves","PluginClass","addItem"],"sources":["/home/rstorey/wwwdev/Blucktool/node_modules/handsontable/core.mjs"],"sourcesContent":["import \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.freeze.js\";\nvar _templateObject, _templateObject2;\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.number.is-integer.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.fill.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.reverse.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.timers.js\";\nimport \"core-js/modules/web.immediate.js\";\nimport \"core-js/modules/es.map.js\";\nimport { addClass, empty, observeVisibilityChangeOnce, removeClass } from \"./helpers/dom/element.mjs\";\nimport { isFunction } from \"./helpers/function.mjs\";\nimport { isDefined, isUndefined, isRegExp, _injectProductInfo, isEmpty } from \"./helpers/mixed.mjs\";\nimport { isMobileBrowser, isIpadOS } from \"./helpers/browser.mjs\";\nimport { warn } from \"./helpers/console.mjs\";\nimport { toSingleLine } from \"./helpers/templateLiteralTag.mjs\";\nimport EditorManager from \"./editorManager.mjs\";\nimport EventManager from \"./eventManager.mjs\";\nimport { deepClone, duckSchema, isObjectEqual, isObject, deepObjectSize, hasOwnProperty, createObjectPropListener, objectEach } from \"./helpers/object.mjs\";\nimport { arrayMap, arrayEach, arrayReduce, getDifferenceOfArrays, stringToArray, pivot } from \"./helpers/array.mjs\";\nimport { instanceToHTML } from \"./utils/parseTable.mjs\";\nimport { getPlugin, getPluginsNames } from \"./plugins/registry.mjs\";\nimport { getRenderer } from \"./renderers/registry.mjs\";\nimport { getEditor } from \"./editors/registry.mjs\";\nimport { getValidator } from \"./validators/registry.mjs\";\nimport { randomString, toUpperCaseFirst } from \"./helpers/string.mjs\";\nimport { rangeEach, rangeEachReverse, isNumericLike } from \"./helpers/number.mjs\";\nimport TableView from \"./tableView.mjs\";\nimport DataSource from \"./dataMap/dataSource.mjs\";\nimport { spreadsheetColumnLabel } from \"./helpers/data.mjs\";\nimport { IndexMapper } from \"./translations/index.mjs\";\nimport { registerAsRootInstance, hasValidParameter, isRootInstance } from \"./utils/rootInstance.mjs\";\nimport { ViewportColumnsCalculator } from \"./3rdparty/walkontable/src/index.mjs\";\nimport Hooks from \"./pluginHooks.mjs\";\nimport { hasLanguageDictionary, getValidLanguageCode, getTranslatedPhrase } from \"./i18n/registry.mjs\";\nimport { warnUserAboutLanguageRegistration, normalizeLanguageCode } from \"./i18n/utils.mjs\";\nimport { Selection } from \"./selection/index.mjs\";\nimport { MetaManager, DynamicCellMetaMod, ExtendMetaPropertiesMod, replaceData } from \"./dataMap/index.mjs\";\nimport { createUniqueMap } from \"./utils/dataStructures/uniqueMap.mjs\";\nimport { createShortcutManager } from \"./shortcuts/index.mjs\";\nvar SHORTCUTS_GROUP = 'gridDefault';\nvar activeGuid = null;\nvar deprecationWarns = new Set();\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n/**\n * Handsontable constructor.\n *\n * @core\n * @class Core\n * @description\n *\n * The `Handsontable` class (known as the `Core`) lets you modify the grid's behavior by using Handsontable's public API methods.\n *\n * ::: only-for react\n * To use these methods, associate a Handsontable instance with your instance\n * of the [`HotTable` component](@/guides/getting-started/installation.md#_4-use-the-hottable-component),\n * by using React's `ref` feature (read more on the [Instance methods](@/guides/getting-started/react-methods.md) page).\n * :::\n *\n * ## How to call a method\n *\n * ::: only-for javascript\n * ```js\n * // create a Handsontable instance\n * const hot = new Handsontable(document.getElementById('example'), options);\n *\n * // call a method\n * hot.setDataAtCell(0, 0, 'new value');\n * ```\n * :::\n *\n * ::: only-for react\n * ```jsx{3,7,13}\n * import { useRef } from 'react';\n *\n * const hotTableComponent = useRef(null);\n *\n * <HotTable\n *   // associate your `HotTable` component with a Handsontable instance\n *   ref={hotTableComponent}\n *   settings={options}\n * />\n *\n * // access the Handsontable instance, under the `.current.hotInstance` property\n * // call a method\n * hotTableComponent.current.hotInstance.setDataAtCell(0, 0, 'new value');\n * ```\n * :::\n *\n * @param {HTMLElement} rootElement The element to which the Handsontable instance is injected.\n * @param {object} userSettings The user defined options.\n * @param {boolean} [rootInstanceSymbol=false] Indicates if the instance is root of all later instances created.\n */\nexport default function Core(rootElement, userSettings) {\n  var _userSettings$layoutD,\n    _this = this;\n  var rootInstanceSymbol = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var preventScrollingToCell = false;\n  var instance = this;\n  var eventManager = new EventManager(instance);\n  var datamap;\n  var dataSource;\n  var grid;\n  var editorManager;\n  var firstRun = true;\n  if (hasValidParameter(rootInstanceSymbol)) {\n    registerAsRootInstance(this);\n  }\n\n  // TODO: check if references to DOM elements should be move to UI layer (Walkontable)\n  /**\n   * Reference to the container element.\n   *\n   * @private\n   * @type {HTMLElement}\n   */\n  this.rootElement = rootElement;\n  /**\n   * The nearest document over container.\n   *\n   * @private\n   * @type {Document}\n   */\n  this.rootDocument = rootElement.ownerDocument;\n  /**\n   * Window object over container's document.\n   *\n   * @private\n   * @type {Window}\n   */\n  this.rootWindow = this.rootDocument.defaultView;\n  /**\n   * A boolean to tell if the Handsontable has been fully destroyed. This is set to `true`\n   * after `afterDestroy` hook is called.\n   *\n   * @memberof Core#\n   * @member isDestroyed\n   * @type {boolean}\n   */\n  this.isDestroyed = false;\n  /**\n   * The counter determines how many times the render suspending was called. It allows\n   * tracking the nested suspending calls. For each render suspend resuming call the\n   * counter is decremented. The value equal to 0 means the render suspending feature\n   * is disabled.\n   *\n   * @private\n   * @type {number}\n   */\n  this.renderSuspendedCounter = 0;\n  /**\n   * The counter determines how many times the execution suspending was called. It allows\n   * tracking the nested suspending calls. For each execution suspend resuming call the\n   * counter is decremented. The value equal to 0 means the execution suspending feature\n   * is disabled.\n   *\n   * @private\n   * @type {number}\n   */\n  this.executionSuspendedCounter = 0;\n  var layoutDirection = (_userSettings$layoutD = userSettings === null || userSettings === void 0 ? void 0 : userSettings.layoutDirection) !== null && _userSettings$layoutD !== void 0 ? _userSettings$layoutD : 'inherit';\n  var rootElementDirection = ['rtl', 'ltr'].includes(layoutDirection) ? layoutDirection : this.rootWindow.getComputedStyle(this.rootElement).direction;\n  this.rootElement.setAttribute('dir', rootElementDirection);\n\n  /**\n   * Checks if the grid is rendered using the right-to-left layout direction.\n   *\n   * @since 12.0.0\n   * @memberof Core#\n   * @function isRtl\n   * @returns {boolean} True if RTL.\n   */\n  this.isRtl = function () {\n    return rootElementDirection === 'rtl';\n  };\n\n  /**\n   * Checks if the grid is rendered using the left-to-right layout direction.\n   *\n   * @since 12.0.0\n   * @memberof Core#\n   * @function isLtr\n   * @returns {boolean} True if LTR.\n   */\n  this.isLtr = function () {\n    return !instance.isRtl();\n  };\n\n  /**\n   * Returns 1 for LTR; -1 for RTL. Useful for calculations.\n   *\n   * @since 12.0.0\n   * @memberof Core#\n   * @function getDirectionFactor\n   * @returns {number} Returns 1 for LTR; -1 for RTL.\n   */\n  this.getDirectionFactor = function () {\n    return instance.isLtr() ? 1 : -1;\n  };\n  userSettings.language = getValidLanguageCode(userSettings.language);\n  var metaManager = new MetaManager(instance, userSettings, [DynamicCellMetaMod, ExtendMetaPropertiesMod]);\n  var tableMeta = metaManager.getTableMeta();\n  var globalMeta = metaManager.getGlobalMeta();\n  var pluginsRegistry = createUniqueMap();\n  this.container = this.rootDocument.createElement('div');\n  this.renderCall = false;\n  rootElement.insertBefore(this.container, rootElement.firstChild);\n  if (isRootInstance(this)) {\n    _injectProductInfo(userSettings.licenseKey, rootElement);\n  }\n  this.guid = \"ht_\".concat(randomString()); // this is the namespace for global events\n\n  /**\n   * Instance of index mapper which is responsible for managing the column indexes.\n   *\n   * @memberof Core#\n   * @member columnIndexMapper\n   * @type {IndexMapper}\n   */\n  this.columnIndexMapper = new IndexMapper();\n  /**\n   * Instance of index mapper which is responsible for managing the row indexes.\n   *\n   * @memberof Core#\n   * @member rowIndexMapper\n   * @type {IndexMapper}\n   */\n  this.rowIndexMapper = new IndexMapper();\n  dataSource = new DataSource(instance);\n  if (!this.rootElement.id || this.rootElement.id.substring(0, 3) === 'ht_') {\n    this.rootElement.id = this.guid; // if root element does not have an id, assign a random id\n  }\n\n  var visualToRenderableCoords = function visualToRenderableCoords(coords) {\n    var visualRow = coords.row,\n      visualColumn = coords.col;\n    return instance._createCellCoords(\n    // We just store indexes for rows and columns without headers.\n    visualRow >= 0 ? instance.rowIndexMapper.getRenderableFromVisualIndex(visualRow) : visualRow, visualColumn >= 0 ? instance.columnIndexMapper.getRenderableFromVisualIndex(visualColumn) : visualColumn);\n  };\n  var renderableToVisualCoords = function renderableToVisualCoords(coords) {\n    var renderableRow = coords.row,\n      renderableColumn = coords.col;\n    return instance._createCellCoords(\n    // We just store indexes for rows and columns without headers.\n    renderableRow >= 0 ? instance.rowIndexMapper.getVisualFromRenderableIndex(renderableRow) : renderableRow, renderableColumn >= 0 ? instance.columnIndexMapper.getVisualFromRenderableIndex(renderableColumn) : renderableColumn // eslint-disable-line max-len\n    );\n  };\n\n  var selection = new Selection(tableMeta, {\n    rowIndexMapper: function rowIndexMapper() {\n      return instance.rowIndexMapper;\n    },\n    columnIndexMapper: function columnIndexMapper() {\n      return instance.columnIndexMapper;\n    },\n    countCols: function countCols() {\n      return instance.countCols();\n    },\n    countRows: function countRows() {\n      return instance.countRows();\n    },\n    propToCol: function propToCol(prop) {\n      return datamap.propToCol(prop);\n    },\n    isEditorOpened: function isEditorOpened() {\n      return instance.getActiveEditor() ? instance.getActiveEditor().isOpened() : false;\n    },\n    countColsTranslated: function countColsTranslated() {\n      return _this.view.countRenderableColumns();\n    },\n    countRowsTranslated: function countRowsTranslated() {\n      return _this.view.countRenderableRows();\n    },\n    getShortcutManager: function getShortcutManager() {\n      return instance.getShortcutManager();\n    },\n    createCellCoords: function createCellCoords(row, column) {\n      return instance._createCellCoords(row, column);\n    },\n    createCellRange: function createCellRange(highlight, from, to) {\n      return instance._createCellRange(highlight, from, to);\n    },\n    visualToRenderableCoords: visualToRenderableCoords,\n    renderableToVisualCoords: renderableToVisualCoords,\n    isDisabledCellSelection: function isDisabledCellSelection(visualRow, visualColumn) {\n      return instance.getCellMeta(visualRow, visualColumn).disableVisualSelection;\n    }\n  });\n  this.selection = selection;\n  var onIndexMapperCacheUpdate = function onIndexMapperCacheUpdate(_ref) {\n    var hiddenIndexesChanged = _ref.hiddenIndexesChanged;\n    if (hiddenIndexesChanged) {\n      _this.selection.refresh();\n    }\n  };\n  this.columnIndexMapper.addLocalHook('cacheUpdated', onIndexMapperCacheUpdate);\n  this.rowIndexMapper.addLocalHook('cacheUpdated', onIndexMapperCacheUpdate);\n  this.selection.addLocalHook('beforeSetRangeStart', function (cellCoords) {\n    _this.runHooks('beforeSetRangeStart', cellCoords);\n  });\n  this.selection.addLocalHook('beforeSetRangeStartOnly', function (cellCoords) {\n    _this.runHooks('beforeSetRangeStartOnly', cellCoords);\n  });\n  this.selection.addLocalHook('beforeSetRangeEnd', function (cellCoords) {\n    _this.runHooks('beforeSetRangeEnd', cellCoords);\n    if (cellCoords.row < 0) {\n      cellCoords.row = _this.view._wt.wtTable.getFirstVisibleRow();\n    }\n    if (cellCoords.col < 0) {\n      cellCoords.col = _this.view._wt.wtTable.getFirstVisibleColumn();\n    }\n  });\n  this.selection.addLocalHook('afterSetRangeEnd', function (cellCoords) {\n    var preventScrolling = createObjectPropListener(false);\n    var selectionRange = _this.selection.getSelectedRange();\n    var _selectionRange$curre = selectionRange.current(),\n      from = _selectionRange$curre.from,\n      to = _selectionRange$curre.to;\n    var selectionLayerLevel = selectionRange.size() - 1;\n    _this.runHooks('afterSelection', from.row, from.col, to.row, to.col, preventScrolling, selectionLayerLevel);\n    _this.runHooks('afterSelectionByProp', from.row, instance.colToProp(from.col), to.row, instance.colToProp(to.col), preventScrolling, selectionLayerLevel); // eslint-disable-line max-len\n\n    var isSelectedByAnyHeader = _this.selection.isSelectedByAnyHeader();\n    var currentSelectedRange = _this.selection.selectedRange.current();\n    var scrollToCell = true;\n    if (preventScrollingToCell) {\n      scrollToCell = false;\n    }\n    if (preventScrolling.isTouched()) {\n      scrollToCell = !preventScrolling.value;\n    }\n    var isSelectedByRowHeader = _this.selection.isSelectedByRowHeader();\n    var isSelectedByColumnHeader = _this.selection.isSelectedByColumnHeader();\n    if (scrollToCell !== false) {\n      if (!isSelectedByAnyHeader) {\n        if (currentSelectedRange && !_this.selection.isMultiple()) {\n          _this.view.scrollViewport(visualToRenderableCoords(currentSelectedRange.from));\n        } else {\n          _this.view.scrollViewport(visualToRenderableCoords(cellCoords));\n        }\n      } else if (isSelectedByRowHeader) {\n        _this.view.scrollViewportVertically(instance.rowIndexMapper.getRenderableFromVisualIndex(cellCoords.row));\n      } else if (isSelectedByColumnHeader) {\n        _this.view.scrollViewportHorizontally(instance.columnIndexMapper.getRenderableFromVisualIndex(cellCoords.col));\n      }\n    }\n\n    // @TODO: These CSS classes are no longer needed anymore. They are used only as a indicator of the selected\n    // rows/columns in the MergedCells plugin (via border.js#L520 in the walkontable module). After fixing\n    // the Border class this should be removed.\n    if (isSelectedByRowHeader && isSelectedByColumnHeader) {\n      addClass(_this.rootElement, ['ht__selection--rows', 'ht__selection--columns']);\n    } else if (isSelectedByRowHeader) {\n      removeClass(_this.rootElement, 'ht__selection--columns');\n      addClass(_this.rootElement, 'ht__selection--rows');\n    } else if (isSelectedByColumnHeader) {\n      removeClass(_this.rootElement, 'ht__selection--rows');\n      addClass(_this.rootElement, 'ht__selection--columns');\n    } else {\n      removeClass(_this.rootElement, ['ht__selection--rows', 'ht__selection--columns']);\n    }\n    _this._refreshBorders(null);\n  });\n  this.selection.addLocalHook('afterSelectionFinished', function (cellRanges) {\n    var selectionLayerLevel = cellRanges.length - 1;\n    var _cellRanges$selection = cellRanges[selectionLayerLevel],\n      from = _cellRanges$selection.from,\n      to = _cellRanges$selection.to;\n    _this.runHooks('afterSelectionEnd', from.row, from.col, to.row, to.col, selectionLayerLevel);\n    _this.runHooks('afterSelectionEndByProp', from.row, instance.colToProp(from.col), to.row, instance.colToProp(to.col), selectionLayerLevel);\n  });\n  this.selection.addLocalHook('afterIsMultipleSelection', function (isMultiple) {\n    var changedIsMultiple = _this.runHooks('afterIsMultipleSelection', isMultiple.value);\n    if (isMultiple.value) {\n      isMultiple.value = changedIsMultiple;\n    }\n  });\n  this.selection.addLocalHook('beforeModifyTransformStart', function (cellCoordsDelta) {\n    _this.runHooks('modifyTransformStart', cellCoordsDelta);\n  });\n  this.selection.addLocalHook('afterModifyTransformStart', function (coords, rowTransformDir, colTransformDir) {\n    _this.runHooks('afterModifyTransformStart', coords, rowTransformDir, colTransformDir);\n  });\n  this.selection.addLocalHook('beforeModifyTransformEnd', function (cellCoordsDelta) {\n    _this.runHooks('modifyTransformEnd', cellCoordsDelta);\n  });\n  this.selection.addLocalHook('afterModifyTransformEnd', function (coords, rowTransformDir, colTransformDir) {\n    _this.runHooks('afterModifyTransformEnd', coords, rowTransformDir, colTransformDir);\n  });\n  this.selection.addLocalHook('afterDeselect', function () {\n    editorManager.destroyEditor();\n    _this._refreshBorders();\n    removeClass(_this.rootElement, ['ht__selection--rows', 'ht__selection--columns']);\n    _this.runHooks('afterDeselect');\n  });\n  this.selection.addLocalHook('insertRowRequire', function (totalRows) {\n    _this.alter('insert_row_above', totalRows, 1, 'auto');\n  });\n  this.selection.addLocalHook('insertColRequire', function (totalCols) {\n    _this.alter('insert_col_start', totalCols, 1, 'auto');\n  });\n  grid = {\n    /**\n     * Inserts or removes rows and columns.\n     *\n     * @private\n     * @param {string} action Possible values: \"insert_row_above\", \"insert_row_below\", \"insert_col_start\", \"insert_col_end\",\n     *                        \"remove_row\", \"remove_col\".\n     * @param {number|Array} index Row or column visual index which from the alter action will be triggered.\n     *                             Alter actions such as \"remove_row\" and \"remove_col\" support array indexes in the\n     *                             format `[[index, amount], [index, amount]...]` this can be used to remove\n     *                             non-consecutive columns or rows in one call.\n     * @param {number} [amount=1] Amount of rows or columns to remove.\n     * @param {string} [source] Optional. Source of hook runner.\n     * @param {boolean} [keepEmptyRows] Optional. Flag for preventing deletion of empty rows.\n     */\n    alter: function alter(action, index) {\n      var _index, _index2;\n      var amount = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      var source = arguments.length > 3 ? arguments[3] : undefined;\n      var keepEmptyRows = arguments.length > 4 ? arguments[4] : undefined;\n      var normalizeIndexesGroup = function normalizeIndexesGroup(indexes) {\n        if (indexes.length === 0) {\n          return [];\n        }\n        var sortedIndexes = _toConsumableArray(indexes);\n\n        // Sort the indexes in ascending order.\n        sortedIndexes.sort(function (_ref2, _ref3) {\n          var _ref4 = _slicedToArray(_ref2, 1),\n            indexA = _ref4[0];\n          var _ref5 = _slicedToArray(_ref3, 1),\n            indexB = _ref5[0];\n          if (indexA === indexB) {\n            return 0;\n          }\n          return indexA > indexB ? 1 : -1;\n        });\n\n        // Normalize the {index, amount} groups into bigger groups.\n        var normalizedIndexes = arrayReduce(sortedIndexes, function (acc, _ref6) {\n          var _ref7 = _slicedToArray(_ref6, 2),\n            groupIndex = _ref7[0],\n            groupAmount = _ref7[1];\n          var previousItem = acc[acc.length - 1];\n          var _previousItem = _slicedToArray(previousItem, 2),\n            prevIndex = _previousItem[0],\n            prevAmount = _previousItem[1];\n          var prevLastIndex = prevIndex + prevAmount;\n          if (groupIndex <= prevLastIndex) {\n            var amountToAdd = Math.max(groupAmount - (prevLastIndex - groupIndex), 0);\n            previousItem[1] += amountToAdd;\n          } else {\n            acc.push([groupIndex, groupAmount]);\n          }\n          return acc;\n        }, [sortedIndexes[0]]);\n        return normalizedIndexes;\n      };\n\n      /* eslint-disable no-case-declarations */\n      switch (action) {\n        case 'insert_row':\n          // backward compatibility\n          if (!deprecationWarns.has(action)) {\n            deprecationWarns.add(action);\n            warn(toSingleLine(_templateObject || (_templateObject = _taggedTemplateLiteral([\"The `\", \"` action of the `alter()` method is deprecated and will be removed \\n                              in the next major release of Handsontable. Use the `insert_row_above` action instead.\"], [\"The \\\\`\", \"\\\\` action of the \\\\`alter()\\\\` method is deprecated and will be removed\\\\x20\\n                              in the next major release of Handsontable. Use the \\\\`insert_row_above\\\\` action instead.\"])), action));\n          }\n        // falls through\n        case 'insert_row_below':\n        case 'insert_row_above':\n          var numberOfSourceRows = instance.countSourceRows();\n          if (tableMeta.maxRows === numberOfSourceRows) {\n            return;\n          }\n\n          // `above` is the default behavior for creating new rows\n          var insertRowMode = action === 'insert_row_below' ? 'below' : 'above';\n\n          // The line below ensures backward compatibility of the `alter()` method's `insert_row` action.\n          // Calling the `insert_row` action with no arguments adds a new row at the end of the data set.\n          // Calling the `insert_row_above` action adds a new row at the beginning of the data set.\n          // eslint-disable-next-line no-param-reassign\n          index = (_index = index) !== null && _index !== void 0 ? _index : action === 'insert_row' || insertRowMode === 'below' ? numberOfSourceRows : 0;\n          var _datamap$createRow = datamap.createRow(index, amount, {\n              source: source,\n              mode: insertRowMode\n            }),\n            rowDelta = _datamap$createRow.delta,\n            startRowPhysicalIndex = _datamap$createRow.startPhysicalIndex;\n          if (rowDelta) {\n            var currentSelectedRange = selection.selectedRange.current();\n            var currentFromRange = currentSelectedRange === null || currentSelectedRange === void 0 ? void 0 : currentSelectedRange.from;\n            var currentFromRow = currentFromRange === null || currentFromRange === void 0 ? void 0 : currentFromRange.row;\n            var startVisualRowIndex = instance.toVisualRow(startRowPhysicalIndex);\n            if (selection.isSelectedByCorner()) {\n              instance.selectAll();\n            } else if (isDefined(currentFromRow) && currentFromRow >= startVisualRowIndex) {\n              // Moving the selection (if it exists) downward – it should be applied to the \"old\" row.\n              // TODO: The logic here should be handled by selection module.\n              var _currentSelectedRange = currentSelectedRange.to,\n                currentToRow = _currentSelectedRange.row,\n                currentToColumn = _currentSelectedRange.col;\n              var currentFromColumn = currentFromRange.col;\n\n              // Workaround: headers are not stored inside selection.\n              if (selection.isSelectedByRowHeader()) {\n                currentFromColumn = -1;\n              }\n\n              // Remove from the stack the last added selection as that selection below will be\n              // replaced by new transformed selection.\n              selection.getSelectedRange().pop();\n              // I can't use transforms as they don't work in negative indexes.\n              selection.setRangeStartOnly(instance._createCellCoords(currentFromRow + rowDelta, currentFromColumn), true);\n              selection.setRangeEnd(instance._createCellCoords(currentToRow + rowDelta, currentToColumn)); // will call render() internally\n            } else {\n              instance._refreshBorders(); // it will call render and prepare methods\n            }\n          }\n\n          break;\n        case 'insert_col':\n          // backward compatibility\n          if (!deprecationWarns.has(action)) {\n            deprecationWarns.add(action);\n            warn(toSingleLine(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"The `\", \"` action of the `alter()` method is deprecated and will be removed \\n                              in the next major release of Handsontable. Use the `insert_col_start` action instead.\"], [\"The \\\\`\", \"\\\\` action of the \\\\`alter()\\\\` method is deprecated and will be removed\\\\x20\\n                              in the next major release of Handsontable. Use the \\\\`insert_col_start\\\\` action instead.\"])), action));\n          }\n        // falls through\n        case 'insert_col_start':\n        case 'insert_col_end':\n          // \"start\" is a default behavior for creating new columns\n          var insertColumnMode = action === 'insert_col_end' ? 'end' : 'start';\n\n          // The line below ensures backward compatibility of the `alter()` method's `insert_col` action.\n          // Calling the `insert_col` action with no arguments adds a new column to the right of the data set.\n          // Calling the `insert_col_start` action adds a new column to the left of the data set.\n          // eslint-disable-next-line no-param-reassign\n          index = (_index2 = index) !== null && _index2 !== void 0 ? _index2 : action === 'insert_col' || insertColumnMode === 'end' ? instance.countSourceCols() : 0;\n          var _datamap$createCol = datamap.createCol(index, amount, {\n              source: source,\n              mode: insertColumnMode\n            }),\n            colDelta = _datamap$createCol.delta,\n            startColumnPhysicalIndex = _datamap$createCol.startPhysicalIndex;\n          if (colDelta) {\n            if (Array.isArray(tableMeta.colHeaders)) {\n              var spliceArray = [instance.toVisualColumn(startColumnPhysicalIndex), 0];\n              spliceArray.length += colDelta; // inserts empty (undefined) elements at the end of an array\n              Array.prototype.splice.apply(tableMeta.colHeaders, spliceArray); // inserts empty (undefined) elements into the colHeader array\n            }\n\n            var _currentSelectedRange2 = selection.selectedRange.current();\n            var _currentFromRange = _currentSelectedRange2 === null || _currentSelectedRange2 === void 0 ? void 0 : _currentSelectedRange2.from;\n            var _currentFromColumn = _currentFromRange === null || _currentFromRange === void 0 ? void 0 : _currentFromRange.col;\n            var startVisualColumnIndex = instance.toVisualColumn(startColumnPhysicalIndex);\n            if (selection.isSelectedByCorner()) {\n              instance.selectAll();\n            } else if (isDefined(_currentFromColumn) && _currentFromColumn >= startVisualColumnIndex) {\n              // Moving the selection (if it exists) rightward – it should be applied to the \"old\" column.\n              // TODO: The logic here should be handled by selection module.\n              var _currentSelectedRange3 = _currentSelectedRange2.to,\n                _currentToRow = _currentSelectedRange3.row,\n                _currentToColumn = _currentSelectedRange3.col;\n              var _currentFromRow = _currentFromRange.row;\n\n              // Workaround: headers are not stored inside selection.\n              if (selection.isSelectedByColumnHeader()) {\n                _currentFromRow = -1;\n              }\n\n              // Remove from the stack the last added selection as that selection below will be\n              // replaced by new transformed selection.\n              selection.getSelectedRange().pop();\n\n              // I can't use transforms as they don't work in negative indexes.\n              selection.setRangeStartOnly(instance._createCellCoords(_currentFromRow, _currentFromColumn + colDelta), true);\n              selection.setRangeEnd(instance._createCellCoords(_currentToRow, _currentToColumn + colDelta)); // will call render() internally\n            } else {\n              instance._refreshBorders(); // it will call render and prepare methods\n            }\n          }\n\n          break;\n        case 'remove_row':\n          var removeRow = function removeRow(indexes) {\n            var offset = 0;\n\n            // Normalize the {index, amount} groups into bigger groups.\n            arrayEach(indexes, function (_ref8) {\n              var _ref9 = _slicedToArray(_ref8, 2),\n                groupIndex = _ref9[0],\n                groupAmount = _ref9[1];\n              var calcIndex = isEmpty(groupIndex) ? instance.countRows() - 1 : Math.max(groupIndex - offset, 0);\n\n              // If the 'index' is an integer decrease it by 'offset' otherwise pass it through to make the value\n              // compatible with datamap.removeCol method.\n              if (Number.isInteger(groupIndex)) {\n                // eslint-disable-next-line no-param-reassign\n                groupIndex = Math.max(groupIndex - offset, 0);\n              }\n\n              // TODO: for datamap.removeRow index should be passed as it is (with undefined and null values). If not, the logic\n              // inside the datamap.removeRow breaks the removing functionality.\n              var wasRemoved = datamap.removeRow(groupIndex, groupAmount, source);\n              if (!wasRemoved) {\n                return;\n              }\n              var totalRows = instance.countRows();\n              var fixedRowsTop = tableMeta.fixedRowsTop;\n              if (fixedRowsTop >= calcIndex + 1) {\n                tableMeta.fixedRowsTop -= Math.min(groupAmount, fixedRowsTop - calcIndex);\n              }\n              var fixedRowsBottom = tableMeta.fixedRowsBottom;\n              if (fixedRowsBottom && calcIndex >= totalRows - fixedRowsBottom) {\n                tableMeta.fixedRowsBottom -= Math.min(groupAmount, fixedRowsBottom);\n              }\n              offset += groupAmount;\n            });\n          };\n          if (Array.isArray(index)) {\n            removeRow(normalizeIndexesGroup(index));\n          } else {\n            removeRow([[index, amount]]);\n          }\n          grid.adjustRowsAndCols();\n          instance._refreshBorders(); // it will call render and prepare methods\n          break;\n        case 'remove_col':\n          var removeCol = function removeCol(indexes) {\n            var offset = 0;\n\n            // Normalize the {index, amount} groups into bigger groups.\n            arrayEach(indexes, function (_ref10) {\n              var _ref11 = _slicedToArray(_ref10, 2),\n                groupIndex = _ref11[0],\n                groupAmount = _ref11[1];\n              var calcIndex = isEmpty(groupIndex) ? instance.countCols() - 1 : Math.max(groupIndex - offset, 0);\n              var physicalColumnIndex = instance.toPhysicalColumn(calcIndex);\n\n              // If the 'index' is an integer decrease it by 'offset' otherwise pass it through to make the value\n              // compatible with datamap.removeCol method.\n              if (Number.isInteger(groupIndex)) {\n                // eslint-disable-next-line no-param-reassign\n                groupIndex = Math.max(groupIndex - offset, 0);\n              }\n\n              // TODO: for datamap.removeCol index should be passed as it is (with undefined and null values). If not, the logic\n              // inside the datamap.removeCol breaks the removing functionality.\n              var wasRemoved = datamap.removeCol(groupIndex, groupAmount, source);\n              if (!wasRemoved) {\n                return;\n              }\n              var fixedColumnsStart = tableMeta.fixedColumnsStart;\n              if (fixedColumnsStart >= calcIndex + 1) {\n                tableMeta.fixedColumnsStart -= Math.min(groupAmount, fixedColumnsStart - calcIndex);\n              }\n              if (Array.isArray(tableMeta.colHeaders)) {\n                if (typeof physicalColumnIndex === 'undefined') {\n                  physicalColumnIndex = -1;\n                }\n                tableMeta.colHeaders.splice(physicalColumnIndex, groupAmount);\n              }\n              offset += groupAmount;\n            });\n          };\n          if (Array.isArray(index)) {\n            removeCol(normalizeIndexesGroup(index));\n          } else {\n            removeCol([[index, amount]]);\n          }\n          grid.adjustRowsAndCols();\n          instance._refreshBorders(); // it will call render and prepare methods\n\n          break;\n        default:\n          throw new Error(\"There is no such action \\\"\".concat(action, \"\\\"\"));\n      }\n      if (!keepEmptyRows) {\n        grid.adjustRowsAndCols(); // makes sure that we did not add rows that will be removed in next refresh\n      }\n    },\n    /**\n     * Makes sure there are empty rows at the bottom of the table.\n     *\n     * @private\n     */\n    adjustRowsAndCols: function adjustRowsAndCols() {\n      var minRows = tableMeta.minRows;\n      var minSpareRows = tableMeta.minSpareRows;\n      var minCols = tableMeta.minCols;\n      var minSpareCols = tableMeta.minSpareCols;\n      if (instance.countRows() === 0 && instance.countCols() === 0) {\n        selection.deselect();\n      }\n      if (minRows) {\n        // should I add empty rows to data source to meet minRows?\n        var nrOfRows = instance.countRows();\n        if (nrOfRows < minRows) {\n          // The synchronization with cell meta is not desired here. For `minRows` option,\n          // we don't want to touch/shift cell meta objects.\n          datamap.createRow(nrOfRows, minRows - nrOfRows, {\n            source: 'auto'\n          });\n        }\n      }\n      if (minSpareRows) {\n        var emptyRows = instance.countEmptyRows(true);\n\n        // should I add empty rows to meet minSpareRows?\n        if (emptyRows < minSpareRows) {\n          var emptyRowsMissing = minSpareRows - emptyRows;\n          var rowsToCreate = Math.min(emptyRowsMissing, tableMeta.maxRows - instance.countSourceRows());\n\n          // The synchronization with cell meta is not desired here. For `minSpareRows` option,\n          // we don't want to touch/shift cell meta objects.\n          datamap.createRow(instance.countRows(), rowsToCreate, {\n            source: 'auto'\n          });\n        }\n      }\n      {\n        var emptyCols;\n\n        // count currently empty cols\n        if (minCols || minSpareCols) {\n          emptyCols = instance.countEmptyCols(true);\n        }\n        var nrOfColumns = instance.countCols();\n\n        // should I add empty cols to meet minCols?\n        if (minCols && !tableMeta.columns && nrOfColumns < minCols) {\n          // The synchronization with cell meta is not desired here. For `minSpareRows` option,\n          // we don't want to touch/shift cell meta objects.\n          var colsToCreate = minCols - nrOfColumns;\n          emptyCols += colsToCreate;\n          datamap.createCol(nrOfColumns, colsToCreate, {\n            source: 'auto'\n          });\n        }\n        // should I add empty cols to meet minSpareCols?\n        if (minSpareCols && !tableMeta.columns && instance.dataType === 'array' && emptyCols < minSpareCols) {\n          nrOfColumns = instance.countCols();\n          var emptyColsMissing = minSpareCols - emptyCols;\n          var _colsToCreate = Math.min(emptyColsMissing, tableMeta.maxCols - nrOfColumns);\n\n          // The synchronization with cell meta is not desired here. For `minSpareRows` option,\n          // we don't want to touch/shift cell meta objects.\n          datamap.createCol(nrOfColumns, _colsToCreate, {\n            source: 'auto'\n          });\n        }\n      }\n      if (selection.isSelected()) {\n        var rowCount = instance.countRows();\n        var colCount = instance.countCols();\n        arrayEach(selection.selectedRange, function (range) {\n          var selectionChanged = false;\n          var fromRow = range.from.row;\n          var fromCol = range.from.col;\n          var toRow = range.to.row;\n          var toCol = range.to.col;\n\n          // if selection is outside, move selection to last row\n          if (fromRow > rowCount - 1) {\n            fromRow = rowCount - 1;\n            selectionChanged = true;\n            if (toRow > fromRow) {\n              toRow = fromRow;\n            }\n          } else if (toRow > rowCount - 1) {\n            toRow = rowCount - 1;\n            selectionChanged = true;\n            if (fromRow > toRow) {\n              fromRow = toRow;\n            }\n          }\n          // if selection is outside, move selection to last row\n          if (fromCol > colCount - 1) {\n            fromCol = colCount - 1;\n            selectionChanged = true;\n            if (toCol > fromCol) {\n              toCol = fromCol;\n            }\n          } else if (toCol > colCount - 1) {\n            toCol = colCount - 1;\n            selectionChanged = true;\n            if (fromCol > toCol) {\n              fromCol = toCol;\n            }\n          }\n          if (selectionChanged) {\n            instance.selectCell(fromRow, fromCol, toRow, toCol);\n          }\n        });\n      }\n      if (instance.view) {\n        instance.view.adjustElementsSize();\n      }\n    },\n    /**\n     * Populate the data from the provided 2d array from the given cell coordinates.\n     *\n     * @private\n     * @param {object} start Start selection position. Visual indexes.\n     * @param {Array} input 2d data array.\n     * @param {object} [end] End selection position (only for drag-down mode). Visual indexes.\n     * @param {string} [source=\"populateFromArray\"] Source information string.\n     * @param {string} [method=\"overwrite\"] Populate method. Possible options: `shift_down`, `shift_right`, `overwrite`.\n     * @param {string} direction (left|right|up|down) String specifying the direction.\n     * @param {Array} deltas The deltas array. A difference between values of adjacent cells.\n     *                       Useful **only** when the type of handled cells is `numeric`.\n     * @returns {object|undefined} Ending td in pasted area (only if any cell was changed).\n     */\n    populateFromArray: function populateFromArray(start, input, end, source, method, direction, deltas) {\n      // TODO: either remove or implement the `direction` argument. Currently it's not working at all.\n      var r;\n      var rlen;\n      var c;\n      var clen;\n      var setData = [];\n      var current = {};\n      var newDataByColumns = [];\n      var startRow = start.row;\n      var startColumn = start.col;\n      rlen = input.length;\n      if (rlen === 0) {\n        return false;\n      }\n      var columnsPopulationEnd = 0;\n      var rowsPopulationEnd = 0;\n      if (isObject(end)) {\n        columnsPopulationEnd = end.col - startColumn + 1;\n        rowsPopulationEnd = end.row - startRow + 1;\n      }\n\n      // insert data with specified pasteMode method\n      switch (method) {\n        case 'shift_down':\n          // translate data from a list of rows to a list of columns\n          var populatedDataByColumns = pivot(input);\n          var numberOfDataColumns = populatedDataByColumns.length;\n          // method's argument can extend the range of data population (data would be repeated)\n          var numberOfColumnsToPopulate = Math.max(numberOfDataColumns, columnsPopulationEnd);\n          var pushedDownDataByRows = instance.getData().slice(startRow);\n\n          // translate data from a list of rows to a list of columns\n          var pushedDownDataByColumns = pivot(pushedDownDataByRows).slice(startColumn, startColumn + numberOfColumnsToPopulate);\n          for (c = 0; c < numberOfColumnsToPopulate; c += 1) {\n            if (c < numberOfDataColumns) {\n              for (r = 0, rlen = populatedDataByColumns[c].length; r < rowsPopulationEnd - rlen; r += 1) {\n                // repeating data for rows\n                populatedDataByColumns[c].push(populatedDataByColumns[c][r % rlen]);\n              }\n              if (c < pushedDownDataByColumns.length) {\n                newDataByColumns.push(populatedDataByColumns[c].concat(pushedDownDataByColumns[c]));\n              } else {\n                // if before data population, there was no data in the column\n                // we fill the required rows' newly-created cells with `null` values\n                newDataByColumns.push(populatedDataByColumns[c].concat(new Array(pushedDownDataByRows.length).fill(null)));\n              }\n            } else {\n              // Repeating data for columns.\n              newDataByColumns.push(populatedDataByColumns[c % numberOfDataColumns].concat(pushedDownDataByColumns[c]));\n            }\n          }\n          instance.populateFromArray(startRow, startColumn, pivot(newDataByColumns));\n          break;\n        case 'shift_right':\n          var numberOfDataRows = input.length;\n          // method's argument can extend the range of data population (data would be repeated)\n          var numberOfRowsToPopulate = Math.max(numberOfDataRows, rowsPopulationEnd);\n          var pushedRightDataByRows = instance.getData().slice(startRow).map(function (rowData) {\n            return rowData.slice(startColumn);\n          });\n          for (r = 0; r < numberOfRowsToPopulate; r += 1) {\n            if (r < numberOfDataRows) {\n              for (c = 0, clen = input[r].length; c < columnsPopulationEnd - clen; c += 1) {\n                // repeating data for rows\n                input[r].push(input[r][c % clen]);\n              }\n              if (r < pushedRightDataByRows.length) {\n                for (var i = 0; i < pushedRightDataByRows[r].length; i += 1) {\n                  input[r].push(pushedRightDataByRows[r][i]);\n                }\n              } else {\n                var _input$r;\n                // if before data population, there was no data in the row\n                // we fill the required columns' newly-created cells with `null` values\n                (_input$r = input[r]).push.apply(_input$r, _toConsumableArray(new Array(pushedRightDataByRows[0].length).fill(null)));\n              }\n            } else {\n              // Repeating data for columns.\n              input.push(input[r % rlen].slice(0, numberOfRowsToPopulate).concat(pushedRightDataByRows[r]));\n            }\n          }\n          instance.populateFromArray(startRow, startColumn, input);\n          break;\n        case 'overwrite':\n        default:\n          // overwrite and other not specified options\n          current.row = start.row;\n          current.col = start.col;\n          var selected = {\n            // selected range\n            row: end && start ? end.row - start.row + 1 : 1,\n            col: end && start ? end.col - start.col + 1 : 1\n          };\n          var skippedRow = 0;\n          var skippedColumn = 0;\n          var pushData = true;\n          var cellMeta;\n          var getInputValue = function getInputValue(row) {\n            var col = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n            var rowValue = input[row % input.length];\n            if (col !== null) {\n              return rowValue[col % rowValue.length];\n            }\n            return rowValue;\n          };\n          var rowInputLength = input.length;\n          var rowSelectionLength = end ? end.row - start.row + 1 : 0;\n          if (end) {\n            rlen = rowSelectionLength;\n          } else {\n            rlen = Math.max(rowInputLength, rowSelectionLength);\n          }\n          for (r = 0; r < rlen; r++) {\n            if (end && current.row > end.row && rowSelectionLength > rowInputLength || !tableMeta.allowInsertRow && current.row > instance.countRows() - 1 || current.row >= tableMeta.maxRows) {\n              break;\n            }\n            var visualRow = r - skippedRow;\n            var colInputLength = getInputValue(visualRow).length;\n            var colSelectionLength = end ? end.col - start.col + 1 : 0;\n            if (end) {\n              clen = colSelectionLength;\n            } else {\n              clen = Math.max(colInputLength, colSelectionLength);\n            }\n            current.col = start.col;\n            cellMeta = instance.getCellMeta(current.row, current.col);\n            if ((source === 'CopyPaste.paste' || source === 'Autofill.fill') && cellMeta.skipRowOnPaste) {\n              skippedRow += 1;\n              current.row += 1;\n              rlen += 1;\n              /* eslint-disable no-continue */\n              continue;\n            }\n            skippedColumn = 0;\n            for (c = 0; c < clen; c++) {\n              if (end && current.col > end.col && colSelectionLength > colInputLength || !tableMeta.allowInsertColumn && current.col > instance.countCols() - 1 || current.col >= tableMeta.maxCols) {\n                break;\n              }\n              cellMeta = instance.getCellMeta(current.row, current.col);\n              if ((source === 'CopyPaste.paste' || source === 'Autofill.fill') && cellMeta.skipColumnOnPaste) {\n                skippedColumn += 1;\n                current.col += 1;\n                clen += 1;\n                continue;\n              }\n              if (cellMeta.readOnly && source !== 'UndoRedo.undo') {\n                current.col += 1;\n                /* eslint-disable no-continue */\n                continue;\n              }\n              var visualColumn = c - skippedColumn;\n              var value = getInputValue(visualRow, visualColumn);\n              var orgValue = instance.getDataAtCell(current.row, current.col);\n              var index = {\n                row: visualRow,\n                col: visualColumn\n              };\n              if (source === 'Autofill.fill') {\n                var result = instance.runHooks('beforeAutofillInsidePopulate', index, direction, input, deltas, {}, selected);\n                if (result) {\n                  value = isUndefined(result.value) ? value : result.value;\n                }\n              }\n              if (value !== null && _typeof(value) === 'object') {\n                // when 'value' is array and 'orgValue' is null, set 'orgValue' to\n                // an empty array so that the null value can be compared to 'value'\n                // as an empty value for the array context\n                if (Array.isArray(value) && orgValue === null) orgValue = [];\n                if (orgValue === null || _typeof(orgValue) !== 'object') {\n                  pushData = false;\n                } else {\n                  var orgValueSchema = duckSchema(Array.isArray(orgValue) ? orgValue : orgValue[0] || orgValue);\n                  var valueSchema = duckSchema(Array.isArray(value) ? value : value[0] || value);\n\n                  // Allow overwriting values with the same object-based schema or any array-based schema.\n                  if (isObjectEqual(orgValueSchema, valueSchema) || Array.isArray(orgValueSchema) && Array.isArray(valueSchema)) {\n                    value = deepClone(value);\n                  } else {\n                    pushData = false;\n                  }\n                }\n              } else if (orgValue !== null && _typeof(orgValue) === 'object') {\n                pushData = false;\n              }\n              if (pushData) {\n                setData.push([current.row, current.col, value]);\n              }\n              pushData = true;\n              current.col += 1;\n            }\n            current.row += 1;\n          }\n          instance.setDataAtCell(setData, null, null, source || 'populateFromArray');\n          break;\n      }\n    }\n  };\n\n  /**\n   * Internal function to set `language` key of settings.\n   *\n   * @private\n   * @param {string} languageCode Language code for specific language i.e. 'en-US', 'pt-BR', 'de-DE'.\n   * @fires Hooks#afterLanguageChange\n   */\n  function setLanguage(languageCode) {\n    var normalizedLanguageCode = normalizeLanguageCode(languageCode);\n    if (hasLanguageDictionary(normalizedLanguageCode)) {\n      instance.runHooks('beforeLanguageChange', normalizedLanguageCode);\n      globalMeta.language = normalizedLanguageCode;\n      instance.runHooks('afterLanguageChange', normalizedLanguageCode);\n    } else {\n      warnUserAboutLanguageRegistration(languageCode);\n    }\n  }\n\n  /**\n   * Internal function to set `className` or `tableClassName`, depending on the key from the settings object.\n   *\n   * @private\n   * @param {string} className `className` or `tableClassName` from the key in the settings object.\n   * @param {string|string[]} classSettings String or array of strings. Contains class name(s) from settings object.\n   */\n  function setClassName(className, classSettings) {\n    var element = className === 'className' ? instance.rootElement : instance.table;\n    if (firstRun) {\n      addClass(element, classSettings);\n    } else {\n      var globalMetaSettingsArray = [];\n      var settingsArray = [];\n      if (globalMeta[className]) {\n        globalMetaSettingsArray = Array.isArray(globalMeta[className]) ? globalMeta[className] : stringToArray(globalMeta[className]);\n      }\n      if (classSettings) {\n        settingsArray = Array.isArray(classSettings) ? classSettings : stringToArray(classSettings);\n      }\n      var classNameToRemove = getDifferenceOfArrays(globalMetaSettingsArray, settingsArray);\n      var classNameToAdd = getDifferenceOfArrays(settingsArray, globalMetaSettingsArray);\n      if (classNameToRemove.length) {\n        removeClass(element, classNameToRemove);\n      }\n      if (classNameToAdd.length) {\n        addClass(element, classNameToAdd);\n      }\n    }\n    globalMeta[className] = classSettings;\n  }\n  this.init = function () {\n    dataSource.setData(tableMeta.data);\n    instance.runHooks('beforeInit');\n    if (isMobileBrowser() || isIpadOS()) {\n      addClass(instance.rootElement, 'mobile');\n    }\n    this.updateSettings(tableMeta, true);\n    this.view = new TableView(this);\n    editorManager = EditorManager.getInstance(instance, tableMeta, selection);\n    instance.runHooks('init');\n    this.forceFullRender = true; // used when data was changed\n    this.view.render();\n\n    // Run the logic only if it's the table's initialization and the root element is not visible.\n    if (!!firstRun && instance.rootElement.offsetParent === null) {\n      observeVisibilityChangeOnce(instance.rootElement, function () {\n        // Update the spreader size cache before rendering.\n        instance.view._wt.wtOverlays.updateLastSpreaderSize();\n        instance.render();\n        instance.view.adjustElementsSize();\n      });\n    }\n    if (_typeof(firstRun) === 'object') {\n      instance.runHooks('afterChange', firstRun[0], firstRun[1]);\n      firstRun = false;\n    }\n    instance.runHooks('afterInit');\n  };\n\n  /**\n   * @ignore\n   * @returns {object}\n   */\n  function ValidatorsQueue() {\n    // moved this one level up so it can be used in any function here. Probably this should be moved to a separate file\n    var resolved = false;\n    return {\n      validatorsInQueue: 0,\n      valid: true,\n      addValidatorToQueue: function addValidatorToQueue() {\n        this.validatorsInQueue += 1;\n        resolved = false;\n      },\n      removeValidatorFormQueue: function removeValidatorFormQueue() {\n        this.validatorsInQueue = this.validatorsInQueue - 1 < 0 ? 0 : this.validatorsInQueue - 1;\n        this.checkIfQueueIsEmpty();\n      },\n      onQueueEmpty: function onQueueEmpty() {},\n      checkIfQueueIsEmpty: function checkIfQueueIsEmpty() {\n        if (this.validatorsInQueue === 0 && resolved === false) {\n          resolved = true;\n          this.onQueueEmpty(this.valid);\n        }\n      }\n    };\n  }\n\n  /**\n   * Get parsed number from numeric string.\n   *\n   * @private\n   * @param {string} numericData Float (separated by a dot or a comma) or integer.\n   * @returns {number} Number if we get data in parsable format, not changed value otherwise.\n   */\n  function getParsedNumber(numericData) {\n    // Unifying \"float like\" string. Change from value with comma determiner to value with dot determiner,\n    // for example from `450,65` to `450.65`.\n    var unifiedNumericData = numericData.replace(',', '.');\n    if (isNaN(parseFloat(unifiedNumericData)) === false) {\n      return parseFloat(unifiedNumericData);\n    }\n    return numericData;\n  }\n\n  /**\n   * @ignore\n   * @param {Array} changes The 2D array containing information about each of the edited cells.\n   * @param {string} source The string that identifies source of validation.\n   * @param {Function} callback The callback function fot async validation.\n   */\n  function validateChanges(changes, source, callback) {\n    if (!changes.length) {\n      return;\n    }\n    var activeEditor = instance.getActiveEditor();\n    var beforeChangeResult = instance.runHooks('beforeChange', changes, source || 'edit');\n    var shouldBeCanceled = true;\n    if (beforeChangeResult === false) {\n      if (activeEditor) {\n        activeEditor.cancelChanges();\n      }\n      return;\n    }\n    var waitingForValidator = new ValidatorsQueue();\n    waitingForValidator.onQueueEmpty = function (isValid) {\n      if (activeEditor && shouldBeCanceled) {\n        activeEditor.cancelChanges();\n      }\n      callback(isValid); // called when async validators are resolved and beforeChange was not async\n    };\n\n    for (var i = changes.length - 1; i >= 0; i--) {\n      if (changes[i] === null) {\n        changes.splice(i, 1);\n      } else {\n        var _changes$i = _slicedToArray(changes[i], 4),\n          row = _changes$i[0],\n          prop = _changes$i[1],\n          newValue = _changes$i[3];\n        var col = datamap.propToCol(prop);\n        var cellProperties = instance.getCellMeta(row, col);\n        if (cellProperties.type === 'numeric' && typeof newValue === 'string' && isNumericLike(newValue)) {\n          changes[i][3] = getParsedNumber(newValue);\n        }\n\n        /* eslint-disable no-loop-func */\n        if (instance.getCellValidator(cellProperties)) {\n          waitingForValidator.addValidatorToQueue();\n          instance.validateCell(changes[i][3], cellProperties, function (index, cellPropertiesReference) {\n            return function (result) {\n              if (typeof result !== 'boolean') {\n                throw new Error('Validation error: result is not boolean');\n              }\n              if (result === false && cellPropertiesReference.allowInvalid === false) {\n                shouldBeCanceled = false;\n                changes.splice(index, 1); // cancel the change\n                cellPropertiesReference.valid = true; // we cancelled the change, so cell value is still valid\n\n                var cell = instance.getCell(cellPropertiesReference.visualRow, cellPropertiesReference.visualCol);\n                if (cell !== null) {\n                  removeClass(cell, tableMeta.invalidCellClassName);\n                }\n                // index -= 1;\n              }\n\n              waitingForValidator.removeValidatorFormQueue();\n            };\n          }(i, cellProperties), source);\n        }\n      }\n    }\n    waitingForValidator.checkIfQueueIsEmpty();\n  }\n\n  /**\n   * Internal function to apply changes. Called after validateChanges.\n   *\n   * @private\n   * @param {Array} changes Array in form of [row, prop, oldValue, newValue].\n   * @param {string} source String that identifies how this change will be described in changes array (useful in onChange callback).\n   * @fires Hooks#beforeChangeRender\n   * @fires Hooks#afterChange\n   */\n  function applyChanges(changes, source) {\n    var i = changes.length - 1;\n    if (i < 0) {\n      return;\n    }\n    for (; i >= 0; i--) {\n      var skipThisChange = false;\n      if (changes[i] === null) {\n        changes.splice(i, 1);\n        /* eslint-disable no-continue */\n        continue;\n      }\n      if ((changes[i][2] === null || changes[i][2] === void 0) && (changes[i][3] === null || changes[i][3] === void 0)) {\n        /* eslint-disable no-continue */\n        continue;\n      }\n      if (tableMeta.allowInsertRow) {\n        while (changes[i][0] > instance.countRows() - 1) {\n          var _datamap$createRow2 = datamap.createRow(void 0, void 0, {\n              source: source\n            }),\n            numberOfCreatedRows = _datamap$createRow2.delta;\n          if (numberOfCreatedRows === 0) {\n            skipThisChange = true;\n            break;\n          }\n        }\n      }\n      if (instance.dataType === 'array' && (!tableMeta.columns || tableMeta.columns.length === 0) && tableMeta.allowInsertColumn) {\n        while (datamap.propToCol(changes[i][1]) > instance.countCols() - 1) {\n          var _datamap$createCol2 = datamap.createCol(void 0, void 0, {\n              source: source\n            }),\n            numberOfCreatedColumns = _datamap$createCol2.delta;\n          if (numberOfCreatedColumns === 0) {\n            skipThisChange = true;\n            break;\n          }\n        }\n      }\n      if (skipThisChange) {\n        /* eslint-disable no-continue */\n        continue;\n      }\n      datamap.set(changes[i][0], changes[i][1], changes[i][3]);\n    }\n    instance.forceFullRender = true; // used when data was changed\n    grid.adjustRowsAndCols();\n    instance.runHooks('beforeChangeRender', changes, source);\n    editorManager.lockEditor();\n    instance._refreshBorders(null);\n    editorManager.unlockEditor();\n    instance.view.adjustElementsSize();\n    instance.runHooks('afterChange', changes, source || 'edit');\n    var activeEditor = instance.getActiveEditor();\n    if (activeEditor && isDefined(activeEditor.refreshValue)) {\n      activeEditor.refreshValue();\n    }\n  }\n\n  /**\n   * Creates and returns the CellCoords object.\n   *\n   * @private\n   * @memberof Core#\n   * @function _createCellCoords\n   * @param {number} row The row index.\n   * @param {number} column The column index.\n   * @returns {CellCoords}\n   */\n  this._createCellCoords = function (row, column) {\n    return instance.view._wt.createCellCoords(row, column);\n  };\n\n  /**\n   * Creates and returns the CellRange object.\n   *\n   * @private\n   * @memberof Core#\n   * @function _createCellRange\n   * @param {CellCoords} highlight Defines the border around a cell where selection was started and to edit the cell\n   *                               when you press Enter. The highlight cannot point to headers (negative values).\n   * @param {CellCoords} from Initial coordinates.\n   * @param {CellCoords} to Final coordinates.\n   * @returns {CellRange}\n   */\n  this._createCellRange = function (highlight, from, to) {\n    return instance.view._wt.createCellRange(highlight, from, to);\n  };\n\n  /**\n   * Validate a single cell.\n   *\n   * @memberof Core#\n   * @function validateCell\n   * @param {string|number} value The value to validate.\n   * @param {object} cellProperties The cell meta which corresponds with the value.\n   * @param {Function} callback The callback function.\n   * @param {string} source The string that identifies source of the validation.\n   */\n  this.validateCell = function (value, cellProperties, callback, source) {\n    var validator = instance.getCellValidator(cellProperties);\n\n    // the `canBeValidated = false` argument suggests, that the cell passes validation by default.\n    /**\n     * @private\n     * @function done\n     * @param {boolean} valid Indicates if the validation was successful.\n     * @param {boolean} [canBeValidated=true] Flag which controls the validation process.\n     */\n    function done(valid) {\n      var canBeValidated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      // Fixes GH#3903\n      if (!canBeValidated || cellProperties.hidden === true) {\n        callback(valid);\n        return;\n      }\n      var col = cellProperties.visualCol;\n      var row = cellProperties.visualRow;\n      var td = instance.getCell(row, col, true);\n      if (td && td.nodeName !== 'TH') {\n        var renderableRow = instance.rowIndexMapper.getRenderableFromVisualIndex(row);\n        var renderableColumn = instance.columnIndexMapper.getRenderableFromVisualIndex(col);\n        instance.view._wt.getSetting('cellRenderer', renderableRow, renderableColumn, td);\n      }\n      callback(valid);\n    }\n    if (isRegExp(validator)) {\n      validator = function (expression) {\n        return function (cellValue, validatorCallback) {\n          validatorCallback(expression.test(cellValue));\n        };\n      }(validator);\n    }\n    if (isFunction(validator)) {\n      // eslint-disable-next-line no-param-reassign\n      value = instance.runHooks('beforeValidate', value, cellProperties.visualRow, cellProperties.prop, source);\n\n      // To provide consistent behaviour, validation should be always asynchronous\n      instance._registerImmediate(function () {\n        validator.call(cellProperties, value, function (valid) {\n          if (!instance) {\n            return;\n          }\n          // eslint-disable-next-line no-param-reassign\n          valid = instance.runHooks('afterValidate', valid, value, cellProperties.visualRow, cellProperties.prop, source);\n          cellProperties.valid = valid;\n          done(valid);\n          instance.runHooks('postAfterValidate', valid, value, cellProperties.visualRow, cellProperties.prop, source);\n        });\n      });\n    } else {\n      // resolve callback even if validator function was not found\n      instance._registerImmediate(function () {\n        cellProperties.valid = true;\n        done(cellProperties.valid, false);\n      });\n    }\n  };\n\n  /**\n   * @ignore\n   * @param {number} row The visual row index.\n   * @param {string|number} propOrCol The visual prop or column index.\n   * @param {*} value The cell value.\n   * @returns {Array}\n   */\n  function setDataInputToArray(row, propOrCol, value) {\n    if (Array.isArray(row)) {\n      // it's an array of changes\n      return row;\n    }\n    return [[row, propOrCol, value]];\n  }\n\n  /**\n   * @description\n   * Set new value to a cell. To change many cells at once (recommended way), pass an array of `changes` in format\n   * `[[row, col, value],...]` as the first argument.\n   *\n   * @memberof Core#\n   * @function setDataAtCell\n   * @param {number|Array} row Visual row index or array of changes in format `[[row, col, value],...]`.\n   * @param {number} [column] Visual column index.\n   * @param {string} [value] New value.\n   * @param {string} [source] String that identifies how this change will be described in the changes array (useful in afterChange or beforeChange callback). Set to 'edit' if left empty.\n   */\n  this.setDataAtCell = function (row, column, value, source) {\n    var input = setDataInputToArray(row, column, value);\n    var changes = [];\n    var changeSource = source;\n    var i;\n    var ilen;\n    var prop;\n    for (i = 0, ilen = input.length; i < ilen; i++) {\n      if (_typeof(input[i]) !== 'object') {\n        throw new Error('Method `setDataAtCell` accepts row number or changes array of arrays as its first parameter');\n      }\n      if (typeof input[i][1] !== 'number') {\n        throw new Error('Method `setDataAtCell` accepts row and column number as its parameters. If you want to use object property name, use method `setDataAtRowProp`'); // eslint-disable-line max-len\n      }\n\n      if (input[i][1] >= this.countCols()) {\n        prop = input[i][1];\n      } else {\n        prop = datamap.colToProp(input[i][1]);\n      }\n      changes.push([input[i][0], prop, dataSource.getAtCell(this.toPhysicalRow(input[i][0]), input[i][1]), input[i][2]]);\n    }\n    if (!changeSource && _typeof(row) === 'object') {\n      changeSource = column;\n    }\n    instance.runHooks('afterSetDataAtCell', changes, changeSource);\n    validateChanges(changes, changeSource, function () {\n      applyChanges(changes, changeSource);\n    });\n  };\n\n  /**\n   * @description\n   * Set new value to a cell. To change many cells at once (recommended way), pass an array of `changes` in format\n   * `[[row, prop, value],...]` as the first argument.\n   *\n   * @memberof Core#\n   * @function setDataAtRowProp\n   * @param {number|Array} row Visual row index or array of changes in format `[[row, prop, value], ...]`.\n   * @param {string} prop Property name or the source string (e.g. `'first.name'` or `'0'`).\n   * @param {string} value Value to be set.\n   * @param {string} [source] String that identifies how this change will be described in changes array (useful in onChange callback).\n   */\n  this.setDataAtRowProp = function (row, prop, value, source) {\n    var input = setDataInputToArray(row, prop, value);\n    var changes = [];\n    var changeSource = source;\n    var i;\n    var ilen;\n    for (i = 0, ilen = input.length; i < ilen; i++) {\n      changes.push([input[i][0], input[i][1], dataSource.getAtCell(this.toPhysicalRow(input[i][0]), input[i][1]), input[i][2]]);\n    }\n    if (!changeSource && _typeof(row) === 'object') {\n      changeSource = prop;\n    }\n    instance.runHooks('afterSetDataAtRowProp', changes, changeSource);\n    validateChanges(changes, changeSource, function () {\n      applyChanges(changes, changeSource);\n    });\n  };\n\n  /**\n   * Listen to the keyboard input on document body. This allows Handsontable to capture keyboard events and respond\n   * in the right way.\n   *\n   * @memberof Core#\n   * @function listen\n   * @fires Hooks#afterListen\n   */\n  this.listen = function () {\n    if (instance && !instance.isListening()) {\n      activeGuid = instance.guid;\n      instance.runHooks('afterListen');\n    }\n  };\n\n  /**\n   * Stop listening to keyboard input on the document body. Calling this method makes the Handsontable inactive for\n   * any keyboard events.\n   *\n   * @memberof Core#\n   * @function unlisten\n   */\n  this.unlisten = function () {\n    if (this.isListening()) {\n      activeGuid = null;\n      instance.runHooks('afterUnlisten');\n    }\n  };\n\n  /**\n   * Returns `true` if the current Handsontable instance is listening to keyboard input on document body.\n   *\n   * @memberof Core#\n   * @function isListening\n   * @returns {boolean} `true` if the instance is listening, `false` otherwise.\n   */\n  this.isListening = function () {\n    return activeGuid === instance.guid;\n  };\n\n  /**\n   * Destroys the current editor, render the table and prepares the editor of the newly selected cell.\n   *\n   * @memberof Core#\n   * @function destroyEditor\n   * @param {boolean} [revertOriginal=false] If `true`, the previous value will be restored. Otherwise, the edited value will be saved.\n   * @param {boolean} [prepareEditorIfNeeded=true] If `true` the editor under the selected cell will be prepared to open.\n   */\n  this.destroyEditor = function () {\n    var revertOriginal = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var prepareEditorIfNeeded = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    instance._refreshBorders(revertOriginal, prepareEditorIfNeeded);\n  };\n\n  /**\n   * Populates cells at position with 2D input array (e.g. `[[1, 2], [3, 4]]`). Use `endRow`, `endCol` when you\n   * want to cut input when a certain row is reached.\n   *\n   * The `populateFromArray()` method can't change [`readOnly`](@/api/options.md#readonly) cells.\n   *\n   * Optional `method` argument has the same effect as pasteMode option (see {@link Options#pasteMode}).\n   *\n   * @memberof Core#\n   * @function populateFromArray\n   * @param {number} row Start visual row index.\n   * @param {number} column Start visual column index.\n   * @param {Array} input 2d array.\n   * @param {number} [endRow] End visual row index (use when you want to cut input when certain row is reached).\n   * @param {number} [endCol] End visual column index (use when you want to cut input when certain column is reached).\n   * @param {string} [source=populateFromArray] Used to identify this call in the resulting events (beforeChange, afterChange).\n   * @param {string} [method=overwrite] Populate method, possible values: `'shift_down'`, `'shift_right'`, `'overwrite'`.\n   * @param {string} direction Populate direction, possible values: `'left'`, `'right'`, `'up'`, `'down'`.\n   * @param {Array} deltas The deltas array. A difference between values of adjacent cells.\n   *                       Useful **only** when the type of handled cells is `numeric`.\n   * @returns {object|undefined} Ending td in pasted area (only if any cell was changed).\n   */\n  this.populateFromArray = function (row, column, input, endRow, endCol, source, method, direction, deltas) {\n    if (!(_typeof(input) === 'object' && _typeof(input[0]) === 'object')) {\n      throw new Error('populateFromArray parameter `input` must be an array of arrays'); // API changed in 0.9-beta2, let's check if you use it correctly\n    }\n\n    var c = typeof endRow === 'number' ? instance._createCellCoords(endRow, endCol) : null;\n    return grid.populateFromArray(instance._createCellCoords(row, column), input, c, source, method, direction, deltas);\n  };\n\n  /**\n   * Adds/removes data from the column. This method works the same as Array.splice for arrays.\n   *\n   * @memberof Core#\n   * @function spliceCol\n   * @param {number} column Index of the column in which do you want to do splice.\n   * @param {number} index Index at which to start changing the array. If negative, will begin that many elements from the end.\n   * @param {number} amount An integer indicating the number of old array elements to remove. If amount is 0, no elements are removed.\n   * @param {...number} [elements] The elements to add to the array. If you don't specify any elements, spliceCol simply removes elements from the array.\n   * @returns {Array} Returns removed portion of columns.\n   */\n  this.spliceCol = function (column, index, amount) {\n    var _datamap;\n    for (var _len = arguments.length, elements = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n      elements[_key - 3] = arguments[_key];\n    }\n    return (_datamap = datamap).spliceCol.apply(_datamap, [column, index, amount].concat(elements));\n  };\n\n  /**\n   * Adds/removes data from the row. This method works the same as Array.splice for arrays.\n   *\n   * @memberof Core#\n   * @function spliceRow\n   * @param {number} row Index of column in which do you want to do splice.\n   * @param {number} index Index at which to start changing the array. If negative, will begin that many elements from the end.\n   * @param {number} amount An integer indicating the number of old array elements to remove. If amount is 0, no elements are removed.\n   * @param {...number} [elements] The elements to add to the array. If you don't specify any elements, spliceCol simply removes elements from the array.\n   * @returns {Array} Returns removed portion of rows.\n   */\n  this.spliceRow = function (row, index, amount) {\n    var _datamap2;\n    for (var _len2 = arguments.length, elements = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {\n      elements[_key2 - 3] = arguments[_key2];\n    }\n    return (_datamap2 = datamap).spliceRow.apply(_datamap2, [row, index, amount].concat(elements));\n  };\n\n  /**\n   * Returns indexes of the currently selected cells as an array of arrays `[[startRow, startCol, endRow, endCol],...]`.\n   *\n   * Start row and start column are the coordinates of the active cell (where the selection was started).\n   *\n   * The version 0.36.0 adds a non-consecutive selection feature. Since this version, the method returns an array of arrays.\n   * Additionally to collect the coordinates of the currently selected area (as it was previously done by the method)\n   * you need to use `getSelectedLast` method.\n   *\n   * @memberof Core#\n   * @function getSelected\n   * @returns {Array[]|undefined} An array of arrays of the selection's coordinates.\n   */\n  this.getSelected = function () {\n    // https://github.com/handsontable/handsontable/issues/44  //cjl\n    if (selection.isSelected()) {\n      return arrayMap(selection.getSelectedRange(), function (_ref12) {\n        var from = _ref12.from,\n          to = _ref12.to;\n        return [from.row, from.col, to.row, to.col];\n      });\n    }\n  };\n\n  /**\n   * Returns the last coordinates applied to the table as a an array `[startRow, startCol, endRow, endCol]`.\n   *\n   * @since 0.36.0\n   * @memberof Core#\n   * @function getSelectedLast\n   * @returns {Array|undefined} An array of the selection's coordinates.\n   */\n  this.getSelectedLast = function () {\n    var selected = this.getSelected();\n    var result;\n    if (selected && selected.length > 0) {\n      result = selected[selected.length - 1];\n    }\n    return result;\n  };\n\n  /**\n   * Returns the current selection as an array of CellRange objects.\n   *\n   * The version 0.36.0 adds a non-consecutive selection feature. Since this version, the method returns an array of arrays.\n   * Additionally to collect the coordinates of the currently selected area (as it was previously done by the method)\n   * you need to use `getSelectedRangeLast` method.\n   *\n   * @memberof Core#\n   * @function getSelectedRange\n   * @returns {CellRange[]|undefined} Selected range object or undefined if there is no selection.\n   */\n  this.getSelectedRange = function () {\n    // https://github.com/handsontable/handsontable/issues/44  //cjl\n    if (selection.isSelected()) {\n      return Array.from(selection.getSelectedRange());\n    }\n  };\n\n  /**\n   * Returns the last coordinates applied to the table as a CellRange object.\n   *\n   * @memberof Core#\n   * @function getSelectedRangeLast\n   * @since 0.36.0\n   * @returns {CellRange|undefined} Selected range object or undefined` if there is no selection.\n   */\n  this.getSelectedRangeLast = function () {\n    var selectedRange = this.getSelectedRange();\n    var result;\n    if (selectedRange && selectedRange.length > 0) {\n      result = selectedRange[selectedRange.length - 1];\n    }\n    return result;\n  };\n\n  /**\n   * Erases content from cells that have been selected in the table.\n   *\n   * @memberof Core#\n   * @function emptySelectedCells\n   * @param {string} [source] String that identifies how this change will be described in the changes array (useful in afterChange or beforeChange callback). Set to 'edit' if left empty.\n   * @since 0.36.0\n   */\n  this.emptySelectedCells = function (source) {\n    var _this2 = this;\n    if (!selection.isSelected() || this.countRows() === 0 || this.countCols() === 0) {\n      return;\n    }\n    var changes = [];\n    arrayEach(selection.getSelectedRange(), function (cellRange) {\n      var topStart = cellRange.getTopStartCorner();\n      var bottomEnd = cellRange.getBottomEndCorner();\n      rangeEach(topStart.row, bottomEnd.row, function (row) {\n        rangeEach(topStart.col, bottomEnd.col, function (column) {\n          if (!_this2.getCellMeta(row, column).readOnly) {\n            changes.push([row, column, null]);\n          }\n        });\n      });\n    });\n    if (changes.length > 0) {\n      this.setDataAtCell(changes, source);\n    }\n  };\n\n  /**\n   * Checks if the table rendering process was suspended. See explanation in {@link Core#suspendRender}.\n   *\n   * @memberof Core#\n   * @function isRenderSuspended\n   * @since 8.3.0\n   * @returns {boolean}\n   */\n  this.isRenderSuspended = function () {\n    return this.renderSuspendedCounter > 0;\n  };\n\n  /**\n   * Suspends the rendering process. It's helpful to wrap the table render\n   * cycles triggered by API calls or UI actions (or both) and call the \"render\"\n   * once in the end. As a result, it improves the performance of wrapped operations.\n   * When the table is in the suspend state, most operations will have no visual\n   * effect until the rendering state is resumed. Resuming the state automatically\n   * invokes the table rendering. To make sure that after executing all operations,\n   * the table will be rendered, it's highly recommended to use the {@link Core#batchRender}\n   * method or {@link Core#batch}, which additionally aggregates the logic execution\n   * that happens behind the table.\n   *\n   * The method is intended to be used by advanced users. Suspending the rendering\n   * process could cause visual glitches when wrongly implemented.\n   *\n   * Every [`suspendRender()`](@/api/core.md#suspendrender) call needs to correspond with one [`resumeRender()`](@/api/core.md#resumerender) call.\n   * For example, if you call [`suspendRender()`](@/api/core.md#suspendrender) 5 times, you need to call [`resumeRender()`](@/api/core.md#resumerender) 5 times as well.\n   *\n   * @memberof Core#\n   * @function suspendRender\n   * @since 8.3.0\n   * @example\n   * ```js\n   * hot.suspendRender();\n   * hot.alter('insert_row_above', 5, 45);\n   * hot.alter('insert_col_start', 10, 40);\n   * hot.setDataAtCell(1, 1, 'John');\n   * hot.setDataAtCell(2, 2, 'Mark');\n   * hot.setDataAtCell(3, 3, 'Ann');\n   * hot.setDataAtCell(4, 4, 'Sophia');\n   * hot.setDataAtCell(5, 5, 'Mia');\n   * hot.selectCell(0, 0);\n   * hot.resumeRender(); // It re-renders the table internally\n   * ```\n   */\n  this.suspendRender = function () {\n    this.renderSuspendedCounter += 1;\n  };\n\n  /**\n   * Resumes the rendering process. In combination with the {@link Core#suspendRender}\n   * method it allows aggregating the table render cycles triggered by API calls or UI\n   * actions (or both) and calls the \"render\" once in the end. When the table is in\n   * the suspend state, most operations will have no visual effect until the rendering\n   * state is resumed. Resuming the state automatically invokes the table rendering.\n   *\n   * The method is intended to be used by advanced users. Suspending the rendering\n   * process could cause visual glitches when wrongly implemented.\n   *\n   * Every [`suspendRender()`](@/api/core.md#suspendrender) call needs to correspond with one [`resumeRender()`](@/api/core.md#resumerender) call.\n   * For example, if you call [`suspendRender()`](@/api/core.md#suspendrender) 5 times, you need to call [`resumeRender()`](@/api/core.md#resumerender) 5 times as well.\n   *\n   * @memberof Core#\n   * @function resumeRender\n   * @since 8.3.0\n   * @example\n   * ```js\n   * hot.suspendRender();\n   * hot.alter('insert_row_above', 5, 45);\n   * hot.alter('insert_col_start', 10, 40);\n   * hot.setDataAtCell(1, 1, 'John');\n   * hot.setDataAtCell(2, 2, 'Mark');\n   * hot.setDataAtCell(3, 3, 'Ann');\n   * hot.setDataAtCell(4, 4, 'Sophia');\n   * hot.setDataAtCell(5, 5, 'Mia');\n   * hot.selectCell(0, 0);\n   * hot.resumeRender(); // It re-renders the table internally\n   * ```\n   */\n  this.resumeRender = function () {\n    var nextValue = this.renderSuspendedCounter - 1;\n    this.renderSuspendedCounter = Math.max(nextValue, 0);\n    if (!this.isRenderSuspended() && nextValue === this.renderSuspendedCounter) {\n      if (this.renderCall) {\n        this.render();\n      } else {\n        this._refreshBorders(null);\n      }\n    }\n  };\n\n  /**\n   * Rerender the table. Calling this method starts the process of recalculating, redrawing and applying the changes\n   * to the DOM. While rendering the table all cell renderers are recalled.\n   *\n   * Calling this method manually is not recommended. Handsontable tries to render itself by choosing the most\n   * optimal moments in its lifecycle.\n   *\n   * @memberof Core#\n   * @function render\n   */\n  this.render = function () {\n    if (this.view) {\n      this.renderCall = true;\n      this.forceFullRender = true; // used when data was changed\n\n      if (!this.isRenderSuspended()) {\n        editorManager.lockEditor();\n        this._refreshBorders(null);\n        editorManager.unlockEditor();\n      }\n    }\n  };\n\n  /**\n   * The method aggregates multi-line API calls into a callback and postpones the\n   * table rendering process. After the execution of the operations, the table is\n   * rendered once. As a result, it improves the performance of wrapped operations.\n   * Without batching, a similar case could trigger multiple table render calls.\n   *\n   * @memberof Core#\n   * @function batchRender\n   * @param {Function} wrappedOperations Batched operations wrapped in a function.\n   * @returns {*} Returns result from the wrappedOperations callback.\n   * @since 8.3.0\n   * @example\n   * ```js\n   * hot.batchRender(() => {\n   *   hot.alter('insert_row_above', 5, 45);\n   *   hot.alter('insert_col_start', 10, 40);\n   *   hot.setDataAtCell(1, 1, 'John');\n   *   hot.setDataAtCell(2, 2, 'Mark');\n   *   hot.setDataAtCell(3, 3, 'Ann');\n   *   hot.setDataAtCell(4, 4, 'Sophia');\n   *   hot.setDataAtCell(5, 5, 'Mia');\n   *   hot.selectCell(0, 0);\n   *   // The table will be rendered once after executing the callback\n   * });\n   * ```\n   */\n  this.batchRender = function (wrappedOperations) {\n    this.suspendRender();\n    var result = wrappedOperations();\n    this.resumeRender();\n    return result;\n  };\n\n  /**\n   * Checks if the table indexes recalculation process was suspended. See explanation\n   * in {@link Core#suspendExecution}.\n   *\n   * @memberof Core#\n   * @function isExecutionSuspended\n   * @since 8.3.0\n   * @returns {boolean}\n   */\n  this.isExecutionSuspended = function () {\n    return this.executionSuspendedCounter > 0;\n  };\n\n  /**\n   * Suspends the execution process. It's helpful to wrap the table logic changes\n   * such as index changes into one call after which the cache is updated. As a result,\n   * it improves the performance of wrapped operations.\n   *\n   * The method is intended to be used by advanced users. Suspending the execution\n   * process could cause visual glitches caused by not updated the internal table cache.\n   *\n   * @memberof Core#\n   * @function suspendExecution\n   * @since 8.3.0\n   * @example\n   * ```js\n   * hot.suspendExecution();\n   * const filters = hot.getPlugin('filters');\n   *\n   * filters.addCondition(2, 'contains', ['3']);\n   * filters.filter();\n   * hot.getPlugin('columnSorting').sort({ column: 1, sortOrder: 'desc' });\n   * hot.resumeExecution(); // It updates the cache internally\n   * ```\n   */\n  this.suspendExecution = function () {\n    this.executionSuspendedCounter += 1;\n    this.columnIndexMapper.suspendOperations();\n    this.rowIndexMapper.suspendOperations();\n  };\n\n  /**\n   * Resumes the execution process. In combination with the {@link Core#suspendExecution}\n   * method it allows aggregating the table logic changes after which the cache is\n   * updated. Resuming the state automatically invokes the table cache updating process.\n   *\n   * The method is intended to be used by advanced users. Suspending the execution\n   * process could cause visual glitches caused by not updated the internal table cache.\n   *\n   * @memberof Core#\n   * @function resumeExecution\n   * @param {boolean} [forceFlushChanges=false] If `true`, the table internal data cache\n   * is recalculated after the execution of the batched operations. For nested\n   * {@link Core#batchExecution} calls, it can be desire to recalculate the table\n   * after each batch.\n   * @since 8.3.0\n   * @example\n   * ```js\n   * hot.suspendExecution();\n   * const filters = hot.getPlugin('filters');\n   *\n   * filters.addCondition(2, 'contains', ['3']);\n   * filters.filter();\n   * hot.getPlugin('columnSorting').sort({ column: 1, sortOrder: 'desc' });\n   * hot.resumeExecution(); // It updates the cache internally\n   * ```\n   */\n  this.resumeExecution = function () {\n    var forceFlushChanges = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var nextValue = this.executionSuspendedCounter - 1;\n    this.executionSuspendedCounter = Math.max(nextValue, 0);\n    if (!this.isExecutionSuspended() && nextValue === this.executionSuspendedCounter || forceFlushChanges) {\n      this.columnIndexMapper.resumeOperations();\n      this.rowIndexMapper.resumeOperations();\n    }\n  };\n\n  /**\n   * The method aggregates multi-line API calls into a callback and postpones the\n   * table execution process. After the execution of the operations, the internal table\n   * cache is recalculated once. As a result, it improves the performance of wrapped\n   * operations. Without batching, a similar case could trigger multiple table cache rebuilds.\n   *\n   * @memberof Core#\n   * @function batchExecution\n   * @param {Function} wrappedOperations Batched operations wrapped in a function.\n   * @param {boolean} [forceFlushChanges=false] If `true`, the table internal data cache\n   * is recalculated after the execution of the batched operations. For nested calls,\n   * it can be a desire to recalculate the table after each batch.\n   * @returns {*} Returns result from the wrappedOperations callback.\n   * @since 8.3.0\n   * @example\n   * ```js\n   * hot.batchExecution(() => {\n   *   const filters = hot.getPlugin('filters');\n   *\n   *   filters.addCondition(2, 'contains', ['3']);\n   *   filters.filter();\n   *   hot.getPlugin('columnSorting').sort({ column: 1, sortOrder: 'desc' });\n   *   // The table cache will be recalculated once after executing the callback\n   * });\n   * ```\n   */\n  this.batchExecution = function (wrappedOperations) {\n    var forceFlushChanges = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    this.suspendExecution();\n    var result = wrappedOperations();\n    this.resumeExecution(forceFlushChanges);\n    return result;\n  };\n\n  /**\n   * It batches the rendering process and index recalculations. The method aggregates\n   * multi-line API calls into a callback and postpones the table rendering process\n   * as well aggregates the table logic changes such as index changes into one call\n   * after which the cache is updated. After the execution of the operations, the\n   * table is rendered, and the cache is updated once. As a result, it improves the\n   * performance of wrapped operations.\n   *\n   * @memberof Core#\n   * @function batch\n   * @param {Function} wrappedOperations Batched operations wrapped in a function.\n   * @returns {*} Returns result from the wrappedOperations callback.\n   * @since 8.3.0\n   * @example\n   * ```js\n   * hot.batch(() => {\n   *   hot.alter('insert_row_above', 5, 45);\n   *   hot.alter('insert_col_start', 10, 40);\n   *   hot.setDataAtCell(1, 1, 'x');\n   *   hot.setDataAtCell(2, 2, 'c');\n   *   hot.setDataAtCell(3, 3, 'v');\n   *   hot.setDataAtCell(4, 4, 'b');\n   *   hot.setDataAtCell(5, 5, 'n');\n   *   hot.selectCell(0, 0);\n   *\n   *   const filters = hot.getPlugin('filters');\n   *\n   *   filters.addCondition(2, 'contains', ['3']);\n   *   filters.filter();\n   *   hot.getPlugin('columnSorting').sort({ column: 1, sortOrder: 'desc' });\n   *   // The table will be re-rendered and cache will be recalculated once after executing the callback\n   * });\n   * ```\n   */\n  this.batch = function (wrappedOperations) {\n    this.suspendRender();\n    this.suspendExecution();\n    var result = wrappedOperations();\n    this.resumeExecution();\n    this.resumeRender();\n    return result;\n  };\n\n  /**\n   * Updates dimensions of the table. The method compares previous dimensions with the current ones and updates accordingly.\n   *\n   * @memberof Core#\n   * @function refreshDimensions\n   * @fires Hooks#beforeRefreshDimensions\n   * @fires Hooks#afterRefreshDimensions\n   */\n  this.refreshDimensions = function () {\n    if (!instance.view) {\n      return;\n    }\n    var _instance$view$getLas = instance.view.getLastSize(),\n      lastWidth = _instance$view$getLas.width,\n      lastHeight = _instance$view$getLas.height;\n    var _instance$rootElement = instance.rootElement.getBoundingClientRect(),\n      width = _instance$rootElement.width,\n      height = _instance$rootElement.height;\n    var isSizeChanged = width !== lastWidth || height !== lastHeight;\n    var isResizeBlocked = instance.runHooks('beforeRefreshDimensions', {\n      width: lastWidth,\n      height: lastHeight\n    }, {\n      width: width,\n      height: height\n    }, isSizeChanged) === false;\n    if (isResizeBlocked) {\n      return;\n    }\n    if (isSizeChanged || instance.view._wt.wtOverlays.scrollableElement === instance.rootWindow) {\n      instance.view.setLastSize(width, height);\n      instance.render();\n    }\n    instance.runHooks('afterRefreshDimensions', {\n      width: lastWidth,\n      height: lastHeight\n    }, {\n      width: width,\n      height: height\n    }, isSizeChanged);\n  };\n\n  /**\n   * The `updateData()` method replaces Handsontable's [`data`](@/api/options.md#data) with a new dataset.\n   *\n   * The `updateData()` method:\n   * - Keeps cells' states (e.g. cells' [formatting](@/guides/cell-features/formatting-cells.md) and cells' [`readOnly`](@/api/options.md#readonly) states)\n   * - Keeps rows' states (e.g. row order)\n   * - Keeps columns' states (e.g. column order)\n   *\n   * To replace Handsontable's [`data`](@/api/options.md#data) and reset states, use the [`loadData()`](#loaddata) method.\n   *\n   * Read more:\n   * - [Binding to data](@/guides/getting-started/binding-to-data.md)\n   * - [Saving data](@/guides/getting-started/saving-data.md)\n   *\n   * @memberof Core#\n   * @function updateData\n   * @since 11.1.0\n   * @param {Array} data An [array of arrays](@/guides/getting-started/binding-to-data.md#array-of-arrays), or an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects), that contains Handsontable's data\n   * @param {string} [source] The source of the `updateData()` call\n   * @fires Hooks#beforeUpdateData\n   * @fires Hooks#afterUpdateData\n   * @fires Hooks#afterChange\n   */\n  this.updateData = function (data, source) {\n    var _this3 = this;\n    replaceData(data, function (newDataMap) {\n      datamap = newDataMap;\n    }, function (newDataMap) {\n      datamap = newDataMap;\n      instance.columnIndexMapper.fitToLength(_this3.getInitialColumnCount());\n      instance.rowIndexMapper.fitToLength(_this3.countSourceRows());\n      grid.adjustRowsAndCols();\n    }, {\n      hotInstance: instance,\n      dataMap: datamap,\n      dataSource: dataSource,\n      internalSource: 'updateData',\n      source: source,\n      metaManager: metaManager,\n      firstRun: firstRun\n    });\n  };\n\n  /**\n   * The `loadData()` method replaces Handsontable's [`data`](@/api/options.md#data) with a new dataset.\n   *\n   * Additionally, the `loadData()` method:\n   * - Resets cells' states (e.g. cells' [formatting](@/guides/cell-features/formatting-cells.md) and cells' [`readOnly`](@/api/options.md#readonly) states)\n   * - Resets rows' states (e.g. row order)\n   * - Resets columns' states (e.g. column order)\n   *\n   * To replace Handsontable's [`data`](@/api/options.md#data) without resetting states, use the [`updateData()`](#updatedata) method.\n   *\n   * Read more:\n   * - [Binding to data](@/guides/getting-started/binding-to-data.md)\n   * - [Saving data](@/guides/getting-started/saving-data.md)\n   *\n   * @memberof Core#\n   * @function loadData\n   * @param {Array} data An [array of arrays](@/guides/getting-started/binding-to-data.md#array-of-arrays), or an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects), that contains Handsontable's data\n   * @param {string} [source] The source of the `loadData()` call\n   * @fires Hooks#beforeLoadData\n   * @fires Hooks#afterLoadData\n   * @fires Hooks#afterChange\n   */\n  this.loadData = function (data, source) {\n    replaceData(data, function (newDataMap) {\n      datamap = newDataMap;\n    }, function () {\n      metaManager.clearCellsCache();\n      instance.initIndexMappers();\n      grid.adjustRowsAndCols();\n      if (firstRun) {\n        firstRun = [null, 'loadData'];\n      }\n    }, {\n      hotInstance: instance,\n      dataMap: datamap,\n      dataSource: dataSource,\n      internalSource: 'loadData',\n      source: source,\n      metaManager: metaManager,\n      firstRun: firstRun\n    });\n  };\n\n  /**\n   * Gets the initial column count, calculated based on the `columns` setting.\n   *\n   * @private\n   * @returns {number} The calculated number of columns.\n   */\n  this.getInitialColumnCount = function () {\n    var columnsSettings = tableMeta.columns;\n    var finalNrOfColumns = 0;\n\n    // We will check number of columns when the `columns` property was defined as an array. Columns option may\n    // narrow down or expand displayed dataset in that case.\n    if (Array.isArray(columnsSettings)) {\n      finalNrOfColumns = columnsSettings.length;\n    } else if (isFunction(columnsSettings)) {\n      if (instance.dataType === 'array') {\n        var nrOfSourceColumns = this.countSourceCols();\n        for (var columnIndex = 0; columnIndex < nrOfSourceColumns; columnIndex += 1) {\n          if (columnsSettings(columnIndex)) {\n            finalNrOfColumns += 1;\n          }\n        }\n\n        // Extended dataset by the `columns` property? Moved code right from the refactored `countCols` method.\n      } else if (instance.dataType === 'object' || instance.dataType === 'function') {\n        finalNrOfColumns = datamap.colToPropCache.length;\n      }\n\n      // In some cases we need to check columns length from the schema, i.e. `data` may be empty.\n    } else if (isDefined(tableMeta.dataSchema)) {\n      var schema = datamap.getSchema();\n\n      // Schema may be defined as an array of objects. Each object will define column.\n      finalNrOfColumns = Array.isArray(schema) ? schema.length : deepObjectSize(schema);\n    } else {\n      // We init index mappers by length of source data to provide indexes also for skipped indexes.\n      finalNrOfColumns = this.countSourceCols();\n    }\n    return finalNrOfColumns;\n  };\n\n  /**\n   * Init index mapper which manage indexes assigned to the data.\n   *\n   * @private\n   */\n  this.initIndexMappers = function () {\n    this.columnIndexMapper.initToLength(this.getInitialColumnCount());\n    this.rowIndexMapper.initToLength(this.countSourceRows());\n  };\n\n  /**\n   * Returns the current data object (the same one that was passed by `data` configuration option or `loadData` method,\n   * unless some modifications have been applied (i.e. Sequence of rows/columns was changed, some row/column was skipped).\n   * If that's the case - use the {@link Core#getSourceData} method.).\n   *\n   * Optionally you can provide cell range by defining `row`, `column`, `row2`, `column2` to get only a fragment of table data.\n   *\n   * @memberof Core#\n   * @function getData\n   * @param {number} [row] From visual row index.\n   * @param {number} [column] From visual column index.\n   * @param {number} [row2] To visual row index.\n   * @param {number} [column2] To visual column index.\n   * @returns {Array[]} Array with the data.\n   * @example\n   * ```js\n   * // Get all data (in order how it is rendered in the table).\n   * hot.getData();\n   * // Get data fragment (from top-left 0, 0 to bottom-right 3, 3).\n   * hot.getData(3, 3);\n   * // Get data fragment (from top-left 2, 1 to bottom-right 3, 3).\n   * hot.getData(2, 1, 3, 3);\n   * ```\n   */\n  this.getData = function (row, column, row2, column2) {\n    if (isUndefined(row)) {\n      return datamap.getAll();\n    }\n    return datamap.getRange(instance._createCellCoords(row, column), instance._createCellCoords(row2, column2), datamap.DESTINATION_RENDERER);\n  };\n\n  /**\n   * Returns a string value of the selected range. Each column is separated by tab, each row is separated by a new\n   * line character.\n   *\n   * @memberof Core#\n   * @function getCopyableText\n   * @param {number} startRow From visual row index.\n   * @param {number} startCol From visual column index.\n   * @param {number} endRow To visual row index.\n   * @param {number} endCol To visual column index.\n   * @returns {string}\n   */\n  this.getCopyableText = function (startRow, startCol, endRow, endCol) {\n    return datamap.getCopyableText(instance._createCellCoords(startRow, startCol), instance._createCellCoords(endRow, endCol));\n  };\n\n  /**\n   * Returns the data's copyable value at specified `row` and `column` index.\n   *\n   * @memberof Core#\n   * @function getCopyableData\n   * @param {number} row Visual row index.\n   * @param {number} column Visual column index.\n   * @returns {string}\n   */\n  this.getCopyableData = function (row, column) {\n    return datamap.getCopyable(row, datamap.colToProp(column));\n  };\n\n  /**\n   * Returns schema provided by constructor settings. If it doesn't exist then it returns the schema based on the data\n   * structure in the first row.\n   *\n   * @memberof Core#\n   * @function getSchema\n   * @returns {object} Schema object.\n   */\n  this.getSchema = function () {\n    return datamap.getSchema();\n  };\n\n  /**\n   * Use it if you need to change configuration after initialization. The `settings` argument is an object containing the changed\n   * settings, declared the same way as in the initial settings object.\n   *\n   * __Note__, that although the `updateSettings` method doesn't overwrite the previously declared settings, it might reset\n   * the settings made post-initialization. (for example - ignore changes made using the columnResize feature).\n   *\n   * Since 8.0.0 passing `columns` or `data` inside `settings` objects will result in resetting states corresponding to rows and columns\n   * (for example, row/column sequence, column width, row height, frozen columns etc.).\n   *\n   * Since 12.0.0 passing `data` inside `settings` objects no longer results in resetting states corresponding to rows and columns\n   * (for example, row/column sequence, column width, row height, frozen columns etc.).\n   *\n   * @memberof Core#\n   * @function updateSettings\n   * @param {object} settings A settings object (see {@link Options}). Only provide the settings that are changed, not the whole settings object that was used for initialization.\n   * @param {boolean} [init=false] Internally used for in initialization mode.\n   * @example\n   * ```js\n   * hot.updateSettings({\n   *    contextMenu: true,\n   *    colHeaders: true,\n   *    fixedRowsTop: 2\n   * });\n   * ```\n   * @fires Hooks#afterCellMetaReset\n   * @fires Hooks#afterUpdateSettings\n   */\n  this.updateSettings = function (settings) {\n    var init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var dataUpdateFunction = (firstRun ? instance.loadData : instance.updateData).bind(this);\n    var columnsAsFunc = false;\n    var i;\n    var j;\n    if (isDefined(settings.rows)) {\n      throw new Error('The \"rows\" setting is no longer supported. Do you mean startRows, minRows or maxRows?');\n    }\n    if (isDefined(settings.cols)) {\n      throw new Error('The \"cols\" setting is no longer supported. Do you mean startCols, minCols or maxCols?');\n    }\n    if (isDefined(settings.ganttChart)) {\n      throw new Error('Since 8.0.0 the \"ganttChart\" setting is no longer supported.');\n    }\n\n    // eslint-disable-next-line no-restricted-syntax\n    for (i in settings) {\n      if (i === 'data') {\n        // Do nothing. loadData will be triggered later\n      } else if (i === 'language') {\n        setLanguage(settings.language);\n      } else if (i === 'className') {\n        setClassName('className', settings.className);\n      } else if (i === 'tableClassName' && instance.table) {\n        setClassName('tableClassName', settings.tableClassName);\n        instance.view._wt.wtOverlays.syncOverlayTableClassNames();\n      } else if (Hooks.getSingleton().isRegistered(i) || Hooks.getSingleton().isDeprecated(i)) {\n        if (isFunction(settings[i]) || Array.isArray(settings[i])) {\n          settings[i].initialHook = true;\n          instance.addHook(i, settings[i]);\n        }\n      } else if (!init && hasOwnProperty(settings, i)) {\n        // Update settings\n        globalMeta[i] = settings[i];\n      }\n    }\n\n    // Load data or create data map\n    if (settings.data === void 0 && tableMeta.data === void 0) {\n      dataUpdateFunction(null, 'updateSettings'); // data source created just now\n    } else if (settings.data !== void 0) {\n      dataUpdateFunction(settings.data, 'updateSettings'); // data source given as option\n    } else if (settings.columns !== void 0) {\n      datamap.createMap();\n\n      // The `column` property has changed - dataset may be expanded or narrowed down. The `loadData` do the same.\n      instance.initIndexMappers();\n    }\n    var clen = instance.countCols();\n    var columnSetting = tableMeta.columns;\n\n    // Init columns constructors configuration\n    if (columnSetting && isFunction(columnSetting)) {\n      columnsAsFunc = true;\n    }\n\n    // Clear cell meta cache\n    if (settings.cell !== void 0 || settings.cells !== void 0 || settings.columns !== void 0) {\n      metaManager.clearCache();\n    }\n    if (clen > 0) {\n      for (i = 0, j = 0; i < clen; i++) {\n        // Use settings provided by user\n        if (columnSetting) {\n          var column = columnsAsFunc ? columnSetting(i) : columnSetting[j];\n          if (column) {\n            metaManager.updateColumnMeta(j, column);\n          }\n        }\n        j += 1;\n      }\n    }\n    if (isDefined(settings.cell)) {\n      objectEach(settings.cell, function (cell) {\n        instance.setCellMetaObject(cell.row, cell.col, cell);\n      });\n    }\n    instance.runHooks('afterCellMetaReset');\n    var currentHeight = instance.rootElement.style.height;\n    if (currentHeight !== '') {\n      currentHeight = parseInt(instance.rootElement.style.height, 10);\n    }\n    var height = settings.height;\n    if (isFunction(height)) {\n      height = height();\n    }\n    if (init) {\n      var initialStyle = instance.rootElement.getAttribute('style');\n      if (initialStyle) {\n        instance.rootElement.setAttribute('data-initialstyle', instance.rootElement.getAttribute('style'));\n      }\n    }\n    if (height === null) {\n      var _initialStyle = instance.rootElement.getAttribute('data-initialstyle');\n      if (_initialStyle && (_initialStyle.indexOf('height') > -1 || _initialStyle.indexOf('overflow') > -1)) {\n        instance.rootElement.setAttribute('style', _initialStyle);\n      } else {\n        instance.rootElement.style.height = '';\n        instance.rootElement.style.overflow = '';\n      }\n    } else if (height !== void 0) {\n      instance.rootElement.style.height = isNaN(height) ? \"\".concat(height) : \"\".concat(height, \"px\");\n      instance.rootElement.style.overflow = 'hidden';\n    }\n    if (typeof settings.width !== 'undefined') {\n      var width = settings.width;\n      if (isFunction(width)) {\n        width = width();\n      }\n      instance.rootElement.style.width = isNaN(width) ? \"\".concat(width) : \"\".concat(width, \"px\");\n    }\n    if (!init) {\n      if (instance.view) {\n        instance.view._wt.wtViewport.resetHasOversizedColumnHeadersMarked();\n        instance.view._wt.exportSettingsAsClassNames();\n      }\n      instance.runHooks('afterUpdateSettings', settings);\n    }\n    grid.adjustRowsAndCols();\n    if (instance.view && !firstRun) {\n      instance.forceFullRender = true; // used when data was changed\n      editorManager.lockEditor();\n      instance._refreshBorders(null);\n      instance.view._wt.wtOverlays.adjustElementsSize();\n      editorManager.unlockEditor();\n    }\n    if (!init && instance.view && (currentHeight === '' || height === '' || height === void 0) && currentHeight !== height) {\n      instance.view._wt.wtOverlays.updateMainScrollableElements();\n    }\n  };\n\n  /**\n   * Get value from the selected cell.\n   *\n   * @memberof Core#\n   * @function getValue\n   * @returns {*} Value of selected cell.\n   */\n  this.getValue = function () {\n    var sel = instance.getSelectedLast();\n    if (tableMeta.getValue) {\n      if (isFunction(tableMeta.getValue)) {\n        return tableMeta.getValue.call(instance);\n      } else if (sel) {\n        return instance.getData()[sel[0][0]][tableMeta.getValue];\n      }\n    } else if (sel) {\n      return instance.getDataAtCell(sel[0], sel[1]);\n    }\n  };\n\n  /**\n   * Returns the object settings.\n   *\n   * @memberof Core#\n   * @function getSettings\n   * @returns {TableMeta} Object containing the current table settings.\n   */\n  this.getSettings = function () {\n    return tableMeta;\n  };\n\n  /**\n   * Clears the data from the table (the table settings remain intact).\n   *\n   * @memberof Core#\n   * @function clear\n   */\n  this.clear = function () {\n    this.selectAll();\n    this.emptySelectedCells();\n  };\n\n  /**\n   * The `alter()` method lets you alter the grid's structure\n   * by adding or removing rows and columns at specified positions.\n   *\n   * ::: tip\n   * The `alter()` method works only when your [`data`](@/api/options.md#data)\n   * is an [array of arrays](@/guides/getting-started/binding-to-data.md#array-of-arrays).\n   * :::\n   *\n   * ```js\n   * // above row 10 (by visual index), insert 1 new row\n   * hot.alter('insert_row_above', 10);\n   * ```\n   *\n   *  | Action               | With `index` | Without `index` |\n   *  | -------------------- | ------------ | --------------- |\n   *  | `'insert_row_above'` | Inserts rows above the `index` row. | Inserts rows above the first row. |\n   *  | `'insert_row_below'` | Inserts rows below the `index` row. | Inserts rows below the last row. |\n   *  | `'remove_row'`       | Removes rows, starting from the `index` row. | Removes rows, starting from the last row. |\n   *  | `'insert_col_start'` | Inserts columns before the `index` column. | Inserts columns before the first column. |\n   *  | `'insert_col_end'`   | Inserts columns after the `index` column. | Inserts columns after the last column. |\n   *  | `'remove_col'`       | Removes columns, starting from the `index` column. | Removes columns, starting from the last column. |\n   *  | `'insert_row'` (<b>Deprecated</b>) |  Inserts rows above the `index` row. | Inserts rows below the last row. |\n   *  | `'insert_col'` (<b>Deprecated</b>) |  Inserts columns before the `index` column. | Inserts columns after the last column. |\n   *\n   * The behavior of `'insert_col_start'`, `'insert_col_end'`, and `'insert_col'` depends on your [`layoutDirection`](@/api/options.md#layoutdirection).\n   *\n   * @memberof Core#\n   * @function alter\n   * @param {string} action Available operations:\n   * <ul>\n   *    <li> `'insert_row_above'` </li>\n   *    <li> `'insert_row_below'` </li>\n   *    <li> `'remove_row'` </li> </li>\n   *    <li> `'insert_col_start'` </li>\n   *    <li> `'insert_col_end'` </li>\n   *    <li> `'remove_col'` </li>\n   *    <li> `'insert_row'` (<b>Deprecated</b>) </li>\n   *    <li> `'insert_col'` (<b>Deprecated</b>) </li>\n   * </ul>\n   * @param {number|number[]} [index] A visual index of the row/column before or after which the new row/column will be\n   *                                inserted or removed. Can also be an array of arrays, in format `[[index, amount],...]`.\n   * @param {number} [amount] The amount of rows or columns to be inserted or removed (default: `1`).\n   * @param {string} [source] Source indicator.\n   * @param {boolean} [keepEmptyRows] If set to `true`: prevents removing empty rows.\n   * @example\n   * ```js\n   * // above row 10 (by visual index), insert 1 new row\n   * hot.alter('insert_row_above', 10);\n   *\n   * // below row 10 (by visual index), insert 3 new rows\n   * hot.alter('insert_row_below', 10, 3);\n   *\n   * // in the LTR layout direction: to the left of column 10 (by visual index), insert 3 new columns\n   * // in the RTL layout direction: to the right of column 10 (by visual index), insert 3 new columns\n   * hot.alter('insert_col_start', 10, 3);\n   *\n   * // in the LTR layout direction: to the right of column 10 (by visual index), insert 1 new column\n   * // in the RTL layout direction: to the left of column 10 (by visual index), insert 1 new column\n   * hot.alter('insert_col_end', 10);\n   *\n   * // remove 2 rows, starting from row 10 (by visual index)\n   * hot.alter('remove_row', 10, 2);\n   *\n   * // remove 3 rows, starting from row 1 (by visual index)\n   * // remove 2 rows, starting from row 5 (by visual index)\n   * hot.alter('remove_row', [[1, 3], [5, 2]]);\n   * ```\n   */\n  this.alter = function (action, index, amount, source, keepEmptyRows) {\n    grid.alter(action, index, amount, source, keepEmptyRows);\n  };\n\n  /**\n   * Returns a TD element for the given `row` and `column` arguments, if it is rendered on screen.\n   * Returns `null` if the TD is not rendered on screen (probably because that part of the table is not visible).\n   *\n   * @memberof Core#\n   * @function getCell\n   * @param {number} row Visual row index.\n   * @param {number} column Visual column index.\n   * @param {boolean} [topmost=false] If set to `true`, it returns the TD element from the topmost overlay. For example,\n   * if the wanted cell is in the range of fixed rows, it will return a TD element from the `top` overlay.\n   * @returns {HTMLTableCellElement|null} The cell's TD element.\n   */\n  this.getCell = function (row, column) {\n    var topmost = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var renderableColumnIndex = column; // Handling also column headers.\n    var renderableRowIndex = row; // Handling also row headers.\n\n    if (column >= 0) {\n      if (this.columnIndexMapper.isHidden(this.toPhysicalColumn(column))) {\n        return null;\n      }\n      renderableColumnIndex = this.columnIndexMapper.getRenderableFromVisualIndex(column);\n    }\n    if (row >= 0) {\n      if (this.rowIndexMapper.isHidden(this.toPhysicalRow(row))) {\n        return null;\n      }\n      renderableRowIndex = this.rowIndexMapper.getRenderableFromVisualIndex(row);\n    }\n    if (renderableRowIndex === null || renderableColumnIndex === null) {\n      return null;\n    }\n    return instance.view.getCellAtCoords(instance._createCellCoords(renderableRowIndex, renderableColumnIndex), topmost);\n  };\n\n  /**\n   * Returns the coordinates of the cell, provided as a HTML table cell element.\n   *\n   * @memberof Core#\n   * @function getCoords\n   * @param {HTMLTableCellElement} element The HTML Element representing the cell.\n   * @returns {CellCoords|null} Visual coordinates object.\n   * @example\n   * ```js\n   * hot.getCoords(hot.getCell(1, 1));\n   * // it returns CellCoords object instance with props row: 1 and col: 1.\n   * ```\n   */\n  this.getCoords = function (element) {\n    var renderableCoords = this.view._wt.wtTable.getCoords(element);\n    if (renderableCoords === null) {\n      return null;\n    }\n    var renderableRow = renderableCoords.row,\n      renderableColumn = renderableCoords.col;\n    var visualRow = renderableRow;\n    var visualColumn = renderableColumn;\n    if (renderableRow >= 0) {\n      visualRow = this.rowIndexMapper.getVisualFromRenderableIndex(renderableRow);\n    }\n    if (renderableColumn >= 0) {\n      visualColumn = this.columnIndexMapper.getVisualFromRenderableIndex(renderableColumn);\n    }\n    return instance._createCellCoords(visualRow, visualColumn);\n  };\n\n  /**\n   * Returns the property name that corresponds with the given column index.\n   * If the data source is an array of arrays, it returns the columns index.\n   *\n   * @memberof Core#\n   * @function colToProp\n   * @param {number} column Visual column index.\n   * @returns {string|number} Column property or physical column index.\n   */\n  this.colToProp = function (column) {\n    return datamap.colToProp(column);\n  };\n\n  /**\n   * Returns column index that corresponds with the given property.\n   *\n   * @memberof Core#\n   * @function propToCol\n   * @param {string|number} prop Property name or physical column index.\n   * @returns {number} Visual column index.\n   */\n  this.propToCol = function (prop) {\n    return datamap.propToCol(prop);\n  };\n\n  /**\n   * Translate physical row index into visual.\n   *\n   * This method is useful when you want to retrieve visual row index which can be reordered, moved or trimmed\n   * based on a physical index.\n   *\n   * @memberof Core#\n   * @function toVisualRow\n   * @param {number} row Physical row index.\n   * @returns {number} Returns visual row index.\n   */\n  this.toVisualRow = function (row) {\n    return _this.rowIndexMapper.getVisualFromPhysicalIndex(row);\n  };\n\n  /**\n   * Translate physical column index into visual.\n   *\n   * This method is useful when you want to retrieve visual column index which can be reordered, moved or trimmed\n   * based on a physical index.\n   *\n   * @memberof Core#\n   * @function toVisualColumn\n   * @param {number} column Physical column index.\n   * @returns {number} Returns visual column index.\n   */\n  this.toVisualColumn = function (column) {\n    return _this.columnIndexMapper.getVisualFromPhysicalIndex(column);\n  };\n\n  /**\n   * Translate visual row index into physical.\n   *\n   * This method is useful when you want to retrieve physical row index based on a visual index which can be\n   * reordered, moved or trimmed.\n   *\n   * @memberof Core#\n   * @function toPhysicalRow\n   * @param {number} row Visual row index.\n   * @returns {number} Returns physical row index.\n   */\n  this.toPhysicalRow = function (row) {\n    return _this.rowIndexMapper.getPhysicalFromVisualIndex(row);\n  };\n\n  /**\n   * Translate visual column index into physical.\n   *\n   * This method is useful when you want to retrieve physical column index based on a visual index which can be\n   * reordered, moved or trimmed.\n   *\n   * @memberof Core#\n   * @function toPhysicalColumn\n   * @param {number} column Visual column index.\n   * @returns {number} Returns physical column index.\n   */\n  this.toPhysicalColumn = function (column) {\n    return _this.columnIndexMapper.getPhysicalFromVisualIndex(column);\n  };\n\n  /**\n   * @description\n   * Returns the cell value at `row`, `column`.\n   *\n   * __Note__: If data is reordered, sorted or trimmed, the currently visible order will be used.\n   *\n   * @memberof Core#\n   * @function getDataAtCell\n   * @param {number} row Visual row index.\n   * @param {number} column Visual column index.\n   * @returns {*} Data at cell.\n   */\n  this.getDataAtCell = function (row, column) {\n    return datamap.get(row, datamap.colToProp(column));\n  };\n\n  /**\n   * Returns value at visual `row` and `prop` indexes.\n   *\n   * __Note__: If data is reordered, sorted or trimmed, the currently visible order will be used.\n   *\n   * @memberof Core#\n   * @function getDataAtRowProp\n   * @param {number} row Visual row index.\n   * @param {string} prop Property name.\n   * @returns {*} Cell value.\n   */\n  this.getDataAtRowProp = function (row, prop) {\n    return datamap.get(row, prop);\n  };\n\n  /**\n   * @description\n   * Returns array of column values from the data source.\n   *\n   * __Note__: If columns were reordered or sorted, the currently visible order will be used.\n   *\n   * @memberof Core#\n   * @function getDataAtCol\n   * @param {number} column Visual column index.\n   * @returns {Array} Array of cell values.\n   */\n  this.getDataAtCol = function (column) {\n    var _ref13;\n    return (_ref13 = []).concat.apply(_ref13, _toConsumableArray(datamap.getRange(instance._createCellCoords(0, column), instance._createCellCoords(tableMeta.data.length - 1, column), datamap.DESTINATION_RENDERER)));\n  };\n\n  /**\n   * Given the object property name (e.g. `'first.name'` or `'0'`), returns an array of column's values from the table data.\n   * You can also provide a column index as the first argument.\n   *\n   * @memberof Core#\n   * @function getDataAtProp\n   * @param {string|number} prop Property name or physical column index.\n   * @returns {Array} Array of cell values.\n   */\n  // TODO: Getting data from `datamap` should work on visual indexes.\n  this.getDataAtProp = function (prop) {\n    var _ref14;\n    var range = datamap.getRange(instance._createCellCoords(0, datamap.propToCol(prop)), instance._createCellCoords(tableMeta.data.length - 1, datamap.propToCol(prop)), datamap.DESTINATION_RENDERER);\n    return (_ref14 = []).concat.apply(_ref14, _toConsumableArray(range));\n  };\n\n  /**\n   * Returns a clone of the source data object.\n   * Optionally you can provide a cell range by using the `row`, `column`, `row2`, `column2` arguments, to get only a\n   * fragment of the table data.\n   *\n   * __Note__: This method does not participate in data transformation. If the visual data of the table is reordered,\n   * sorted or trimmed only physical indexes are correct.\n   *\n   * @memberof Core#\n   * @function getSourceData\n   * @param {number} [row] From physical row index.\n   * @param {number} [column] From physical column index (or visual index, if data type is an array of objects).\n   * @param {number} [row2] To physical row index.\n   * @param {number} [column2] To physical column index (or visual index, if data type is an array of objects).\n   * @returns {Array[]|object[]} The table data.\n   */\n  this.getSourceData = function (row, column, row2, column2) {\n    var data;\n    if (row === void 0) {\n      data = dataSource.getData();\n    } else {\n      data = dataSource.getByRange(instance._createCellCoords(row, column), instance._createCellCoords(row2, column2));\n    }\n    return data;\n  };\n\n  /**\n   * Returns the source data object as an arrays of arrays format even when source data was provided in another format.\n   * Optionally you can provide a cell range by using the `row`, `column`, `row2`, `column2` arguments, to get only a\n   * fragment of the table data.\n   *\n   * __Note__: This method does not participate in data transformation. If the visual data of the table is reordered,\n   * sorted or trimmed only physical indexes are correct.\n   *\n   * @memberof Core#\n   * @function getSourceDataArray\n   * @param {number} [row] From physical row index.\n   * @param {number} [column] From physical column index (or visual index, if data type is an array of objects).\n   * @param {number} [row2] To physical row index.\n   * @param {number} [column2] To physical column index (or visual index, if data type is an array of objects).\n   * @returns {Array} An array of arrays.\n   */\n  this.getSourceDataArray = function (row, column, row2, column2) {\n    var data;\n    if (row === void 0) {\n      data = dataSource.getData(true);\n    } else {\n      data = dataSource.getByRange(instance._createCellCoords(row, column), instance._createCellCoords(row2, column2), true);\n    }\n    return data;\n  };\n\n  /**\n   * Returns an array of column values from the data source.\n   *\n   * @memberof Core#\n   * @function getSourceDataAtCol\n   * @param {number} column Visual column index.\n   * @returns {Array} Array of the column's cell values.\n   */\n  // TODO: Getting data from `sourceData` should work always on physical indexes.\n  this.getSourceDataAtCol = function (column) {\n    return dataSource.getAtColumn(column);\n  };\n\n  /* eslint-disable jsdoc/require-param */\n  /**\n   * Set the provided value in the source data set at the provided coordinates.\n   *\n   * @memberof Core#\n   * @function setSourceDataAtCell\n   * @param {number|Array} row Physical row index or array of changes in format `[[row, prop, value], ...]`.\n   * @param {number|string} column Physical column index / prop name.\n   * @param {*} value The value to be set at the provided coordinates.\n   * @param {string} [source] Source of the change as a string.\n   */\n  /* eslint-enable jsdoc/require-param */\n  this.setSourceDataAtCell = function (row, column, value, source) {\n    var input = setDataInputToArray(row, column, value);\n    var isThereAnySetSourceListener = this.hasHook('afterSetSourceDataAtCell');\n    var changesForHook = [];\n    if (isThereAnySetSourceListener) {\n      arrayEach(input, function (_ref15) {\n        var _ref16 = _slicedToArray(_ref15, 3),\n          changeRow = _ref16[0],\n          changeProp = _ref16[1],\n          changeValue = _ref16[2];\n        changesForHook.push([changeRow, changeProp, dataSource.getAtCell(changeRow, changeProp),\n        // The previous value.\n        changeValue]);\n      });\n    }\n    arrayEach(input, function (_ref17) {\n      var _ref18 = _slicedToArray(_ref17, 3),\n        changeRow = _ref18[0],\n        changeProp = _ref18[1],\n        changeValue = _ref18[2];\n      dataSource.setAtCell(changeRow, changeProp, changeValue);\n    });\n    if (isThereAnySetSourceListener) {\n      this.runHooks('afterSetSourceDataAtCell', changesForHook, source);\n    }\n    this.render();\n    var activeEditor = instance.getActiveEditor();\n    if (activeEditor && isDefined(activeEditor.refreshValue)) {\n      activeEditor.refreshValue();\n    }\n  };\n\n  /**\n   * Returns a single row of the data (array or object, depending on what data format you use).\n   *\n   * __Note__: This method does not participate in data transformation. If the visual data of the table is reordered,\n   * sorted or trimmed only physical indexes are correct.\n   *\n   * @memberof Core#\n   * @function getSourceDataAtRow\n   * @param {number} row Physical row index.\n   * @returns {Array|object} Single row of data.\n   */\n  this.getSourceDataAtRow = function (row) {\n    return dataSource.getAtRow(row);\n  };\n\n  /**\n   * Returns a single value from the data source.\n   *\n   * @memberof Core#\n   * @function getSourceDataAtCell\n   * @param {number} row Physical row index.\n   * @param {number} column Visual column index.\n   * @returns {*} Cell data.\n   */\n  // TODO: Getting data from `sourceData` should work always on physical indexes.\n  this.getSourceDataAtCell = function (row, column) {\n    return dataSource.getAtCell(row, column);\n  };\n\n  /**\n   * @description\n   * Returns a single row of the data.\n   *\n   * __Note__: If rows were reordered, sorted or trimmed, the currently visible order will be used.\n   *\n   * @memberof Core#\n   * @function getDataAtRow\n   * @param {number} row Visual row index.\n   * @returns {Array} Array of row's cell data.\n   */\n  this.getDataAtRow = function (row) {\n    var data = datamap.getRange(instance._createCellCoords(row, 0), instance._createCellCoords(row, this.countCols() - 1), datamap.DESTINATION_RENDERER);\n    return data[0] || [];\n  };\n\n  /**\n   * @description\n   * Returns a data type defined in the Handsontable settings under the `type` key ({@link Options#type}).\n   * If there are cells with different types in the selected range, it returns `'mixed'`.\n   *\n   * __Note__: If data is reordered, sorted or trimmed, the currently visible order will be used.\n   *\n   * @memberof Core#\n   * @function getDataType\n   * @param {number} rowFrom From visual row index.\n   * @param {number} columnFrom From visual column index.\n   * @param {number} rowTo To visual row index.\n   * @param {number} columnTo To visual column index.\n   * @returns {string} Cell type (e.q: `'mixed'`, `'text'`, `'numeric'`, `'autocomplete'`).\n   */\n  this.getDataType = function (rowFrom, columnFrom, rowTo, columnTo) {\n    var _this4 = this;\n    var coords = rowFrom === void 0 ? [0, 0, this.countRows(), this.countCols()] : [rowFrom, columnFrom, rowTo, columnTo];\n    var rowStart = coords[0],\n      columnStart = coords[1];\n    var rowEnd = coords[2],\n      columnEnd = coords[3];\n    var previousType = null;\n    var currentType = null;\n    if (rowEnd === void 0) {\n      rowEnd = rowStart;\n    }\n    if (columnEnd === void 0) {\n      columnEnd = columnStart;\n    }\n    var type = 'mixed';\n    rangeEach(Math.max(Math.min(rowStart, rowEnd), 0), Math.max(rowStart, rowEnd), function (row) {\n      var isTypeEqual = true;\n      rangeEach(Math.max(Math.min(columnStart, columnEnd), 0), Math.max(columnStart, columnEnd), function (column) {\n        var cellType = _this4.getCellMeta(row, column);\n        currentType = cellType.type;\n        if (previousType) {\n          isTypeEqual = previousType === currentType;\n        } else {\n          previousType = currentType;\n        }\n        return isTypeEqual;\n      });\n      type = isTypeEqual ? currentType : 'mixed';\n      return isTypeEqual;\n    });\n    return type;\n  };\n\n  /**\n   * Remove a property defined by the `key` argument from the cell meta object for the provided `row` and `column` coordinates.\n   *\n   * @memberof Core#\n   * @function removeCellMeta\n   * @param {number} row Visual row index.\n   * @param {number} column Visual column index.\n   * @param {string} key Property name.\n   * @fires Hooks#beforeRemoveCellMeta\n   * @fires Hooks#afterRemoveCellMeta\n   */\n  this.removeCellMeta = function (row, column, key) {\n    var _ref19 = [this.toPhysicalRow(row), this.toPhysicalColumn(column)],\n      physicalRow = _ref19[0],\n      physicalColumn = _ref19[1];\n    var cachedValue = metaManager.getCellMetaKeyValue(physicalRow, physicalColumn, key);\n    var hookResult = instance.runHooks('beforeRemoveCellMeta', row, column, key, cachedValue);\n    if (hookResult !== false) {\n      metaManager.removeCellMeta(physicalRow, physicalColumn, key);\n      instance.runHooks('afterRemoveCellMeta', row, column, key, cachedValue);\n    }\n    cachedValue = null;\n  };\n\n  /**\n   * Removes or adds one or more rows of the cell meta objects to the cell meta collections.\n   *\n   * @since 0.30.0\n   * @memberof Core#\n   * @function spliceCellsMeta\n   * @param {number} visualIndex A visual index that specifies at what position to add/remove items.\n   * @param {number} [deleteAmount=0] The number of items to be removed. If set to 0, no cell meta objects will be removed.\n   * @param {...object} [cellMetaRows] The new cell meta row objects to be added to the cell meta collection.\n   */\n  this.spliceCellsMeta = function (visualIndex) {\n    var _this5 = this;\n    var deleteAmount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    for (var _len3 = arguments.length, cellMetaRows = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {\n      cellMetaRows[_key3 - 2] = arguments[_key3];\n    }\n    if (cellMetaRows.length > 0 && !Array.isArray(cellMetaRows[0])) {\n      throw new Error('The 3rd argument (cellMetaRows) has to be passed as an array of cell meta objects array.');\n    }\n    if (deleteAmount > 0) {\n      metaManager.removeRow(this.toPhysicalRow(visualIndex), deleteAmount);\n    }\n    if (cellMetaRows.length > 0) {\n      arrayEach(cellMetaRows.reverse(), function (cellMetaRow) {\n        metaManager.createRow(_this5.toPhysicalRow(visualIndex));\n        arrayEach(cellMetaRow, function (cellMeta, columnIndex) {\n          return _this5.setCellMetaObject(visualIndex, columnIndex, cellMeta);\n        });\n      });\n    }\n    instance.render();\n  };\n\n  /**\n   * Set cell meta data object defined by `prop` to the corresponding params `row` and `column`.\n   *\n   * @memberof Core#\n   * @function setCellMetaObject\n   * @param {number} row Visual row index.\n   * @param {number} column Visual column index.\n   * @param {object} prop Meta object.\n   */\n  this.setCellMetaObject = function (row, column, prop) {\n    var _this6 = this;\n    if (_typeof(prop) === 'object') {\n      objectEach(prop, function (value, key) {\n        _this6.setCellMeta(row, column, key, value);\n      });\n    }\n  };\n\n  /**\n   * Sets a property defined by the `key` property to the meta object of a cell corresponding to params `row` and `column`.\n   *\n   * @memberof Core#\n   * @function setCellMeta\n   * @param {number} row Visual row index.\n   * @param {number} column Visual column index.\n   * @param {string} key Property name.\n   * @param {string} value Property value.\n   * @fires Hooks#beforeSetCellMeta\n   * @fires Hooks#afterSetCellMeta\n   */\n  this.setCellMeta = function (row, column, key, value) {\n    var allowSetCellMeta = instance.runHooks('beforeSetCellMeta', row, column, key, value);\n    if (allowSetCellMeta === false) {\n      return;\n    }\n    var physicalRow = row;\n    var physicalColumn = column;\n    if (row < this.countRows()) {\n      physicalRow = this.toPhysicalRow(row);\n    }\n    if (column < this.countCols()) {\n      physicalColumn = this.toPhysicalColumn(column);\n    }\n    metaManager.setCellMeta(physicalRow, physicalColumn, key, value);\n    instance.runHooks('afterSetCellMeta', row, column, key, value);\n  };\n\n  /**\n   * Get all the cells meta settings at least once generated in the table (in order of cell initialization).\n   *\n   * @memberof Core#\n   * @function getCellsMeta\n   * @returns {Array} Returns an array of ColumnSettings object instances.\n   */\n  this.getCellsMeta = function () {\n    return metaManager.getCellsMeta();\n  };\n\n  /**\n   * Returns the cell properties object for the given `row` and `column` coordinates.\n   *\n   * @memberof Core#\n   * @function getCellMeta\n   * @param {number} row Visual row index.\n   * @param {number} column Visual column index.\n   * @returns {object} The cell properties object.\n   * @fires Hooks#beforeGetCellMeta\n   * @fires Hooks#afterGetCellMeta\n   */\n  this.getCellMeta = function (row, column) {\n    var physicalRow = this.toPhysicalRow(row);\n    var physicalColumn = this.toPhysicalColumn(column);\n    if (physicalRow === null) {\n      physicalRow = row;\n    }\n    if (physicalColumn === null) {\n      physicalColumn = column;\n    }\n    return metaManager.getCellMeta(physicalRow, physicalColumn, {\n      visualRow: row,\n      visualColumn: column\n    });\n  };\n\n  /**\n   * Returns an array of cell meta objects for specified physical row index.\n   *\n   * @memberof Core#\n   * @function getCellMetaAtRow\n   * @param {number} row Physical row index.\n   * @returns {Array}\n   */\n  this.getCellMetaAtRow = function (row) {\n    return metaManager.getCellsMetaAtRow(row);\n  };\n\n  /**\n   * Checks if the data format and config allows user to modify the column structure.\n   *\n   * @memberof Core#\n   * @function isColumnModificationAllowed\n   * @returns {boolean}\n   */\n  this.isColumnModificationAllowed = function () {\n    return !(instance.dataType === 'object' || tableMeta.columns);\n  };\n\n  /**\n   * Returns the cell renderer function by given `row` and `column` arguments.\n   *\n   * @memberof Core#\n   * @function getCellRenderer\n   * @param {number|object} rowOrMeta Visual row index or cell meta object (see {@link Core#getCellMeta}).\n   * @param {number} column Visual column index.\n   * @returns {Function} Returns the renderer function.\n   * @example\n   * ```js\n   * // Get cell renderer using `row` and `column` coordinates.\n   * hot.getCellRenderer(1, 1);\n   * // Get cell renderer using cell meta object.\n   * hot.getCellRenderer(hot.getCellMeta(1, 1));\n   * ```\n   */\n  this.getCellRenderer = function (rowOrMeta, column) {\n    var cellRenderer = typeof rowOrMeta === 'number' ? instance.getCellMeta(rowOrMeta, column).renderer : rowOrMeta.renderer;\n    if (typeof cellRenderer === 'string') {\n      return getRenderer(cellRenderer);\n    }\n    return isUndefined(cellRenderer) ? getRenderer('text') : cellRenderer;\n  };\n\n  /**\n   * Returns the cell editor class by the provided `row` and `column` arguments.\n   *\n   * @memberof Core#\n   * @function getCellEditor\n   * @param {number} rowOrMeta Visual row index or cell meta object (see {@link Core#getCellMeta}).\n   * @param {number} column Visual column index.\n   * @returns {Function|boolean} Returns the editor class or `false` is cell editor is disabled.\n   * @example\n   * ```js\n   * // Get cell editor class using `row` and `column` coordinates.\n   * hot.getCellEditor(1, 1);\n   * // Get cell editor class using cell meta object.\n   * hot.getCellEditor(hot.getCellMeta(1, 1));\n   * ```\n   */\n  this.getCellEditor = function (rowOrMeta, column) {\n    var cellEditor = typeof rowOrMeta === 'number' ? instance.getCellMeta(rowOrMeta, column).editor : rowOrMeta.editor;\n    if (typeof cellEditor === 'string') {\n      return getEditor(cellEditor);\n    }\n    return isUndefined(cellEditor) ? getEditor('text') : cellEditor;\n  };\n\n  /**\n   * Returns the cell validator by `row` and `column`.\n   *\n   * @memberof Core#\n   * @function getCellValidator\n   * @param {number|object} rowOrMeta Visual row index or cell meta object (see {@link Core#getCellMeta}).\n   * @param {number} column Visual column index.\n   * @returns {Function|RegExp|undefined} The validator function.\n   * @example\n   * ```js\n   * // Get cell validator using `row` and `column` coordinates.\n   * hot.getCellValidator(1, 1);\n   * // Get cell validator using cell meta object.\n   * hot.getCellValidator(hot.getCellMeta(1, 1));\n   * ```\n   */\n  this.getCellValidator = function (rowOrMeta, column) {\n    var cellValidator = typeof rowOrMeta === 'number' ? instance.getCellMeta(rowOrMeta, column).validator : rowOrMeta.validator;\n    if (typeof cellValidator === 'string') {\n      return getValidator(cellValidator);\n    }\n    return cellValidator;\n  };\n\n  /**\n   * Validates all cells using their validator functions and calls callback when finished.\n   *\n   * If one of the cells is invalid, the callback will be fired with `'valid'` arguments as `false` - otherwise it\n   * would equal `true`.\n   *\n   * @memberof Core#\n   * @function validateCells\n   * @param {Function} [callback] The callback function.\n   * @example\n   * ```js\n   * hot.validateCells((valid) => {\n   *   if (valid) {\n   *     // ... code for validated cells\n   *   }\n   * })\n   * ```\n   */\n  this.validateCells = function (callback) {\n    this._validateCells(callback);\n  };\n\n  /**\n   * Validates rows using their validator functions and calls callback when finished.\n   *\n   * If one of the cells is invalid, the callback will be fired with `'valid'` arguments as `false` - otherwise it\n   *  would equal `true`.\n   *\n   * @memberof Core#\n   * @function validateRows\n   * @param {Array} [rows] Array of validation target visual row indexes.\n   * @param {Function} [callback] The callback function.\n   * @example\n   * ```js\n   * hot.validateRows([3, 4, 5], (valid) => {\n   *   if (valid) {\n   *     // ... code for validated rows\n   *   }\n   * })\n   * ```\n   */\n  this.validateRows = function (rows, callback) {\n    if (!Array.isArray(rows)) {\n      throw new Error('validateRows parameter `rows` must be an array');\n    }\n    this._validateCells(callback, rows);\n  };\n\n  /**\n   * Validates columns using their validator functions and calls callback when finished.\n   *\n   * If one of the cells is invalid, the callback will be fired with `'valid'` arguments as `false` - otherwise it\n   *  would equal `true`.\n   *\n   * @memberof Core#\n   * @function validateColumns\n   * @param {Array} [columns] Array of validation target visual columns indexes.\n   * @param {Function} [callback] The callback function.\n   * @example\n   * ```js\n   * hot.validateColumns([3, 4, 5], (valid) => {\n   *   if (valid) {\n   *     // ... code for validated columns\n   *   }\n   * })\n   * ```\n   */\n  this.validateColumns = function (columns, callback) {\n    if (!Array.isArray(columns)) {\n      throw new Error('validateColumns parameter `columns` must be an array');\n    }\n    this._validateCells(callback, undefined, columns);\n  };\n\n  /**\n   * Validates all cells using their validator functions and calls callback when finished.\n   *\n   * If one of the cells is invalid, the callback will be fired with `'valid'` arguments as `false` - otherwise it would equal `true`.\n   *\n   * Private use intended.\n   *\n   * @private\n   * @memberof Core#\n   * @function _validateCells\n   * @param {Function} [callback] The callback function.\n   * @param {Array} [rows] An array of validation target visual row indexes.\n   * @param {Array} [columns] An array of validation target visual column indexes.\n   */\n  this._validateCells = function (callback, rows, columns) {\n    var waitingForValidator = new ValidatorsQueue();\n    if (callback) {\n      waitingForValidator.onQueueEmpty = callback;\n    }\n    var i = instance.countRows() - 1;\n    while (i >= 0) {\n      if (rows !== undefined && rows.indexOf(i) === -1) {\n        i -= 1;\n        continue;\n      }\n      var j = instance.countCols() - 1;\n      while (j >= 0) {\n        if (columns !== undefined && columns.indexOf(j) === -1) {\n          j -= 1;\n          continue;\n        }\n        waitingForValidator.addValidatorToQueue();\n        instance.validateCell(instance.getDataAtCell(i, j), instance.getCellMeta(i, j), function (result) {\n          if (typeof result !== 'boolean') {\n            throw new Error('Validation error: result is not boolean');\n          }\n          if (result === false) {\n            waitingForValidator.valid = false;\n          }\n          waitingForValidator.removeValidatorFormQueue();\n        }, 'validateCells');\n        j -= 1;\n      }\n      i -= 1;\n    }\n    waitingForValidator.checkIfQueueIsEmpty();\n  };\n\n  /**\n   * Returns an array of row headers' values (if they are enabled). If param `row` was given, it returns the header of the given row as a string.\n   *\n   * @memberof Core#\n   * @function getRowHeader\n   * @param {number} [row] Visual row index.\n   * @fires Hooks#modifyRowHeader\n   * @returns {Array|string|number} Array of header values / single header value.\n   */\n  this.getRowHeader = function (row) {\n    var rowHeader = tableMeta.rowHeaders;\n    var physicalRow = row;\n    if (physicalRow !== void 0) {\n      physicalRow = instance.runHooks('modifyRowHeader', physicalRow);\n    }\n    if (physicalRow === void 0) {\n      rowHeader = [];\n      rangeEach(instance.countRows() - 1, function (i) {\n        rowHeader.push(instance.getRowHeader(i));\n      });\n    } else if (Array.isArray(rowHeader) && rowHeader[physicalRow] !== void 0) {\n      rowHeader = rowHeader[physicalRow];\n    } else if (isFunction(rowHeader)) {\n      rowHeader = rowHeader(physicalRow);\n    } else if (rowHeader && typeof rowHeader !== 'string' && typeof rowHeader !== 'number') {\n      rowHeader = physicalRow + 1;\n    }\n    return rowHeader;\n  };\n\n  /**\n   * Returns information about if this table is configured to display row headers.\n   *\n   * @memberof Core#\n   * @function hasRowHeaders\n   * @returns {boolean} `true` if the instance has the row headers enabled, `false` otherwise.\n   */\n  this.hasRowHeaders = function () {\n    return !!tableMeta.rowHeaders;\n  };\n\n  /**\n   * Returns information about if this table is configured to display column headers.\n   *\n   * @memberof Core#\n   * @function hasColHeaders\n   * @returns {boolean} `true` if the instance has the column headers enabled, `false` otherwise.\n   */\n  this.hasColHeaders = function () {\n    if (tableMeta.colHeaders !== void 0 && tableMeta.colHeaders !== null) {\n      // Polymer has empty value = null\n      return !!tableMeta.colHeaders;\n    }\n    for (var i = 0, ilen = instance.countCols(); i < ilen; i++) {\n      if (instance.getColHeader(i)) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  /**\n   * Gets the values of column headers (if column headers are [enabled](@/api/options.md#colheaders)).\n   *\n   * To get an array with the values of all\n   * [bottom-most](@/guides/cell-features/clipboard.md#copy-with-headers) column headers,\n   * call `getColHeader()` with no arguments.\n   *\n   * To get the value of the bottom-most header of a specific column, use the `column` parameter.\n   *\n   * To get the value of a [specific-level](@/guides/columns/column-groups.md) header\n   * of a specific column, use the `column` and `headerLevel` parameters.\n   *\n   * Read more:\n   * - [Guides: Column groups](@/guides/columns/column-groups.md)\n   * - [Options: `colHeaders`](@/api/options.md#colheaders)\n   * - [Guides: Copy with headers](@/guides/cell-features/clipboard.md#copy-with-headers)\n   *\n   * ```js\n   * // get the contents of all bottom-most column headers\n   * hot.getColHeader();\n   *\n   * // get the contents of the bottom-most header of a specific column\n   * hot.getColHeader(5);\n   *\n   * // get the contents of a specific column header at a specific level\n   * hot.getColHeader(5, -2);\n   * ```\n   *\n   * @memberof Core#\n   * @function getColHeader\n   * @param {number} [column] A visual column index.\n   * @param {number} [headerLevel=-1] (Since 12.3.0) Header level index. Accepts positive (0 to n)\n   *                                  and negative (-1 to -n) values. For positive values, 0 points to the\n   *                                  topmost header. For negative values, -1 points to the bottom-most\n   *                                  header (the header closest to the cells).\n   * @fires Hooks#modifyColHeader\n   * @fires Hooks#modifyColumnHeaderValue\n   * @returns {Array|string|number} Column header values.\n   */\n  this.getColHeader = function (column) {\n    var headerLevel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n    var columnIndex = instance.runHooks('modifyColHeader', column);\n    if (columnIndex === void 0) {\n      var out = [];\n      var ilen = instance.countCols();\n      for (var i = 0; i < ilen; i++) {\n        out.push(instance.getColHeader(i));\n      }\n      return out;\n    }\n    var result = tableMeta.colHeaders;\n    var translateVisualIndexToColumns = function translateVisualIndexToColumns(visualColumnIndex) {\n      var arr = [];\n      var columnsLen = instance.countCols();\n      var index = 0;\n      for (; index < columnsLen; index++) {\n        if (isFunction(tableMeta.columns) && tableMeta.columns(index)) {\n          arr.push(index);\n        }\n      }\n      return arr[visualColumnIndex];\n    };\n    var physicalColumn = instance.toPhysicalColumn(columnIndex);\n    var prop = translateVisualIndexToColumns(physicalColumn);\n    if (tableMeta.colHeaders === false) {\n      result = null;\n    } else if (tableMeta.columns && isFunction(tableMeta.columns) && tableMeta.columns(prop) && tableMeta.columns(prop).title) {\n      result = tableMeta.columns(prop).title;\n    } else if (tableMeta.columns && tableMeta.columns[physicalColumn] && tableMeta.columns[physicalColumn].title) {\n      result = tableMeta.columns[physicalColumn].title;\n    } else if (Array.isArray(tableMeta.colHeaders) && tableMeta.colHeaders[physicalColumn] !== void 0) {\n      result = tableMeta.colHeaders[physicalColumn];\n    } else if (isFunction(tableMeta.colHeaders)) {\n      result = tableMeta.colHeaders(physicalColumn);\n    } else if (tableMeta.colHeaders && typeof tableMeta.colHeaders !== 'string' && typeof tableMeta.colHeaders !== 'number') {\n      result = spreadsheetColumnLabel(columnIndex); // see #1458\n    }\n\n    result = instance.runHooks('modifyColumnHeaderValue', result, column, headerLevel);\n    return result;\n  };\n\n  /**\n   * Return column width from settings (no guessing). Private use intended.\n   *\n   * @private\n   * @memberof Core#\n   * @function _getColWidthFromSettings\n   * @param {number} col Visual col index.\n   * @returns {number}\n   */\n  this._getColWidthFromSettings = function (col) {\n    var width;\n\n    // We currently don't support cell meta objects for headers (negative values)\n    if (col >= 0) {\n      var cellProperties = instance.getCellMeta(0, col);\n      width = cellProperties.width;\n    }\n    if (width === void 0 || width === tableMeta.width) {\n      width = tableMeta.colWidths;\n    }\n    if (width !== void 0 && width !== null) {\n      switch (_typeof(width)) {\n        case 'object':\n          // array\n          width = width[col];\n          break;\n        case 'function':\n          width = width(col);\n          break;\n        default:\n          break;\n      }\n      if (typeof width === 'string') {\n        width = parseInt(width, 10);\n      }\n    }\n    return width;\n  };\n\n  /**\n   * Returns the width of the requested column.\n   *\n   * @memberof Core#\n   * @function getColWidth\n   * @param {number} column Visual column index.\n   * @returns {number} Column width.\n   * @fires Hooks#modifyColWidth\n   */\n  this.getColWidth = function (column) {\n    var width = instance._getColWidthFromSettings(column);\n    width = instance.runHooks('modifyColWidth', width, column);\n    if (width === void 0) {\n      width = ViewportColumnsCalculator.DEFAULT_WIDTH;\n    }\n    return width;\n  };\n\n  /**\n   * Return row height from settings (no guessing). Private use intended.\n   *\n   * @private\n   * @memberof Core#\n   * @function _getRowHeightFromSettings\n   * @param {number} row Visual row index.\n   * @returns {number}\n   */\n  this._getRowHeightFromSettings = function (row) {\n    // let cellProperties = instance.getCellMeta(row, 0);\n    // let height = cellProperties.height;\n    //\n    // if (height === void 0 || height === tableMeta.height) {\n    //  height = cellProperties.rowHeights;\n    // }\n    var height = tableMeta.rowHeights;\n    if (height !== void 0 && height !== null) {\n      switch (_typeof(height)) {\n        case 'object':\n          // array\n          height = height[row];\n          break;\n        case 'function':\n          height = height(row);\n          break;\n        default:\n          break;\n      }\n      if (typeof height === 'string') {\n        height = parseInt(height, 10);\n      }\n    }\n    return height;\n  };\n\n  /**\n   * Returns a row's height, as recognized by Handsontable.\n   *\n   * Depending on your configuration, the method returns (in order of priority):\n   *   1. The row height set by the [`ManualRowResize`](@/api/manualRowResize.md) plugin\n   *     (if the plugin is enabled).\n   *   2. The row height set by the [`rowHeights`](@/api/options.md#rowheights) configuration option\n   *     (if the option is set).\n   *   3. The row height as measured in the DOM by the [`AutoRowSize`](@/api/autoRowSize.md) plugin\n   *     (if the plugin is enabled).\n   *   4. `undefined`, if neither [`ManualRowResize`](@/api/manualRowResize.md),\n   *     nor [`rowHeights`](@/api/options.md#rowheights),\n   *     nor [`AutoRowSize`](@/api/autoRowSize.md) is used.\n   *\n   * The height returned includes 1 px of the row's bottom border.\n   *\n   * Mind that this method is different from the\n   * [`getRowHeight()`](@/api/autoRowSize.md#getrowheight) method\n   * of the [`AutoRowSize`](@/api/autoRowSize.md) plugin.\n   *\n   * @memberof Core#\n   * @function getRowHeight\n   * @param {number} row A visual row index.\n   * @returns {number|undefined} The height of the specified row, in pixels.\n   * @fires Hooks#modifyRowHeight\n   */\n  this.getRowHeight = function (row) {\n    var height = instance._getRowHeightFromSettings(row);\n    height = instance.runHooks('modifyRowHeight', height, row);\n    return height;\n  };\n\n  /**\n   * Returns the total number of rows in the data source.\n   *\n   * @memberof Core#\n   * @function countSourceRows\n   * @returns {number} Total number of rows.\n   */\n  this.countSourceRows = function () {\n    return dataSource.countRows();\n  };\n\n  /**\n   * Returns the total number of columns in the data source.\n   *\n   * @memberof Core#\n   * @function countSourceCols\n   * @returns {number} Total number of columns.\n   */\n  this.countSourceCols = function () {\n    return dataSource.countFirstRowKeys();\n  };\n\n  /**\n   * Returns the total number of visual rows in the table.\n   *\n   * @memberof Core#\n   * @function countRows\n   * @returns {number} Total number of rows.\n   */\n  this.countRows = function () {\n    return datamap.getLength();\n  };\n\n  /**\n   * Returns the total number of visible columns in the table.\n   *\n   * @memberof Core#\n   * @function countCols\n   * @returns {number} Total number of columns.\n   */\n  this.countCols = function () {\n    var maxCols = tableMeta.maxCols;\n    var dataLen = this.columnIndexMapper.getNotTrimmedIndexesLength();\n    return Math.min(maxCols, dataLen);\n  };\n\n  /**\n   * Returns the number of rendered rows including rows that are partially or fully rendered\n   * outside the table viewport.\n   *\n   * @memberof Core#\n   * @function countRenderedRows\n   * @returns {number} Returns -1 if table is not visible.\n   */\n  this.countRenderedRows = function () {\n    return instance.view._wt.drawn ? instance.view._wt.wtTable.getRenderedRowsCount() : -1;\n  };\n\n  /**\n   * Returns the number of rendered rows that are only visible in the table viewport.\n   * The rows that are partially visible are not counted.\n   *\n   * @memberof Core#\n   * @function countVisibleRows\n   * @returns {number} Number of visible rows or -1.\n   */\n  this.countVisibleRows = function () {\n    return instance.view._wt.drawn ? instance.view._wt.wtTable.getVisibleRowsCount() : -1;\n  };\n\n  /**\n   * Returns the number of rendered rows including columns that are partially or fully rendered\n   * outside the table viewport.\n   *\n   * @memberof Core#\n   * @function countRenderedCols\n   * @returns {number} Returns -1 if table is not visible.\n   */\n  this.countRenderedCols = function () {\n    return instance.view._wt.drawn ? instance.view._wt.wtTable.getRenderedColumnsCount() : -1;\n  };\n\n  /**\n   * Returns the number of rendered columns that are only visible in the table viewport.\n   * The columns that are partially visible are not counted.\n   *\n   * @memberof Core#\n   * @function countVisibleCols\n   * @returns {number} Number of visible columns or -1.\n   */\n  this.countVisibleCols = function () {\n    return instance.view._wt.drawn ? instance.view._wt.wtTable.getVisibleColumnsCount() : -1;\n  };\n\n  /**\n   * Returns the number of empty rows. If the optional ending parameter is `true`, returns the\n   * number of empty rows at the bottom of the table.\n   *\n   * @memberof Core#\n   * @function countEmptyRows\n   * @param {boolean} [ending=false] If `true`, will only count empty rows at the end of the data source.\n   * @returns {number} Count empty rows.\n   */\n  this.countEmptyRows = function () {\n    var ending = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var emptyRows = 0;\n    rangeEachReverse(instance.countRows() - 1, function (visualIndex) {\n      if (instance.isEmptyRow(visualIndex)) {\n        emptyRows += 1;\n      } else if (ending === true) {\n        return false;\n      }\n    });\n    return emptyRows;\n  };\n\n  /**\n   * Returns the number of empty columns. If the optional ending parameter is `true`, returns the number of empty\n   * columns at right hand edge of the table.\n   *\n   * @memberof Core#\n   * @function countEmptyCols\n   * @param {boolean} [ending=false] If `true`, will only count empty columns at the end of the data source row.\n   * @returns {number} Count empty cols.\n   */\n  this.countEmptyCols = function () {\n    var ending = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var emptyColumns = 0;\n    rangeEachReverse(instance.countCols() - 1, function (visualIndex) {\n      if (instance.isEmptyCol(visualIndex)) {\n        emptyColumns += 1;\n      } else if (ending === true) {\n        return false;\n      }\n    });\n    return emptyColumns;\n  };\n\n  /**\n   * Check if all cells in the row declared by the `row` argument are empty.\n   *\n   * @memberof Core#\n   * @function isEmptyRow\n   * @param {number} row Visual row index.\n   * @returns {boolean} `true` if the row at the given `row` is empty, `false` otherwise.\n   */\n  this.isEmptyRow = function (row) {\n    return tableMeta.isEmptyRow.call(instance, row);\n  };\n\n  /**\n   * Check if all cells in the the column declared by the `column` argument are empty.\n   *\n   * @memberof Core#\n   * @function isEmptyCol\n   * @param {number} column Column index.\n   * @returns {boolean} `true` if the column at the given `col` is empty, `false` otherwise.\n   */\n  this.isEmptyCol = function (column) {\n    return tableMeta.isEmptyCol.call(instance, column);\n  };\n\n  /**\n   * Select a single cell, or a single range of adjacent cells.\n   *\n   * To select a cell, pass its visual row and column indexes, for example: `selectCell(2, 4)`.\n   *\n   * To select a range, pass the visual indexes of the first and last cell in the range, for example: `selectCell(2, 4, 3, 5)`.\n   *\n   * If your columns have properties, you can pass those properties' values instead of column indexes, for example: `selectCell(2, 'first_name')`.\n   *\n   * By default, `selectCell()` also:\n   *  - Scrolls the viewport to the newly-selected cells.\n   *  - Switches the keyboard focus to Handsontable (by calling Handsontable's [`listen()`](#listen) method).\n   *\n   * @example\n   * ```js\n   * // select a single cell\n   * hot.selectCell(2, 4);\n   *\n   * // select a range of cells\n   * hot.selectCell(2, 4, 3, 5);\n   *\n   * // select a single cell, using a column property\n   * hot.selectCell(2, 'first_name');\n   *\n   * // select a range of cells, using column properties\n   * hot.selectCell(2, 'first_name', 3, 'last_name');\n   *\n   * // select a range of cells, without scrolling to them\n   * hot.selectCell(2, 4, 3, 5, false);\n   *\n   * // select a range of cells, without switching the keyboard focus to Handsontable\n   * hot.selectCell(2, 4, 3, 5, null, false);\n   * ```\n   *\n   * @memberof Core#\n   * @function selectCell\n   * @param {number} row A visual row index.\n   * @param {number|string} column A visual column index (`number`), or a column property's value (`string`).\n   * @param {number} [endRow] If selecting a range: the visual row index of the last cell in the range.\n   * @param {number|string} [endColumn] If selecting a range: the visual column index (or a column property's value) of the last cell in the range.\n   * @param {boolean} [scrollToCell=true] `true`: scroll the viewport to the newly-selected cells. `false`: keep the previous viewport.\n   * @param {boolean} [changeListener=true] `true`: switch the keyboard focus to Handsontable. `false`: keep the previous keyboard focus.\n   * @returns {boolean} `true`: the selection was successful, `false`: the selection failed.\n   */\n  this.selectCell = function (row, column, endRow, endColumn) {\n    var scrollToCell = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n    var changeListener = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n    if (isUndefined(row) || isUndefined(column)) {\n      return false;\n    }\n    return this.selectCells([[row, column, endRow, endColumn]], scrollToCell, changeListener);\n  };\n\n  /**\n   * Select multiple cells or ranges of cells, adjacent or non-adjacent.\n   *\n   * You can pass one of the below:\n   * - An array of arrays (which matches the output of Handsontable's [`getSelected()`](#getselected) method).\n   * - An array of [`CellRange`](@/api/cellRange.md) objects (which matches the output of Handsontable's [`getSelectedRange()`](#getselectedrange) method).\n   *\n   * To select multiple cells, pass the visual row and column indexes of each cell, for example: `hot.selectCells([[1, 1], [5, 5]])`.\n   *\n   * To select multiple ranges, pass the visual indexes of the first and last cell in each range, for example: `hot.selectCells([[1, 1, 2, 2], [6, 2, 0, 2]])`.\n   *\n   * If your columns have properties, you can pass those properties' values instead of column indexes, for example: `hot.selectCells([[1, 'first_name'], [5, 'last_name']])`.\n   *\n   * By default, `selectCell()` also:\n   *  - Scrolls the viewport to the newly-selected cells.\n   *  - Switches the keyboard focus to Handsontable (by calling Handsontable's [`listen()`](#listen) method).\n   *\n   * @example\n   * ```js\n   * // select non-adjacent cells\n   * hot.selectCells([[1, 1], [5, 5], [10, 10]]);\n   *\n   * // select non-adjacent ranges of cells\n   * hot.selectCells([[1, 1, 2, 2], [10, 10, 20, 20]]);\n   *\n   * // select cells and ranges of cells\n   * hot.selectCells([[1, 1, 2, 2], [3, 3], [6, 2, 0, 2]]);\n   *\n   * // select cells, using column properties\n   * hot.selectCells([[1, 'id', 2, 'first_name'], [3, 'full_name'], [6, 'last_name', 0, 'first_name']]);\n   *\n   * // select multiple ranges, using an array of `CellRange` objects\n   * const selected = hot.getSelectedRange();\n   *\n   * selected[0].from.row = 0;\n   * selected[0].from.col = 0;\n   * selected[0].to.row = 5;\n   * selected[0].to.col = 5;\n   *\n   * selected[1].from.row = 10;\n   * selected[1].from.col = 10;\n   * selected[1].to.row = 20;\n   * selected[1].to.col = 20;\n   *\n   * hot.selectCells(selected);\n   * ```\n   *\n   * @memberof Core#\n   * @since 0.38.0\n   * @function selectCells\n   * @param {Array[]|CellRange[]} coords Visual coordinates,\n   * passed either as an array of arrays (`[[rowStart, columnStart, rowEnd, columnEnd], ...]`)\n   * or as an array of [`CellRange`](@/api/cellRange.md) objects.\n   * @param {boolean} [scrollToCell=true] `true`: scroll the viewport to the newly-selected cells. `false`: keep the previous viewport.\n   * @param {boolean} [changeListener=true] `true`: switch the keyboard focus to Handsontable. `false`: keep the previous keyboard focus.\n   * @returns {boolean} `true`: the selection was successful, `false`: the selection failed.\n   */\n  this.selectCells = function () {\n    var coords = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [[]];\n    var scrollToCell = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    var changeListener = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    if (scrollToCell === false) {\n      preventScrollingToCell = true;\n    }\n    var wasSelected = selection.selectCells(coords);\n    if (wasSelected && changeListener) {\n      instance.listen();\n    }\n    preventScrollingToCell = false;\n    return wasSelected;\n  };\n\n  /**\n   * Select column specified by `startColumn` visual index, column property or a range of columns finishing at `endColumn`.\n   *\n   * @example\n   * ```js\n   * // Select column using visual index.\n   * hot.selectColumns(1);\n   * // Select column using column property.\n   * hot.selectColumns('id');\n   * // Select range of columns using visual indexes.\n   * hot.selectColumns(1, 4);\n   * // Select range of columns using column properties.\n   * hot.selectColumns('id', 'last_name');\n   * ```\n   *\n   * @memberof Core#\n   * @since 0.38.0\n   * @function selectColumns\n   * @param {number} startColumn The visual column index from which the selection starts.\n   * @param {number} [endColumn=startColumn] The visual column index to which the selection finishes. If `endColumn`\n   *                                         is not defined the column defined by `startColumn` will be selected.\n   * @returns {boolean} `true` if selection was successful, `false` otherwise.\n   */\n  this.selectColumns = function (startColumn) {\n    var endColumn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : startColumn;\n    return selection.selectColumns(startColumn, endColumn);\n  };\n\n  /**\n   * Select row specified by `startRow` visual index or a range of rows finishing at `endRow`.\n   *\n   * @example\n   * ```js\n   * // Select row using visual index.\n   * hot.selectRows(1);\n   * // Select range of rows using visual indexes.\n   * hot.selectRows(1, 4);\n   * ```\n   *\n   * @memberof Core#\n   * @since 0.38.0\n   * @function selectRows\n   * @param {number} startRow The visual row index from which the selection starts.\n   * @param {number} [endRow=startRow] The visual row index to which the selection finishes. If `endRow`\n   *                                   is not defined the row defined by `startRow` will be selected.\n   * @returns {boolean} `true` if selection was successful, `false` otherwise.\n   */\n  this.selectRows = function (startRow) {\n    var endRow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : startRow;\n    return selection.selectRows(startRow, endRow);\n  };\n\n  /**\n   * Deselects the current cell selection on the table.\n   *\n   * @memberof Core#\n   * @function deselectCell\n   */\n  this.deselectCell = function () {\n    selection.deselect();\n  };\n\n  /**\n   * Select the whole table.\n   *\n   * The previous selection is overwritten.\n   *\n   * ```js\n   * // select all cells in the table, including all headers\n   * hot.selectAll();\n   *\n   * // select all cells in the table, without headers\n   * hot.selectAll(false);\n   * ```\n   *\n   * @since 0.38.2\n   * @memberof Core#\n   * @function selectAll\n   * @param {boolean} [includeHeaders=true] `true`: include all row, column and corner headers.\n   * `false`: don't include any headers.\n   */\n  this.selectAll = function () {\n    var includeHeaders = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    var includeRowHeaders = includeHeaders && this.hasRowHeaders();\n    var includeColumnHeaders = includeHeaders && this.hasColHeaders();\n    preventScrollingToCell = true;\n    selection.selectAll(includeRowHeaders, includeColumnHeaders);\n    preventScrollingToCell = false;\n  };\n  var getIndexToScroll = function getIndexToScroll(indexMapper, visualIndex) {\n    // Looking for a visual index on the right and then (when not found) on the left.\n    return indexMapper.getNearestNotHiddenIndex(visualIndex, 1, true);\n  };\n\n  /**\n   * Scroll viewport to coordinates specified by the `row` and `column` arguments.\n   *\n   * @memberof Core#\n   * @function scrollViewportTo\n   * @param {number} [row] Row index. If the last argument isn't defined we treat the index as a visual row index. Otherwise,\n   * we are using the index for numbering only this rows which may be rendered (we don't consider hidden rows).\n   * @param {number} [column] Column index. If the last argument isn't defined we treat the index as a visual column index.\n   * Otherwise, we are using the index for numbering only this columns which may be rendered (we don't consider hidden columns).\n   * @param {boolean} [snapToBottom=false] If `true`, the viewport is scrolled to show the cell at the bottom of the table.\n   * However, if the cell's height is greater than the table's viewport height, the cell is snapped to the top edge.\n   * @param {boolean} [snapToRight=false] If `true`, the viewport is scrolled to show the cell at the right side of the table.\n   * However, if the cell is wider than the table's viewport width, the cell is snapped to the left edge (or to the right edge, if the layout direction is set to `rtl`).\n   * @param {boolean} [considerHiddenIndexes=true] If `true`, we handle visual indexes, otherwise we handle only indexes which\n   * may be rendered when they are in the viewport (we don't consider hidden indexes as they aren't rendered).\n   * @returns {boolean} `true` if scroll was successful, `false` otherwise.\n   */\n  this.scrollViewportTo = function (row, column) {\n    var snapToBottom = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var snapToRight = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    var considerHiddenIndexes = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n    var snapToTop = !snapToBottom;\n    var snapToLeft = !snapToRight;\n    var renderableRow = row;\n    var renderableColumn = column;\n    if (considerHiddenIndexes) {\n      var _isRowInteger = Number.isInteger(row);\n      var _isColumnInteger = Number.isInteger(column);\n      var visualRowToScroll = _isRowInteger ? getIndexToScroll(this.rowIndexMapper, row) : void 0;\n      var visualColumnToScroll = _isColumnInteger ? getIndexToScroll(this.columnIndexMapper, column) : void 0;\n      if (visualRowToScroll === null || visualColumnToScroll === null) {\n        return false;\n      }\n      renderableRow = _isRowInteger ? instance.rowIndexMapper.getRenderableFromVisualIndex(visualRowToScroll) : void 0;\n      renderableColumn = _isColumnInteger ? instance.columnIndexMapper.getRenderableFromVisualIndex(visualColumnToScroll) : void 0;\n    }\n    var isRowInteger = Number.isInteger(renderableRow);\n    var isColumnInteger = Number.isInteger(renderableColumn);\n    if (isRowInteger && isColumnInteger) {\n      return instance.view.scrollViewport(instance._createCellCoords(renderableRow, renderableColumn), snapToTop, snapToRight, snapToBottom, snapToLeft);\n    }\n    if (isRowInteger && isColumnInteger === false) {\n      return instance.view.scrollViewportVertically(renderableRow, snapToTop, snapToBottom);\n    }\n    if (isColumnInteger && isRowInteger === false) {\n      return instance.view.scrollViewportHorizontally(renderableColumn, snapToRight, snapToLeft);\n    }\n    return false;\n  };\n\n  /**\n   * Removes the table from the DOM and destroys the instance of the Handsontable.\n   *\n   * @memberof Core#\n   * @function destroy\n   * @fires Hooks#afterDestroy\n   */\n  this.destroy = function () {\n    instance._clearTimeouts();\n    instance._clearImmediates();\n    if (instance.view) {\n      // in case HT is destroyed before initialization has finished\n      instance.view.destroy();\n    }\n    if (dataSource) {\n      dataSource.destroy();\n    }\n    dataSource = null;\n    this.getShortcutManager().destroy();\n    metaManager.clearCache();\n    if (isRootInstance(instance)) {\n      var licenseInfo = this.rootDocument.querySelector('.hot-display-license-info');\n      if (licenseInfo) {\n        licenseInfo.parentNode.removeChild(licenseInfo);\n      }\n    }\n    empty(instance.rootElement);\n    eventManager.destroy();\n    if (editorManager) {\n      editorManager.destroy();\n    }\n\n    // The plugin's `destroy` method is called as a consequence and it should handle\n    // unregistration of plugin's maps. Some unregistered maps reset the cache.\n    instance.batchExecution(function () {\n      instance.rowIndexMapper.unregisterAll();\n      instance.columnIndexMapper.unregisterAll();\n      pluginsRegistry.getItems().forEach(function (_ref20) {\n        var _ref21 = _slicedToArray(_ref20, 2),\n          plugin = _ref21[1];\n        plugin.destroy();\n      });\n      pluginsRegistry.clear();\n      instance.runHooks('afterDestroy');\n    }, true);\n    Hooks.getSingleton().destroy(instance);\n    objectEach(instance, function (property, key, obj) {\n      // replace instance methods with post mortem\n      if (isFunction(property)) {\n        obj[key] = postMortem(key);\n      } else if (key !== 'guid') {\n        // replace instance properties with null (restores memory)\n        // it should not be necessary but this prevents a memory leak side effects that show itself in Jasmine tests\n        obj[key] = null;\n      }\n    });\n    instance.isDestroyed = true;\n\n    // replace private properties with null (restores memory)\n    // it should not be necessary but this prevents a memory leak side effects that show itself in Jasmine tests\n    if (datamap) {\n      datamap.destroy();\n    }\n    instance.rowIndexMapper = null;\n    instance.columnIndexMapper = null;\n    datamap = null;\n    grid = null;\n    selection = null;\n    editorManager = null;\n    instance = null;\n  };\n\n  /**\n   * Replacement for all methods after the Handsontable was destroyed.\n   *\n   * @private\n   * @param {string} method The method name.\n   * @returns {Function}\n   */\n  function postMortem(method) {\n    return function () {\n      throw new Error(\"The \\\"\".concat(method, \"\\\" method cannot be called because this Handsontable instance has been destroyed\"));\n    };\n  }\n\n  /**\n   * Returns the active editor class instance.\n   *\n   * @memberof Core#\n   * @function getActiveEditor\n   * @returns {BaseEditor} The active editor instance.\n   */\n  this.getActiveEditor = function () {\n    return editorManager.getActiveEditor();\n  };\n\n  /**\n   * Returns plugin instance by provided its name.\n   *\n   * @memberof Core#\n   * @function getPlugin\n   * @param {string} pluginName The plugin name.\n   * @returns {BasePlugin|undefined} The plugin instance or undefined if there is no plugin.\n   */\n  this.getPlugin = function (pluginName) {\n    var unifiedPluginName = toUpperCaseFirst(pluginName);\n\n    // Workaround for the UndoRedo plugin which, currently doesn't follow the plugin architecture.\n    if (unifiedPluginName === 'UndoRedo') {\n      return this.undoRedo;\n    }\n    return pluginsRegistry.getItem(unifiedPluginName);\n  };\n\n  /**\n   * Returns name of the passed plugin.\n   *\n   * @private\n   * @memberof Core#\n   * @param {BasePlugin} plugin The plugin instance.\n   * @returns {string}\n   */\n  this.getPluginName = function (plugin) {\n    // Workaround for the UndoRedo plugin which, currently doesn't follow the plugin architecture.\n    if (plugin === this.undoRedo) {\n      return this.undoRedo.constructor.PLUGIN_KEY;\n    }\n    return pluginsRegistry.getId(plugin);\n  };\n\n  /**\n   * Returns the Handsontable instance.\n   *\n   * @memberof Core#\n   * @function getInstance\n   * @returns {Handsontable} The Handsontable instance.\n   */\n  this.getInstance = function () {\n    return instance;\n  };\n\n  /**\n   * Adds listener to the specified hook name (only for this Handsontable instance).\n   *\n   * @memberof Core#\n   * @function addHook\n   * @see Hooks#add\n   * @param {string} key Hook name (see {@link Hooks}).\n   * @param {Function|Array} callback Function or array of functions.\n   * @example\n   * ```js\n   * hot.addHook('beforeInit', myCallback);\n   * ```\n   */\n  this.addHook = function (key, callback) {\n    Hooks.getSingleton().add(key, callback, instance);\n  };\n\n  /**\n   * Check if for a specified hook name there are added listeners (only for this Handsontable instance). All available\n   * hooks you will find {@link Hooks}.\n   *\n   * @memberof Core#\n   * @function hasHook\n   * @see Hooks#has\n   * @param {string} key Hook name.\n   * @returns {boolean}\n   *\n   * @example\n   * ```js\n   * const hasBeforeInitListeners = hot.hasHook('beforeInit');\n   * ```\n   */\n  this.hasHook = function (key) {\n    return Hooks.getSingleton().has(key, instance) || Hooks.getSingleton().has(key);\n  };\n\n  /**\n   * Adds listener to specified hook name (only for this Handsontable instance). After the listener is triggered,\n   * it will be automatically removed.\n   *\n   * @memberof Core#\n   * @function addHookOnce\n   * @see Hooks#once\n   * @param {string} key Hook name (see {@link Hooks}).\n   * @param {Function|Array} callback Function or array of functions.\n   * @example\n   * ```js\n   * hot.addHookOnce('beforeInit', myCallback);\n   * ```\n   */\n  this.addHookOnce = function (key, callback) {\n    Hooks.getSingleton().once(key, callback, instance);\n  };\n\n  /**\n   * Removes the hook listener previously registered with {@link Core#addHook}.\n   *\n   * @memberof Core#\n   * @function removeHook\n   * @see Hooks#remove\n   * @param {string} key Hook name.\n   * @param {Function} callback Reference to the function which has been registered using {@link Core#addHook}.\n   *\n   * @example\n   * ```js\n   * hot.removeHook('beforeInit', myCallback);\n   * ```\n   */\n  this.removeHook = function (key, callback) {\n    Hooks.getSingleton().remove(key, callback, instance);\n  };\n\n  /**\n   * Run the callbacks for the hook provided in the `key` argument using the parameters given in the other arguments.\n   *\n   * @memberof Core#\n   * @function runHooks\n   * @see Hooks#run\n   * @param {string} key Hook name.\n   * @param {*} [p1] Argument passed to the callback.\n   * @param {*} [p2] Argument passed to the callback.\n   * @param {*} [p3] Argument passed to the callback.\n   * @param {*} [p4] Argument passed to the callback.\n   * @param {*} [p5] Argument passed to the callback.\n   * @param {*} [p6] Argument passed to the callback.\n   * @returns {*}\n   *\n   * @example\n   * ```js\n   * // Run built-in hook\n   * hot.runHooks('beforeInit');\n   * // Run custom hook\n   * hot.runHooks('customAction', 10, 'foo');\n   * ```\n   */\n  this.runHooks = function (key, p1, p2, p3, p4, p5, p6) {\n    return Hooks.getSingleton().run(instance, key, p1, p2, p3, p4, p5, p6);\n  };\n\n  /**\n   * Get language phrase for specified dictionary key.\n   *\n   * @memberof Core#\n   * @function getTranslatedPhrase\n   * @since 0.35.0\n   * @param {string} dictionaryKey Constant which is dictionary key.\n   * @param {*} extraArguments Arguments which will be handled by formatters.\n   * @returns {string}\n   */\n  this.getTranslatedPhrase = function (dictionaryKey, extraArguments) {\n    return getTranslatedPhrase(tableMeta.language, dictionaryKey, extraArguments);\n  };\n\n  /**\n   * Converts instance into outerHTML of HTMLTableElement.\n   *\n   * @memberof Core#\n   * @function toHTML\n   * @since 7.1.0\n   * @returns {string}\n   */\n  this.toHTML = function () {\n    return instanceToHTML(_this);\n  };\n\n  /**\n   * Converts instance into HTMLTableElement.\n   *\n   * @memberof Core#\n   * @function toTableElement\n   * @since 7.1.0\n   * @returns {HTMLTableElement}\n   */\n  this.toTableElement = function () {\n    var tempElement = _this.rootDocument.createElement('div');\n    tempElement.insertAdjacentHTML('afterbegin', instanceToHTML(_this));\n    return tempElement.firstElementChild;\n  };\n  this.timeouts = [];\n\n  /**\n   * Sets timeout. Purpose of this method is to clear all known timeouts when `destroy` method is called.\n   *\n   * @param {number|Function} handle Handler returned from setTimeout or function to execute (it will be automatically wraped\n   *                                 by setTimeout function).\n   * @param {number} [delay=0] If first argument is passed as a function this argument set delay of the execution of that function.\n   * @private\n   */\n  this._registerTimeout = function (handle) {\n    var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var handleFunc = handle;\n    if (typeof handleFunc === 'function') {\n      handleFunc = setTimeout(handleFunc, delay);\n    }\n    this.timeouts.push(handleFunc);\n  };\n\n  /**\n   * Clears all known timeouts.\n   *\n   * @private\n   */\n  this._clearTimeouts = function () {\n    arrayEach(this.timeouts, function (handler) {\n      clearTimeout(handler);\n    });\n  };\n  this.immediates = [];\n\n  /**\n   * Execute function execution to the next event loop cycle. Purpose of this method is to clear all known timeouts when `destroy` method is called.\n   *\n   * @param {Function} callback Function to be delayed in execution.\n   * @private\n   */\n  this._registerImmediate = function (callback) {\n    this.immediates.push(setImmediate(callback));\n  };\n\n  /**\n   * Clears all known timeouts.\n   *\n   * @private\n   */\n  this._clearImmediates = function () {\n    arrayEach(this.immediates, function (handler) {\n      clearImmediate(handler);\n    });\n  };\n\n  /**\n   * Refresh selection borders. This is temporary method relic after selection rewrite.\n   *\n   * @private\n   * @param {boolean} [revertOriginal=false] If `true`, the previous value will be restored. Otherwise, the edited value will be saved.\n   * @param {boolean} [prepareEditorIfNeeded=true] If `true` the editor under the selected cell will be prepared to open.\n   */\n  this._refreshBorders = function () {\n    var revertOriginal = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var prepareEditorIfNeeded = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    editorManager.destroyEditor(revertOriginal);\n    instance.view.render();\n    if (prepareEditorIfNeeded && selection.isSelected()) {\n      editorManager.prepareEditor();\n    }\n  };\n\n  /**\n   * Check if currently it is RTL direction.\n   *\n   * @private\n   * @memberof Core#\n   * @function isRtl\n   * @returns {boolean} True if RTL.\n   */\n  this.isRtl = function () {\n    return instance.rootWindow.getComputedStyle(instance.rootElement).direction === 'rtl';\n  };\n\n  /**\n   * Check if currently it is LTR direction.\n   *\n   * @private\n   * @memberof Core#\n   * @function isLtr\n   * @returns {boolean} True if LTR.\n   */\n  this.isLtr = function () {\n    return !instance.isRtl();\n  };\n\n  /**\n   * Returns 1 for LTR; -1 for RTL. Useful for calculations.\n   *\n   * @private\n   * @memberof Core#\n   * @function getDirectionFactor\n   * @returns {number} Returns 1 for LTR; -1 for RTL.\n   */\n  this.getDirectionFactor = function () {\n    return instance.isLtr() ? 1 : -1;\n  };\n  var shortcutManager = createShortcutManager({\n    handleEvent: function handleEvent(event) {\n      var isListening = instance.isListening();\n      var isKeyboardEventWithKey = (event === null || event === void 0 ? void 0 : event.key) !== void 0;\n      return isListening && isKeyboardEventWithKey;\n    },\n    beforeKeyDown: function beforeKeyDown(event) {\n      return _this.runHooks('beforeKeyDown', event);\n    },\n    afterKeyDown: function afterKeyDown(event) {\n      if (_this.isDestroyed) {\n        // Handsontable could be destroyed after performing action (executing a callback).\n        return;\n      }\n      instance.runHooks('afterDocumentKeyDown', event);\n    },\n    ownerWindow: this.rootWindow\n  });\n  this.addHook('beforeOnCellMouseDown', function (event) {\n    // Releasing keys as some browser/system shortcuts break events sequence (thus the `keyup` event isn't triggered).\n    if (event.ctrlKey === false && event.metaKey === false) {\n      shortcutManager.releasePressedKeys();\n    }\n  });\n\n  /**\n   * Returns instance of a manager responsible for handling shortcuts stored in some contexts. It run actions after\n   * pressing key combination in active Handsontable instance.\n   *\n   * @memberof Core#\n   * @since 12.0.0\n   * @function getShortcutManager\n   * @returns {ShortcutManager} Instance of {@link ShortcutManager}\n   */\n  this.getShortcutManager = function () {\n    return shortcutManager;\n  };\n  var gridContext = shortcutManager.addContext('grid');\n  var gridConfig = {\n    runOnlyIf: function runOnlyIf() {\n      return isDefined(instance.getSelected()) && instance.countRenderedRows() > 0 && instance.countRenderedCols() > 0;\n    },\n    group: SHORTCUTS_GROUP\n  };\n  shortcutManager.setActiveContextName('grid');\n  gridContext.addShortcuts([{\n    keys: [['Control/Meta', 'A']],\n    callback: function callback() {\n      instance.selectAll();\n    }\n  }, {\n    keys: [['Control/Meta', 'Enter']],\n    callback: function callback() {\n      var selectedRange = instance.getSelectedRange();\n      var _selectedRange$highli = selectedRange[selectedRange.length - 1].highlight,\n        highlightRow = _selectedRange$highli.row,\n        highlightColumn = _selectedRange$highli.col;\n      var valueToPopulate = instance.getDataAtCell(highlightRow, highlightColumn);\n      var cellValues = new Map();\n      for (var i = 0; i < selectedRange.length; i++) {\n        selectedRange[i].forAll(function (row, column) {\n          if (row >= 0 && column >= 0 && (row !== highlightRow || column !== highlightColumn)) {\n            var _instance$getCellMeta = instance.getCellMeta(row, column),\n              readOnly = _instance$getCellMeta.readOnly;\n            if (!readOnly) {\n              cellValues.set(\"\".concat(row, \"x\").concat(column), [row, column, valueToPopulate]);\n            }\n          }\n        });\n      }\n      instance.setDataAtCell(Array.from(cellValues.values()));\n    },\n    runOnlyIf: function runOnlyIf() {\n      return instance.getSelectedRangeLast().getCellsCount() > 1;\n    }\n  }, {\n    keys: [['ArrowUp']],\n    callback: function callback() {\n      selection.transformStart(-1, 0);\n    }\n  }, {\n    keys: [['ArrowUp', 'Control/Meta']],\n    captureCtrl: true,\n    callback: function callback() {\n      selection.setRangeStart(instance._createCellCoords(instance.rowIndexMapper.getNearestNotHiddenIndex(0, 1), instance.getSelectedRangeLast().highlight.col));\n    }\n  }, {\n    keys: [['ArrowUp', 'Shift']],\n    callback: function callback() {\n      selection.transformEnd(-1, 0);\n    }\n  }, {\n    keys: [['ArrowUp', 'Shift', 'Control/Meta']],\n    captureCtrl: true,\n    callback: function callback() {\n      var _instance$getSelected = instance.getSelectedRangeLast(),\n        from = _instance$getSelected.from,\n        to = _instance$getSelected.to;\n      var row = instance.rowIndexMapper.getNearestNotHiddenIndex(0, 1);\n      selection.setRangeStart(from.clone());\n      selection.setRangeEnd(instance._createCellCoords(row, to.col));\n    },\n    runOnlyIf: function runOnlyIf() {\n      return !(instance.selection.isSelectedByCorner() || instance.selection.isSelectedByColumnHeader());\n    }\n  }, {\n    keys: [['ArrowDown']],\n    callback: function callback() {\n      selection.transformStart(1, 0);\n    }\n  }, {\n    keys: [['ArrowDown', 'Control/Meta']],\n    captureCtrl: true,\n    callback: function callback() {\n      selection.setRangeStart(instance._createCellCoords(instance.rowIndexMapper.getNearestNotHiddenIndex(instance.countRows() - 1, -1), instance.getSelectedRangeLast().highlight.col));\n    }\n  }, {\n    keys: [['ArrowDown', 'Shift']],\n    callback: function callback() {\n      selection.transformEnd(1, 0);\n    }\n  }, {\n    keys: [['ArrowDown', 'Shift', 'Control/Meta']],\n    captureCtrl: true,\n    callback: function callback() {\n      var _instance$getSelected2 = instance.getSelectedRangeLast(),\n        from = _instance$getSelected2.from,\n        to = _instance$getSelected2.to;\n      var row = instance.rowIndexMapper.getNearestNotHiddenIndex(instance.countRows() - 1, -1);\n      selection.setRangeStart(from.clone());\n      selection.setRangeEnd(instance._createCellCoords(row, to.col));\n    },\n    runOnlyIf: function runOnlyIf() {\n      return !(instance.selection.isSelectedByCorner() || instance.selection.isSelectedByColumnHeader());\n    }\n  }, {\n    keys: [['ArrowLeft']],\n    callback: function callback() {\n      selection.transformStart(0, -1 * instance.getDirectionFactor());\n    }\n  }, {\n    keys: [['ArrowLeft', 'Control/Meta']],\n    captureCtrl: true,\n    callback: function callback() {\n      var _instance$columnIndex;\n      var row = instance.getSelectedRangeLast().highlight.row;\n      var column = (_instance$columnIndex = instance.columnIndexMapper).getNearestNotHiddenIndex.apply(_instance$columnIndex, _toConsumableArray(instance.isRtl() ? [instance.countCols() - 1, -1] : [0, 1]));\n      selection.setRangeStart(instance._createCellCoords(row, column));\n    }\n  }, {\n    keys: [['ArrowLeft', 'Shift']],\n    callback: function callback() {\n      selection.transformEnd(0, -1 * instance.getDirectionFactor());\n    }\n  }, {\n    keys: [['ArrowLeft', 'Shift', 'Control/Meta']],\n    captureCtrl: true,\n    callback: function callback() {\n      var _instance$columnIndex2;\n      var _instance$getSelected3 = instance.getSelectedRangeLast(),\n        from = _instance$getSelected3.from,\n        to = _instance$getSelected3.to;\n      var column = (_instance$columnIndex2 = instance.columnIndexMapper).getNearestNotHiddenIndex.apply(_instance$columnIndex2, _toConsumableArray(instance.isRtl() ? [instance.countCols() - 1, -1] : [0, 1]));\n      selection.setRangeStart(from.clone());\n      selection.setRangeEnd(instance._createCellCoords(to.row, column));\n    },\n    runOnlyIf: function runOnlyIf() {\n      return !(instance.selection.isSelectedByCorner() || instance.selection.isSelectedByRowHeader());\n    }\n  }, {\n    keys: [['ArrowRight']],\n    callback: function callback() {\n      selection.transformStart(0, instance.getDirectionFactor());\n    }\n  }, {\n    keys: [['ArrowRight', 'Control/Meta']],\n    captureCtrl: true,\n    callback: function callback() {\n      var _instance$columnIndex3;\n      var row = instance.getSelectedRangeLast().highlight.row;\n      var column = (_instance$columnIndex3 = instance.columnIndexMapper).getNearestNotHiddenIndex.apply(_instance$columnIndex3, _toConsumableArray(instance.isRtl() ? [0, 1] : [instance.countCols() - 1, -1]));\n      selection.setRangeStart(instance._createCellCoords(row, column));\n    }\n  }, {\n    keys: [['ArrowRight', 'Shift']],\n    callback: function callback() {\n      selection.transformEnd(0, instance.getDirectionFactor());\n    }\n  }, {\n    keys: [['ArrowRight', 'Shift', 'Control/Meta']],\n    captureCtrl: true,\n    callback: function callback() {\n      var _instance$columnIndex4;\n      var _instance$getSelected4 = instance.getSelectedRangeLast(),\n        from = _instance$getSelected4.from,\n        to = _instance$getSelected4.to;\n      var column = (_instance$columnIndex4 = instance.columnIndexMapper).getNearestNotHiddenIndex.apply(_instance$columnIndex4, _toConsumableArray(instance.isRtl() ? [0, 1] : [instance.countCols() - 1, -1]));\n      selection.setRangeStart(from.clone());\n      selection.setRangeEnd(instance._createCellCoords(to.row, column));\n    },\n    runOnlyIf: function runOnlyIf() {\n      return !(instance.selection.isSelectedByCorner() || instance.selection.isSelectedByRowHeader());\n    }\n  }, {\n    keys: [['Home']],\n    captureCtrl: true,\n    callback: function callback() {\n      var fixedColumns = parseInt(instance.getSettings().fixedColumnsStart, 10);\n      var row = instance.getSelectedRangeLast().highlight.row;\n      var column = instance.columnIndexMapper.getNearestNotHiddenIndex(fixedColumns, 1);\n      selection.setRangeStart(instance._createCellCoords(row, column));\n    },\n    runOnlyIf: function runOnlyIf() {\n      return instance.view.isMainTableNotFullyCoveredByOverlays();\n    }\n  }, {\n    keys: [['Home', 'Shift']],\n    callback: function callback() {\n      selection.setRangeEnd(instance._createCellCoords(selection.selectedRange.current().from.row, instance.columnIndexMapper.getNearestNotHiddenIndex(0, 1)));\n    }\n  }, {\n    keys: [['Home', 'Control/Meta']],\n    captureCtrl: true,\n    callback: function callback() {\n      var fixedRows = parseInt(instance.getSettings().fixedRowsTop, 10);\n      var fixedColumns = parseInt(instance.getSettings().fixedColumnsStart, 10);\n      var row = instance.rowIndexMapper.getNearestNotHiddenIndex(fixedRows, 1);\n      var column = instance.columnIndexMapper.getNearestNotHiddenIndex(fixedColumns, 1);\n      selection.setRangeStart(instance._createCellCoords(row, column));\n    },\n    runOnlyIf: function runOnlyIf() {\n      return instance.view.isMainTableNotFullyCoveredByOverlays();\n    }\n  }, {\n    keys: [['End']],\n    captureCtrl: true,\n    callback: function callback() {\n      selection.setRangeStart(instance._createCellCoords(instance.getSelectedRangeLast().highlight.row, instance.columnIndexMapper.getNearestNotHiddenIndex(instance.countCols() - 1, -1)));\n    },\n    runOnlyIf: function runOnlyIf() {\n      return instance.view.isMainTableNotFullyCoveredByOverlays();\n    }\n  }, {\n    keys: [['End', 'Shift']],\n    callback: function callback() {\n      selection.setRangeEnd(instance._createCellCoords(selection.selectedRange.current().from.row, instance.columnIndexMapper.getNearestNotHiddenIndex(instance.countCols() - 1, -1)));\n    }\n  }, {\n    keys: [['End', 'Control/Meta']],\n    captureCtrl: true,\n    callback: function callback() {\n      var fixedRows = parseInt(instance.getSettings().fixedRowsBottom, 10);\n      var row = instance.rowIndexMapper.getNearestNotHiddenIndex(instance.countRows() - fixedRows - 1, -1);\n      var column = instance.columnIndexMapper.getNearestNotHiddenIndex(instance.countCols() - 1, -1);\n      selection.setRangeStart(instance._createCellCoords(row, column));\n    },\n    runOnlyIf: function runOnlyIf() {\n      return instance.view.isMainTableNotFullyCoveredByOverlays();\n    }\n  }, {\n    keys: [['PageUp']],\n    callback: function callback() {\n      selection.transformStart(-instance.countVisibleRows(), 0);\n    }\n  }, {\n    keys: [['PageUp', 'Shift']],\n    callback: function callback() {\n      var _instance$getSelected5 = instance.getSelectedRangeLast(),\n        to = _instance$getSelected5.to;\n      var nextRowIndexToSelect = Math.max(to.row - instance.countVisibleRows(), 0);\n      var row = instance.rowIndexMapper.getNearestNotHiddenIndex(nextRowIndexToSelect, 1);\n      if (row !== null) {\n        var coords = instance._createCellCoords(row, to.col);\n        var scrollPadding = to.row - instance.view.getFirstFullyVisibleRow();\n        var nextVerticalScroll = Math.max(coords.row - scrollPadding, 0);\n        selection.setRangeEnd(coords);\n        instance.scrollViewportTo(nextVerticalScroll);\n      }\n    }\n  }, {\n    keys: [['PageDown']],\n    callback: function callback() {\n      selection.transformStart(instance.countVisibleRows(), 0);\n    }\n  }, {\n    keys: [['PageDown', 'Shift']],\n    callback: function callback() {\n      var _instance$getSelected6 = instance.getSelectedRangeLast(),\n        to = _instance$getSelected6.to;\n      var nextRowIndexToSelect = Math.min(to.row + instance.countVisibleRows(), instance.countRows() - 1);\n      var row = instance.rowIndexMapper.getNearestNotHiddenIndex(nextRowIndexToSelect, -1);\n      if (row !== null) {\n        var coords = instance._createCellCoords(row, to.col);\n        var scrollPadding = to.row - instance.view.getFirstFullyVisibleRow();\n        var nextVerticalScroll = Math.min(coords.row - scrollPadding, instance.countRows() - 1);\n        selection.setRangeEnd(coords);\n        instance.scrollViewportTo(nextVerticalScroll);\n      }\n    }\n  }, {\n    keys: [['Tab']],\n    callback: function callback(event) {\n      var tabMoves = typeof tableMeta.tabMoves === 'function' ? tableMeta.tabMoves(event) : tableMeta.tabMoves;\n      selection.transformStart(tabMoves.row, tabMoves.col, true);\n    }\n  }, {\n    keys: [['Shift', 'Tab']],\n    callback: function callback(event) {\n      var tabMoves = typeof tableMeta.tabMoves === 'function' ? tableMeta.tabMoves(event) : tableMeta.tabMoves;\n      selection.transformStart(-tabMoves.row, -tabMoves.col);\n    }\n  }], gridConfig);\n  getPluginsNames().forEach(function (pluginName) {\n    var PluginClass = getPlugin(pluginName);\n    pluginsRegistry.addItem(pluginName, new PluginClass(_this));\n  });\n  Hooks.getSingleton().run(instance, 'construct');\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}