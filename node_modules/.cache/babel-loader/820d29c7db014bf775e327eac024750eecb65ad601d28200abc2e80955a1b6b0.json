{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nimport Hooks from \"../../../pluginHooks.mjs\";\nimport { hasOwnProperty } from \"../../../helpers/object.mjs\";\nimport { isFunction } from \"../../../helpers/function.mjs\";\n/**\n * @class DynamicCellMetaMod\n *\n * The `DynamicCellMetaMod` modifier allows for extending cell meta objects\n * (returned by `getCellMeta()` from `MetaManager`)\n * by user-specific properties.\n *\n * The user-specific properties can be added and changed dynamically,\n * either by Handsontable's hooks (`beforeGetCellMeta` and`afterGetCellMeta`),\n * or by Handsontable's `cells` option.\n *\n * The `getCellMeta()` method is used widely throughout the source code.\n * To boost the method's execution time,\n * the logic is triggered only once per one Handsontable slow render cycle.\n */\nexport var DynamicCellMetaMod = /*#__PURE__*/function () {\n  function DynamicCellMetaMod(metaManager) {\n    var _this = this;\n    _classCallCheck(this, DynamicCellMetaMod);\n    /**\n     * @type {MetaManager}\n     */\n    this.metaManager = metaManager;\n    /**\n     * @type {Map}\n     */\n    this.metaSyncMemo = new Map();\n    metaManager.addLocalHook('afterGetCellMeta', function (cellMeta) {\n      return _this.extendCellMeta(cellMeta);\n    });\n    Hooks.getSingleton().add('beforeRender', function (forceFullRender) {\n      if (forceFullRender) {\n        _this.metaSyncMemo.clear();\n      }\n    }, this.metaManager.hot);\n  }\n\n  /**\n   * Extends the cell meta object by user-specific properties.\n   *\n   * The cell meta object can be extended dynamically,\n   * either by Handsontable's hooks (`beforeGetCellMeta` and`afterGetCellMeta`),\n   * or by Handsontable's `cells` option.\n   *\n   * To boost performance, the extending process is triggered only once per one slow Handsontable render cycle.\n   *\n   * @param {object} cellMeta The cell meta object.\n   */\n  _createClass(DynamicCellMetaMod, [{\n    key: \"extendCellMeta\",\n    value: function extendCellMeta(cellMeta) {\n      var _this$metaSyncMemo$ge;\n      var physicalRow = cellMeta.row,\n        physicalColumn = cellMeta.col;\n      if ((_this$metaSyncMemo$ge = this.metaSyncMemo.get(physicalRow)) !== null && _this$metaSyncMemo$ge !== void 0 && _this$metaSyncMemo$ge.has(physicalColumn)) {\n        return;\n      }\n      var visualRow = cellMeta.visualRow,\n        visualCol = cellMeta.visualCol;\n      var hot = this.metaManager.hot;\n      var prop = hot.colToProp(visualCol);\n      cellMeta.prop = prop;\n      hot.runHooks('beforeGetCellMeta', visualRow, visualCol, cellMeta);\n\n      // extend a `type` value, added or changed in the `beforeGetCellMeta` hook\n      var cellType = hasOwnProperty(cellMeta, 'type') ? cellMeta.type : null;\n      var cellSettings = isFunction(cellMeta.cells) ? cellMeta.cells(physicalRow, physicalColumn, prop) : null;\n      if (cellType) {\n        if (cellSettings) {\n          var _cellSettings$type;\n          cellSettings.type = (_cellSettings$type = cellSettings.type) !== null && _cellSettings$type !== void 0 ? _cellSettings$type : cellType;\n        } else {\n          cellSettings = {\n            type: cellType\n          };\n        }\n      }\n      if (cellSettings) {\n        this.metaManager.updateCellMeta(physicalRow, physicalColumn, cellSettings);\n      }\n      hot.runHooks('afterGetCellMeta', visualRow, visualCol, cellMeta);\n      if (!this.metaSyncMemo.has(physicalRow)) {\n        this.metaSyncMemo.set(physicalRow, new Set());\n      }\n      this.metaSyncMemo.get(physicalRow).add(physicalColumn);\n    }\n  }]);\n  return DynamicCellMetaMod;\n}();","map":{"version":3,"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","_toPropertyKey","key","_createClass","protoProps","staticProps","arg","_toPrimitive","String","input","hint","prim","toPrimitive","undefined","res","call","Number","Hooks","hasOwnProperty","isFunction","DynamicCellMetaMod","metaManager","_this","metaSyncMemo","Map","addLocalHook","cellMeta","extendCellMeta","getSingleton","add","forceFullRender","clear","hot","value","_this$metaSyncMemo$ge","physicalRow","row","physicalColumn","col","get","has","visualRow","visualCol","prop","colToProp","runHooks","cellType","type","cellSettings","cells","_cellSettings$type","updateCellMeta","set","Set"],"sources":["/home/rstorey/wwwdev/Blucktool/node_modules/handsontable/dataMap/metaManager/mods/dynamicCellMeta.mjs"],"sourcesContent":["function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.symbol.to-primitive.js\";\nimport \"core-js/modules/es.date.to-primitive.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport Hooks from \"../../../pluginHooks.mjs\";\nimport { hasOwnProperty } from \"../../../helpers/object.mjs\";\nimport { isFunction } from \"../../../helpers/function.mjs\";\n/**\n * @class DynamicCellMetaMod\n *\n * The `DynamicCellMetaMod` modifier allows for extending cell meta objects\n * (returned by `getCellMeta()` from `MetaManager`)\n * by user-specific properties.\n *\n * The user-specific properties can be added and changed dynamically,\n * either by Handsontable's hooks (`beforeGetCellMeta` and`afterGetCellMeta`),\n * or by Handsontable's `cells` option.\n *\n * The `getCellMeta()` method is used widely throughout the source code.\n * To boost the method's execution time,\n * the logic is triggered only once per one Handsontable slow render cycle.\n */\nexport var DynamicCellMetaMod = /*#__PURE__*/function () {\n  function DynamicCellMetaMod(metaManager) {\n    var _this = this;\n    _classCallCheck(this, DynamicCellMetaMod);\n    /**\n     * @type {MetaManager}\n     */\n    this.metaManager = metaManager;\n    /**\n     * @type {Map}\n     */\n    this.metaSyncMemo = new Map();\n    metaManager.addLocalHook('afterGetCellMeta', function (cellMeta) {\n      return _this.extendCellMeta(cellMeta);\n    });\n    Hooks.getSingleton().add('beforeRender', function (forceFullRender) {\n      if (forceFullRender) {\n        _this.metaSyncMemo.clear();\n      }\n    }, this.metaManager.hot);\n  }\n\n  /**\n   * Extends the cell meta object by user-specific properties.\n   *\n   * The cell meta object can be extended dynamically,\n   * either by Handsontable's hooks (`beforeGetCellMeta` and`afterGetCellMeta`),\n   * or by Handsontable's `cells` option.\n   *\n   * To boost performance, the extending process is triggered only once per one slow Handsontable render cycle.\n   *\n   * @param {object} cellMeta The cell meta object.\n   */\n  _createClass(DynamicCellMetaMod, [{\n    key: \"extendCellMeta\",\n    value: function extendCellMeta(cellMeta) {\n      var _this$metaSyncMemo$ge;\n      var physicalRow = cellMeta.row,\n        physicalColumn = cellMeta.col;\n      if ((_this$metaSyncMemo$ge = this.metaSyncMemo.get(physicalRow)) !== null && _this$metaSyncMemo$ge !== void 0 && _this$metaSyncMemo$ge.has(physicalColumn)) {\n        return;\n      }\n      var visualRow = cellMeta.visualRow,\n        visualCol = cellMeta.visualCol;\n      var hot = this.metaManager.hot;\n      var prop = hot.colToProp(visualCol);\n      cellMeta.prop = prop;\n      hot.runHooks('beforeGetCellMeta', visualRow, visualCol, cellMeta);\n\n      // extend a `type` value, added or changed in the `beforeGetCellMeta` hook\n      var cellType = hasOwnProperty(cellMeta, 'type') ? cellMeta.type : null;\n      var cellSettings = isFunction(cellMeta.cells) ? cellMeta.cells(physicalRow, physicalColumn, prop) : null;\n      if (cellType) {\n        if (cellSettings) {\n          var _cellSettings$type;\n          cellSettings.type = (_cellSettings$type = cellSettings.type) !== null && _cellSettings$type !== void 0 ? _cellSettings$type : cellType;\n        } else {\n          cellSettings = {\n            type: cellType\n          };\n        }\n      }\n      if (cellSettings) {\n        this.metaManager.updateCellMeta(physicalRow, physicalColumn, cellSettings);\n      }\n      hot.runHooks('afterGetCellMeta', visualRow, visualCol, cellMeta);\n      if (!this.metaSyncMemo.has(physicalRow)) {\n        this.metaSyncMemo.set(physicalRow, new Set());\n      }\n      this.metaSyncMemo.get(physicalRow).add(physicalColumn);\n    }\n  }]);\n  return DynamicCellMetaMod;\n}();"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}