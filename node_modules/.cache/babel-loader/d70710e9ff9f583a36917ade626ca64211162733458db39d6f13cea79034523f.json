{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nimport { extend } from \"../../../helpers/object.mjs\";\nimport { extendByMetaType, assert, isUnsignedNumber } from \"../utils.mjs\";\nimport LazyFactoryMap from \"../lazyFactoryMap.mjs\";\n/* eslint-disable jsdoc/require-description-complete-sentence */\n/**\n * @class CellMeta\n *\n * The cell meta object is a root of all settings defined for the specific cell rendered by the\n * Handsontable. Each cell meta inherits settings from higher layers. When a property doesn't\n * exist in that layer, it is looked up through a prototype to the highest layer. Starting\n * from CellMeta -> ColumnMeta and ending to GlobalMeta, which stores default settings. Adding,\n * removing, or changing property in that object has no direct reflection on any other layers.\n *\n * +-------------+\n * │ GlobalMeta  │\n * │ (prototype) │\n * +-------------+\\\n *       │         \\\n *       │          \\\n *      \\│/         _\\|\n * +-------------+    +-------------+\n * │ TableMeta   │    │ ColumnMeta  │\n * │ (instance)  │    │ (prototype) │\n * +-------------+    +-------------+\n *                         │\n *                         │\n *                        \\│/\n *                    +-------------+\n *                    │  CellMeta   │\n *                    │ (instance)  │\n *                    +-------------+\n */\n/* eslint-enable jsdoc/require-description-complete-sentence */\nvar CellMeta = /*#__PURE__*/function () {\n  function CellMeta(columnMeta) {\n    var _this = this;\n    _classCallCheck(this, CellMeta);\n    /**\n     * Reference to the ColumnMeta layer. While creating new cell meta objects, all new objects\n     * inherit properties from the ColumnMeta layer.\n     *\n     * @type {ColumnMeta}\n     */\n    this.columnMeta = columnMeta;\n    /**\n     * Holder for cell meta objects, organized as a grid of LazyFactoryMap of LazyFactoryMaps.\n     * The access to the cell meta object is done through access to the row defined by the physical\n     * row index and then by accessing the second LazyFactory Map under the physical column index.\n     *\n     * @type {LazyFactoryMap<number, LazyFactoryMap<number, object>>}\n     */\n    this.metas = new LazyFactoryMap(function () {\n      return _this._createRow();\n    });\n  }\n\n  /**\n   * Updates cell meta object by merging settings with the current state.\n   *\n   * @param {number} physicalRow The physical row index which points what cell meta object is updated.\n   * @param {number} physicalColumn The physical column index which points what cell meta object is updated.\n   * @param {object} settings An object to merge with.\n   */\n  _createClass(CellMeta, [{\n    key: \"updateMeta\",\n    value: function updateMeta(physicalRow, physicalColumn, settings) {\n      var meta = this.getMeta(physicalRow, physicalColumn);\n      extend(meta, settings);\n      extendByMetaType(meta, settings);\n    }\n\n    /**\n     * Creates one or more rows at specific position.\n     *\n     * @param {number} physicalRow The physical row index which points from what position the row is added.\n     * @param {number} amount An amount of rows to add.\n     */\n  }, {\n    key: \"createRow\",\n    value: function createRow(physicalRow, amount) {\n      this.metas.insert(physicalRow, amount);\n    }\n\n    /**\n     * Creates one or more columns at specific position.\n     *\n     * @param {number} physicalColumn The physical column index which points from what position the column is added.\n     * @param {number} amount An amount of columns to add.\n     */\n  }, {\n    key: \"createColumn\",\n    value: function createColumn(physicalColumn, amount) {\n      for (var i = 0; i < this.metas.size(); i++) {\n        this.metas.obtain(i).insert(physicalColumn, amount);\n      }\n    }\n\n    /**\n     * Removes one or more rows from the collection.\n     *\n     * @param {number} physicalRow The physical row index which points from what position the row is removed.\n     * @param {number} amount An amount of rows to remove.\n     */\n  }, {\n    key: \"removeRow\",\n    value: function removeRow(physicalRow, amount) {\n      this.metas.remove(physicalRow, amount);\n    }\n\n    /**\n     * Removes one or more columns from the collection.\n     *\n     * @param {number} physicalColumn The physical column index which points from what position the column is removed.\n     * @param {number} amount An amount of columns to remove.\n     */\n  }, {\n    key: \"removeColumn\",\n    value: function removeColumn(physicalColumn, amount) {\n      for (var i = 0; i < this.metas.size(); i++) {\n        this.metas.obtain(i).remove(physicalColumn, amount);\n      }\n    }\n\n    /**\n     * Gets settings object for this layer.\n     *\n     * @param {number} physicalRow The physical row index.\n     * @param {number} physicalColumn The physical column index.\n     * @param {string} [key] If the key exists its value will be returned, otherwise the whole cell meta object.\n     * @returns {object}\n     */\n  }, {\n    key: \"getMeta\",\n    value: function getMeta(physicalRow, physicalColumn, key) {\n      var cellMeta = this.metas.obtain(physicalRow).obtain(physicalColumn);\n      if (key === void 0) {\n        return cellMeta;\n      }\n      return cellMeta[key];\n    }\n\n    /**\n     * Sets settings object for this layer defined by \"key\" property.\n     *\n     * @param {number} physicalRow The physical row index.\n     * @param {number} physicalColumn The physical column index.\n     * @param {string} key The property name to set.\n     * @param {*} value Value to save.\n     */\n  }, {\n    key: \"setMeta\",\n    value: function setMeta(physicalRow, physicalColumn, key, value) {\n      var _cellMeta$_automatica;\n      var cellMeta = this.metas.obtain(physicalRow).obtain(physicalColumn);\n      (_cellMeta$_automatica = cellMeta._automaticallyAssignedMetaProps) === null || _cellMeta$_automatica === void 0 ? void 0 : _cellMeta$_automatica.delete(key);\n      cellMeta[key] = value;\n    }\n\n    /**\n     * Removes a property defined by the \"key\" argument from the cell meta object.\n     *\n     * @param {number} physicalRow The physical row index.\n     * @param {number} physicalColumn The physical column index.\n     * @param {string} key The property name to remove.\n     */\n  }, {\n    key: \"removeMeta\",\n    value: function removeMeta(physicalRow, physicalColumn, key) {\n      var cellMeta = this.metas.obtain(physicalRow).obtain(physicalColumn);\n      delete cellMeta[key];\n    }\n\n    /**\n     * Returns all cell meta objects that were created during the Handsontable operation. As cell meta\n     * objects are created lazy, the length of the returned collection depends on how and when the\n     * table has asked for access to that meta objects.\n     *\n     * @returns {object[]}\n     */\n  }, {\n    key: \"getMetas\",\n    value: function getMetas() {\n      var metas = [];\n      var rows = Array.from(this.metas.values());\n      for (var row = 0; row < rows.length; row++) {\n        metas.push.apply(metas, _toConsumableArray(rows[row].values()));\n      }\n      return metas;\n    }\n\n    /**\n     * Returns all cell meta objects that were created during the Handsontable operation but for\n     * specific row index.\n     *\n     * @param {number} physicalRow The physical row index.\n     * @returns {object[]}\n     */\n  }, {\n    key: \"getMetasAtRow\",\n    value: function getMetasAtRow(physicalRow) {\n      assert(function () {\n        return isUnsignedNumber(physicalRow);\n      }, 'Expecting an unsigned number.');\n      var rowsMeta = new Map(this.metas);\n      return rowsMeta.has(physicalRow) ? Array.from(rowsMeta.get(physicalRow).values()) : [];\n    }\n\n    /**\n     * Clears all saved cell meta objects.\n     */\n  }, {\n    key: \"clearCache\",\n    value: function clearCache() {\n      this.metas.clear();\n    }\n\n    /**\n     * Creates and returns new structure for cell meta objects stored in columnar axis.\n     *\n     * @private\n     * @returns {object}\n     */\n  }, {\n    key: \"_createRow\",\n    value: function _createRow() {\n      var _this2 = this;\n      return new LazyFactoryMap(function (physicalColumn) {\n        return _this2._createMeta(physicalColumn);\n      });\n    }\n\n    /**\n     * Creates and returns new cell meta object with properties inherited from the column meta layer.\n     *\n     * @private\n     * @param {number} physicalColumn The physical column index.\n     * @returns {object}\n     */\n  }, {\n    key: \"_createMeta\",\n    value: function _createMeta(physicalColumn) {\n      var ColumnMeta = this.columnMeta.getMetaConstructor(physicalColumn);\n      return new ColumnMeta();\n    }\n  }]);\n  return CellMeta;\n}();\nexport { CellMeta as default };","map":{"version":3,"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","TypeError","o","minLen","_arrayLikeToArray","n","Object","toString","call","slice","name","Array","from","test","iter","isArray","len","length","i","arr2","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","_toPropertyKey","key","_createClass","protoProps","staticProps","arg","_toPrimitive","String","input","hint","prim","toPrimitive","undefined","res","Number","extend","extendByMetaType","assert","isUnsignedNumber","LazyFactoryMap","CellMeta","columnMeta","_this","metas","_createRow","value","updateMeta","physicalRow","physicalColumn","settings","meta","getMeta","createRow","amount","insert","createColumn","size","obtain","removeRow","remove","removeColumn","cellMeta","setMeta","_cellMeta$_automatica","_automaticallyAssignedMetaProps","delete","removeMeta","getMetas","rows","values","row","push","apply","getMetasAtRow","rowsMeta","Map","has","get","clearCache","clear","_this2","_createMeta","ColumnMeta","getMetaConstructor","default"],"sources":["/home/rstorey/wwwdev/Blucktool/node_modules/handsontable/dataMap/metaManager/metaLayers/cellMeta.mjs"],"sourcesContent":["function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.symbol.to-primitive.js\";\nimport \"core-js/modules/es.date.to-primitive.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport { extend } from \"../../../helpers/object.mjs\";\nimport { extendByMetaType, assert, isUnsignedNumber } from \"../utils.mjs\";\nimport LazyFactoryMap from \"../lazyFactoryMap.mjs\";\n/* eslint-disable jsdoc/require-description-complete-sentence */\n/**\n * @class CellMeta\n *\n * The cell meta object is a root of all settings defined for the specific cell rendered by the\n * Handsontable. Each cell meta inherits settings from higher layers. When a property doesn't\n * exist in that layer, it is looked up through a prototype to the highest layer. Starting\n * from CellMeta -> ColumnMeta and ending to GlobalMeta, which stores default settings. Adding,\n * removing, or changing property in that object has no direct reflection on any other layers.\n *\n * +-------------+\n * │ GlobalMeta  │\n * │ (prototype) │\n * +-------------+\\\n *       │         \\\n *       │          \\\n *      \\│/         _\\|\n * +-------------+    +-------------+\n * │ TableMeta   │    │ ColumnMeta  │\n * │ (instance)  │    │ (prototype) │\n * +-------------+    +-------------+\n *                         │\n *                         │\n *                        \\│/\n *                    +-------------+\n *                    │  CellMeta   │\n *                    │ (instance)  │\n *                    +-------------+\n */\n/* eslint-enable jsdoc/require-description-complete-sentence */\nvar CellMeta = /*#__PURE__*/function () {\n  function CellMeta(columnMeta) {\n    var _this = this;\n    _classCallCheck(this, CellMeta);\n    /**\n     * Reference to the ColumnMeta layer. While creating new cell meta objects, all new objects\n     * inherit properties from the ColumnMeta layer.\n     *\n     * @type {ColumnMeta}\n     */\n    this.columnMeta = columnMeta;\n    /**\n     * Holder for cell meta objects, organized as a grid of LazyFactoryMap of LazyFactoryMaps.\n     * The access to the cell meta object is done through access to the row defined by the physical\n     * row index and then by accessing the second LazyFactory Map under the physical column index.\n     *\n     * @type {LazyFactoryMap<number, LazyFactoryMap<number, object>>}\n     */\n    this.metas = new LazyFactoryMap(function () {\n      return _this._createRow();\n    });\n  }\n\n  /**\n   * Updates cell meta object by merging settings with the current state.\n   *\n   * @param {number} physicalRow The physical row index which points what cell meta object is updated.\n   * @param {number} physicalColumn The physical column index which points what cell meta object is updated.\n   * @param {object} settings An object to merge with.\n   */\n  _createClass(CellMeta, [{\n    key: \"updateMeta\",\n    value: function updateMeta(physicalRow, physicalColumn, settings) {\n      var meta = this.getMeta(physicalRow, physicalColumn);\n      extend(meta, settings);\n      extendByMetaType(meta, settings);\n    }\n\n    /**\n     * Creates one or more rows at specific position.\n     *\n     * @param {number} physicalRow The physical row index which points from what position the row is added.\n     * @param {number} amount An amount of rows to add.\n     */\n  }, {\n    key: \"createRow\",\n    value: function createRow(physicalRow, amount) {\n      this.metas.insert(physicalRow, amount);\n    }\n\n    /**\n     * Creates one or more columns at specific position.\n     *\n     * @param {number} physicalColumn The physical column index which points from what position the column is added.\n     * @param {number} amount An amount of columns to add.\n     */\n  }, {\n    key: \"createColumn\",\n    value: function createColumn(physicalColumn, amount) {\n      for (var i = 0; i < this.metas.size(); i++) {\n        this.metas.obtain(i).insert(physicalColumn, amount);\n      }\n    }\n\n    /**\n     * Removes one or more rows from the collection.\n     *\n     * @param {number} physicalRow The physical row index which points from what position the row is removed.\n     * @param {number} amount An amount of rows to remove.\n     */\n  }, {\n    key: \"removeRow\",\n    value: function removeRow(physicalRow, amount) {\n      this.metas.remove(physicalRow, amount);\n    }\n\n    /**\n     * Removes one or more columns from the collection.\n     *\n     * @param {number} physicalColumn The physical column index which points from what position the column is removed.\n     * @param {number} amount An amount of columns to remove.\n     */\n  }, {\n    key: \"removeColumn\",\n    value: function removeColumn(physicalColumn, amount) {\n      for (var i = 0; i < this.metas.size(); i++) {\n        this.metas.obtain(i).remove(physicalColumn, amount);\n      }\n    }\n\n    /**\n     * Gets settings object for this layer.\n     *\n     * @param {number} physicalRow The physical row index.\n     * @param {number} physicalColumn The physical column index.\n     * @param {string} [key] If the key exists its value will be returned, otherwise the whole cell meta object.\n     * @returns {object}\n     */\n  }, {\n    key: \"getMeta\",\n    value: function getMeta(physicalRow, physicalColumn, key) {\n      var cellMeta = this.metas.obtain(physicalRow).obtain(physicalColumn);\n      if (key === void 0) {\n        return cellMeta;\n      }\n      return cellMeta[key];\n    }\n\n    /**\n     * Sets settings object for this layer defined by \"key\" property.\n     *\n     * @param {number} physicalRow The physical row index.\n     * @param {number} physicalColumn The physical column index.\n     * @param {string} key The property name to set.\n     * @param {*} value Value to save.\n     */\n  }, {\n    key: \"setMeta\",\n    value: function setMeta(physicalRow, physicalColumn, key, value) {\n      var _cellMeta$_automatica;\n      var cellMeta = this.metas.obtain(physicalRow).obtain(physicalColumn);\n      (_cellMeta$_automatica = cellMeta._automaticallyAssignedMetaProps) === null || _cellMeta$_automatica === void 0 ? void 0 : _cellMeta$_automatica.delete(key);\n      cellMeta[key] = value;\n    }\n\n    /**\n     * Removes a property defined by the \"key\" argument from the cell meta object.\n     *\n     * @param {number} physicalRow The physical row index.\n     * @param {number} physicalColumn The physical column index.\n     * @param {string} key The property name to remove.\n     */\n  }, {\n    key: \"removeMeta\",\n    value: function removeMeta(physicalRow, physicalColumn, key) {\n      var cellMeta = this.metas.obtain(physicalRow).obtain(physicalColumn);\n      delete cellMeta[key];\n    }\n\n    /**\n     * Returns all cell meta objects that were created during the Handsontable operation. As cell meta\n     * objects are created lazy, the length of the returned collection depends on how and when the\n     * table has asked for access to that meta objects.\n     *\n     * @returns {object[]}\n     */\n  }, {\n    key: \"getMetas\",\n    value: function getMetas() {\n      var metas = [];\n      var rows = Array.from(this.metas.values());\n      for (var row = 0; row < rows.length; row++) {\n        metas.push.apply(metas, _toConsumableArray(rows[row].values()));\n      }\n      return metas;\n    }\n\n    /**\n     * Returns all cell meta objects that were created during the Handsontable operation but for\n     * specific row index.\n     *\n     * @param {number} physicalRow The physical row index.\n     * @returns {object[]}\n     */\n  }, {\n    key: \"getMetasAtRow\",\n    value: function getMetasAtRow(physicalRow) {\n      assert(function () {\n        return isUnsignedNumber(physicalRow);\n      }, 'Expecting an unsigned number.');\n      var rowsMeta = new Map(this.metas);\n      return rowsMeta.has(physicalRow) ? Array.from(rowsMeta.get(physicalRow).values()) : [];\n    }\n\n    /**\n     * Clears all saved cell meta objects.\n     */\n  }, {\n    key: \"clearCache\",\n    value: function clearCache() {\n      this.metas.clear();\n    }\n\n    /**\n     * Creates and returns new structure for cell meta objects stored in columnar axis.\n     *\n     * @private\n     * @returns {object}\n     */\n  }, {\n    key: \"_createRow\",\n    value: function _createRow() {\n      var _this2 = this;\n      return new LazyFactoryMap(function (physicalColumn) {\n        return _this2._createMeta(physicalColumn);\n      });\n    }\n\n    /**\n     * Creates and returns new cell meta object with properties inherited from the column meta layer.\n     *\n     * @private\n     * @param {number} physicalColumn The physical column index.\n     * @returns {object}\n     */\n  }, {\n    key: \"_createMeta\",\n    value: function _createMeta(physicalColumn) {\n      var ColumnMeta = this.columnMeta.getMetaConstructor(physicalColumn);\n      return new ColumnMeta();\n    }\n  }]);\n  return CellMeta;\n}();\nexport { CellMeta as default };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}