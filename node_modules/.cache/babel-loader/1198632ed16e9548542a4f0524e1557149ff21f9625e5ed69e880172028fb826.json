{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nimport { RENDER_TYPE, FULLY_VISIBLE_TYPE } from \"./constants.mjs\";\nvar privatePool = new WeakMap();\n\n/**\n * Calculates indexes of columns to render OR columns that are visible.\n * To redo the calculation, you need to create a new calculator.\n *\n * @class ViewportColumnsCalculator\n */\nvar ViewportColumnsCalculator = /*#__PURE__*/function () {\n  /**\n   * @param {object} options Object with all options specified for column viewport calculation.\n   * @param {number} options.viewportSize Width of the viewport.\n   * @param {number} options.scrollOffset Current horizontal scroll position of the viewport.\n   * @param {number} options.totalItems Total number of columns.\n   * @param {Function} options.itemSizeFn Function that returns the width of the column at a given index (in px).\n   * @param {Function} options.overrideFn Function that changes calculated this.startRow, this.endRow (used by MergeCells plugin).\n   * @param {string} options.calculationType String which describes types of calculation which will be performed.\n   * @param {string} [options.stretchMode] Stretch mode 'all' or 'last'.\n   * @param {Function} [options.stretchingItemWidthFn] Function that returns the new width of the stretched column.\n   */\n  function ViewportColumnsCalculator() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      viewportSize = _ref.viewportSize,\n      scrollOffset = _ref.scrollOffset,\n      totalItems = _ref.totalItems,\n      itemSizeFn = _ref.itemSizeFn,\n      overrideFn = _ref.overrideFn,\n      calculationType = _ref.calculationType,\n      stretchMode = _ref.stretchMode,\n      _ref$stretchingItemWi = _ref.stretchingItemWidthFn,\n      stretchingItemWidthFn = _ref$stretchingItemWi === void 0 ? function (width) {\n        return width;\n      } : _ref$stretchingItemWi;\n    _classCallCheck(this, ViewportColumnsCalculator);\n    privatePool.set(this, {\n      viewportWidth: viewportSize,\n      scrollOffset: scrollOffset,\n      totalColumns: totalItems,\n      columnWidthFn: itemSizeFn,\n      overrideFn: overrideFn,\n      calculationType: calculationType,\n      stretchingColumnWidthFn: stretchingItemWidthFn\n    });\n\n    /**\n     * Number of rendered/visible columns.\n     *\n     * @type {number}\n     */\n    this.count = 0;\n\n    /**\n     * Index of the first rendered/visible column (can be overwritten using overrideFn).\n     *\n     * @type {number|null}\n     */\n    this.startColumn = null;\n\n    /**\n     * Index of the last rendered/visible column (can be overwritten using overrideFn).\n     *\n     * @type {null}\n     */\n    this.endColumn = null;\n\n    /**\n     * Position of the first rendered/visible column (in px).\n     *\n     * @type {number|null}\n     */\n    this.startPosition = null;\n    this.stretchAllRatio = 0;\n    this.stretchLastWidth = 0;\n    this.stretch = stretchMode;\n    this.totalTargetWidth = 0;\n    this.needVerifyLastColumnWidth = true;\n    this.stretchAllColumnsWidth = [];\n    this.calculate();\n  }\n\n  /**\n   * Calculates viewport.\n   */\n  _createClass(ViewportColumnsCalculator, [{\n    key: \"calculate\",\n    value: function calculate() {\n      var sum = 0;\n      var needReverse = true;\n      var startPositions = [];\n      var columnWidth;\n      var priv = privatePool.get(this);\n      var calculationType = priv.calculationType;\n      var overrideFn = priv.overrideFn;\n      var scrollOffset = priv.scrollOffset;\n      var totalColumns = priv.totalColumns;\n      var viewportWidth = priv.viewportWidth;\n      for (var i = 0; i < totalColumns; i++) {\n        columnWidth = this._getColumnWidth(i);\n        if (sum <= scrollOffset && calculationType !== FULLY_VISIBLE_TYPE) {\n          this.startColumn = i;\n        }\n\n        // +1 pixel for row header width compensation for horizontal scroll > 0\n        var compensatedViewportWidth = scrollOffset > 0 ? viewportWidth + 1 : viewportWidth;\n        if (sum >= scrollOffset && sum + (calculationType === FULLY_VISIBLE_TYPE ? columnWidth : 0) <= scrollOffset + compensatedViewportWidth) {\n          if (this.startColumn === null || this.startColumn === void 0) {\n            this.startColumn = i;\n          }\n          this.endColumn = i;\n        }\n        startPositions.push(sum);\n        sum += columnWidth;\n        if (calculationType !== FULLY_VISIBLE_TYPE) {\n          this.endColumn = i;\n        }\n        if (sum >= scrollOffset + viewportWidth) {\n          needReverse = false;\n          break;\n        }\n      }\n      if (this.endColumn === totalColumns - 1 && needReverse) {\n        this.startColumn = this.endColumn;\n        while (this.startColumn > 0) {\n          var viewportSum = startPositions[this.endColumn] + columnWidth - startPositions[this.startColumn - 1];\n          if (viewportSum <= viewportWidth || calculationType !== FULLY_VISIBLE_TYPE) {\n            this.startColumn -= 1;\n          }\n          if (viewportSum > viewportWidth) {\n            break;\n          }\n        }\n      }\n      if (calculationType === RENDER_TYPE && this.startColumn !== null && overrideFn) {\n        overrideFn(this);\n      }\n      this.startPosition = startPositions[this.startColumn];\n      if (this.startPosition === void 0) {\n        this.startPosition = null;\n      }\n\n      // If totalColumns exceeded its total columns size set endColumn to the latest item\n      if (totalColumns < this.endColumn) {\n        this.endColumn = totalColumns - 1;\n      }\n      if (this.startColumn !== null) {\n        this.count = this.endColumn - this.startColumn + 1;\n      }\n    }\n\n    /**\n     * Recalculate columns stretching.\n     *\n     * @param {number} totalWidth The total width of the table.\n     */\n  }, {\n    key: \"refreshStretching\",\n    value: function refreshStretching(totalWidth) {\n      if (this.stretch === 'none') {\n        return;\n      }\n      var totalColumnsWidth = totalWidth;\n      this.totalTargetWidth = totalColumnsWidth;\n      var priv = privatePool.get(this);\n      var totalColumns = priv.totalColumns;\n      var sumAll = 0;\n      for (var i = 0; i < totalColumns; i++) {\n        var columnWidth = this._getColumnWidth(i);\n        var permanentColumnWidth = priv.stretchingColumnWidthFn(void 0, i);\n        if (typeof permanentColumnWidth === 'number') {\n          totalColumnsWidth -= permanentColumnWidth;\n        } else {\n          sumAll += columnWidth;\n        }\n      }\n      var remainingSize = totalColumnsWidth - sumAll;\n      if (this.stretch === 'all' && remainingSize > 0) {\n        this.stretchAllRatio = totalColumnsWidth / sumAll;\n        this.stretchAllColumnsWidth = [];\n        this.needVerifyLastColumnWidth = true;\n      } else if (this.stretch === 'last' && totalColumnsWidth !== Infinity) {\n        var _columnWidth = this._getColumnWidth(totalColumns - 1);\n        var lastColumnWidth = remainingSize + _columnWidth;\n        this.stretchLastWidth = lastColumnWidth >= 0 ? lastColumnWidth : _columnWidth;\n      }\n    }\n\n    /**\n     * Get stretched column width based on stretchH (all or last) setting passed in handsontable instance.\n     *\n     * @param {number} column The visual column index.\n     * @param {number} baseWidth The default column width.\n     * @returns {number|null}\n     */\n  }, {\n    key: \"getStretchedColumnWidth\",\n    value: function getStretchedColumnWidth(column, baseWidth) {\n      var result = null;\n      if (this.stretch === 'all' && this.stretchAllRatio !== 0) {\n        result = this._getStretchedAllColumnWidth(column, baseWidth);\n      } else if (this.stretch === 'last' && this.stretchLastWidth !== 0) {\n        result = this._getStretchedLastColumnWidth(column);\n      }\n      return result;\n    }\n\n    /**\n     * @param {number} column The visual column index.\n     * @param {number} baseWidth The default column width.\n     * @returns {number}\n     * @private\n     */\n  }, {\n    key: \"_getStretchedAllColumnWidth\",\n    value: function _getStretchedAllColumnWidth(column, baseWidth) {\n      var sumRatioWidth = 0;\n      var priv = privatePool.get(this);\n      var totalColumns = priv.totalColumns;\n      if (!this.stretchAllColumnsWidth[column]) {\n        var stretchedWidth = Math.round(baseWidth * this.stretchAllRatio);\n        var newStretchedWidth = priv.stretchingColumnWidthFn(stretchedWidth, column);\n        if (newStretchedWidth === void 0) {\n          this.stretchAllColumnsWidth[column] = stretchedWidth;\n        } else {\n          this.stretchAllColumnsWidth[column] = isNaN(newStretchedWidth) ? this._getColumnWidth(column) : newStretchedWidth;\n        }\n      }\n      if (this.stretchAllColumnsWidth.length === totalColumns && this.needVerifyLastColumnWidth) {\n        this.needVerifyLastColumnWidth = false;\n        for (var i = 0; i < this.stretchAllColumnsWidth.length; i++) {\n          sumRatioWidth += this.stretchAllColumnsWidth[i];\n        }\n        if (sumRatioWidth !== this.totalTargetWidth) {\n          this.stretchAllColumnsWidth[this.stretchAllColumnsWidth.length - 1] += this.totalTargetWidth - sumRatioWidth;\n        }\n      }\n      return this.stretchAllColumnsWidth[column];\n    }\n\n    /**\n     * @param {number} column The visual column index.\n     * @returns {number|null}\n     * @private\n     */\n  }, {\n    key: \"_getStretchedLastColumnWidth\",\n    value: function _getStretchedLastColumnWidth(column) {\n      var priv = privatePool.get(this);\n      var totalColumns = priv.totalColumns;\n      if (column === totalColumns - 1) {\n        return this.stretchLastWidth;\n      }\n      return null;\n    }\n\n    /**\n     * @param {number} column The visual column index.\n     * @returns {number}\n     * @private\n     */\n  }, {\n    key: \"_getColumnWidth\",\n    value: function _getColumnWidth(column) {\n      var width = privatePool.get(this).columnWidthFn(column);\n      if (isNaN(width)) {\n        width = ViewportColumnsCalculator.DEFAULT_WIDTH;\n      }\n      return width;\n    }\n  }], [{\n    key: \"DEFAULT_WIDTH\",\n    get:\n    /**\n     * Default column width.\n     *\n     * @type {number}\n     */\n    function get() {\n      return 50;\n    }\n  }]);\n  return ViewportColumnsCalculator;\n}();\nexport default ViewportColumnsCalculator;","map":{"version":3,"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","_toPropertyKey","key","_createClass","protoProps","staticProps","arg","_toPrimitive","String","input","hint","prim","toPrimitive","undefined","res","call","Number","RENDER_TYPE","FULLY_VISIBLE_TYPE","privatePool","WeakMap","ViewportColumnsCalculator","_ref","arguments","viewportSize","scrollOffset","totalItems","itemSizeFn","overrideFn","calculationType","stretchMode","_ref$stretchingItemWi","stretchingItemWidthFn","width","set","viewportWidth","totalColumns","columnWidthFn","stretchingColumnWidthFn","count","startColumn","endColumn","startPosition","stretchAllRatio","stretchLastWidth","stretch","totalTargetWidth","needVerifyLastColumnWidth","stretchAllColumnsWidth","calculate","value","sum","needReverse","startPositions","columnWidth","priv","get","_getColumnWidth","compensatedViewportWidth","push","viewportSum","refreshStretching","totalWidth","totalColumnsWidth","sumAll","permanentColumnWidth","remainingSize","Infinity","_columnWidth","lastColumnWidth","getStretchedColumnWidth","column","baseWidth","result","_getStretchedAllColumnWidth","_getStretchedLastColumnWidth","sumRatioWidth","stretchedWidth","Math","round","newStretchedWidth","isNaN","DEFAULT_WIDTH"],"sources":["/home/rstorey/wwwdev/Blucktool/node_modules/handsontable/3rdparty/walkontable/src/calculator/viewportColumns.mjs"],"sourcesContent":["function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.weak-map.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.symbol.to-primitive.js\";\nimport \"core-js/modules/es.date.to-primitive.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport { RENDER_TYPE, FULLY_VISIBLE_TYPE } from \"./constants.mjs\";\nvar privatePool = new WeakMap();\n\n/**\n * Calculates indexes of columns to render OR columns that are visible.\n * To redo the calculation, you need to create a new calculator.\n *\n * @class ViewportColumnsCalculator\n */\nvar ViewportColumnsCalculator = /*#__PURE__*/function () {\n  /**\n   * @param {object} options Object with all options specified for column viewport calculation.\n   * @param {number} options.viewportSize Width of the viewport.\n   * @param {number} options.scrollOffset Current horizontal scroll position of the viewport.\n   * @param {number} options.totalItems Total number of columns.\n   * @param {Function} options.itemSizeFn Function that returns the width of the column at a given index (in px).\n   * @param {Function} options.overrideFn Function that changes calculated this.startRow, this.endRow (used by MergeCells plugin).\n   * @param {string} options.calculationType String which describes types of calculation which will be performed.\n   * @param {string} [options.stretchMode] Stretch mode 'all' or 'last'.\n   * @param {Function} [options.stretchingItemWidthFn] Function that returns the new width of the stretched column.\n   */\n  function ViewportColumnsCalculator() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      viewportSize = _ref.viewportSize,\n      scrollOffset = _ref.scrollOffset,\n      totalItems = _ref.totalItems,\n      itemSizeFn = _ref.itemSizeFn,\n      overrideFn = _ref.overrideFn,\n      calculationType = _ref.calculationType,\n      stretchMode = _ref.stretchMode,\n      _ref$stretchingItemWi = _ref.stretchingItemWidthFn,\n      stretchingItemWidthFn = _ref$stretchingItemWi === void 0 ? function (width) {\n        return width;\n      } : _ref$stretchingItemWi;\n    _classCallCheck(this, ViewportColumnsCalculator);\n    privatePool.set(this, {\n      viewportWidth: viewportSize,\n      scrollOffset: scrollOffset,\n      totalColumns: totalItems,\n      columnWidthFn: itemSizeFn,\n      overrideFn: overrideFn,\n      calculationType: calculationType,\n      stretchingColumnWidthFn: stretchingItemWidthFn\n    });\n\n    /**\n     * Number of rendered/visible columns.\n     *\n     * @type {number}\n     */\n    this.count = 0;\n\n    /**\n     * Index of the first rendered/visible column (can be overwritten using overrideFn).\n     *\n     * @type {number|null}\n     */\n    this.startColumn = null;\n\n    /**\n     * Index of the last rendered/visible column (can be overwritten using overrideFn).\n     *\n     * @type {null}\n     */\n    this.endColumn = null;\n\n    /**\n     * Position of the first rendered/visible column (in px).\n     *\n     * @type {number|null}\n     */\n    this.startPosition = null;\n    this.stretchAllRatio = 0;\n    this.stretchLastWidth = 0;\n    this.stretch = stretchMode;\n    this.totalTargetWidth = 0;\n    this.needVerifyLastColumnWidth = true;\n    this.stretchAllColumnsWidth = [];\n    this.calculate();\n  }\n\n  /**\n   * Calculates viewport.\n   */\n  _createClass(ViewportColumnsCalculator, [{\n    key: \"calculate\",\n    value: function calculate() {\n      var sum = 0;\n      var needReverse = true;\n      var startPositions = [];\n      var columnWidth;\n      var priv = privatePool.get(this);\n      var calculationType = priv.calculationType;\n      var overrideFn = priv.overrideFn;\n      var scrollOffset = priv.scrollOffset;\n      var totalColumns = priv.totalColumns;\n      var viewportWidth = priv.viewportWidth;\n      for (var i = 0; i < totalColumns; i++) {\n        columnWidth = this._getColumnWidth(i);\n        if (sum <= scrollOffset && calculationType !== FULLY_VISIBLE_TYPE) {\n          this.startColumn = i;\n        }\n\n        // +1 pixel for row header width compensation for horizontal scroll > 0\n        var compensatedViewportWidth = scrollOffset > 0 ? viewportWidth + 1 : viewportWidth;\n        if (sum >= scrollOffset && sum + (calculationType === FULLY_VISIBLE_TYPE ? columnWidth : 0) <= scrollOffset + compensatedViewportWidth) {\n          if (this.startColumn === null || this.startColumn === void 0) {\n            this.startColumn = i;\n          }\n          this.endColumn = i;\n        }\n        startPositions.push(sum);\n        sum += columnWidth;\n        if (calculationType !== FULLY_VISIBLE_TYPE) {\n          this.endColumn = i;\n        }\n        if (sum >= scrollOffset + viewportWidth) {\n          needReverse = false;\n          break;\n        }\n      }\n      if (this.endColumn === totalColumns - 1 && needReverse) {\n        this.startColumn = this.endColumn;\n        while (this.startColumn > 0) {\n          var viewportSum = startPositions[this.endColumn] + columnWidth - startPositions[this.startColumn - 1];\n          if (viewportSum <= viewportWidth || calculationType !== FULLY_VISIBLE_TYPE) {\n            this.startColumn -= 1;\n          }\n          if (viewportSum > viewportWidth) {\n            break;\n          }\n        }\n      }\n      if (calculationType === RENDER_TYPE && this.startColumn !== null && overrideFn) {\n        overrideFn(this);\n      }\n      this.startPosition = startPositions[this.startColumn];\n      if (this.startPosition === void 0) {\n        this.startPosition = null;\n      }\n\n      // If totalColumns exceeded its total columns size set endColumn to the latest item\n      if (totalColumns < this.endColumn) {\n        this.endColumn = totalColumns - 1;\n      }\n      if (this.startColumn !== null) {\n        this.count = this.endColumn - this.startColumn + 1;\n      }\n    }\n\n    /**\n     * Recalculate columns stretching.\n     *\n     * @param {number} totalWidth The total width of the table.\n     */\n  }, {\n    key: \"refreshStretching\",\n    value: function refreshStretching(totalWidth) {\n      if (this.stretch === 'none') {\n        return;\n      }\n      var totalColumnsWidth = totalWidth;\n      this.totalTargetWidth = totalColumnsWidth;\n      var priv = privatePool.get(this);\n      var totalColumns = priv.totalColumns;\n      var sumAll = 0;\n      for (var i = 0; i < totalColumns; i++) {\n        var columnWidth = this._getColumnWidth(i);\n        var permanentColumnWidth = priv.stretchingColumnWidthFn(void 0, i);\n        if (typeof permanentColumnWidth === 'number') {\n          totalColumnsWidth -= permanentColumnWidth;\n        } else {\n          sumAll += columnWidth;\n        }\n      }\n      var remainingSize = totalColumnsWidth - sumAll;\n      if (this.stretch === 'all' && remainingSize > 0) {\n        this.stretchAllRatio = totalColumnsWidth / sumAll;\n        this.stretchAllColumnsWidth = [];\n        this.needVerifyLastColumnWidth = true;\n      } else if (this.stretch === 'last' && totalColumnsWidth !== Infinity) {\n        var _columnWidth = this._getColumnWidth(totalColumns - 1);\n        var lastColumnWidth = remainingSize + _columnWidth;\n        this.stretchLastWidth = lastColumnWidth >= 0 ? lastColumnWidth : _columnWidth;\n      }\n    }\n\n    /**\n     * Get stretched column width based on stretchH (all or last) setting passed in handsontable instance.\n     *\n     * @param {number} column The visual column index.\n     * @param {number} baseWidth The default column width.\n     * @returns {number|null}\n     */\n  }, {\n    key: \"getStretchedColumnWidth\",\n    value: function getStretchedColumnWidth(column, baseWidth) {\n      var result = null;\n      if (this.stretch === 'all' && this.stretchAllRatio !== 0) {\n        result = this._getStretchedAllColumnWidth(column, baseWidth);\n      } else if (this.stretch === 'last' && this.stretchLastWidth !== 0) {\n        result = this._getStretchedLastColumnWidth(column);\n      }\n      return result;\n    }\n\n    /**\n     * @param {number} column The visual column index.\n     * @param {number} baseWidth The default column width.\n     * @returns {number}\n     * @private\n     */\n  }, {\n    key: \"_getStretchedAllColumnWidth\",\n    value: function _getStretchedAllColumnWidth(column, baseWidth) {\n      var sumRatioWidth = 0;\n      var priv = privatePool.get(this);\n      var totalColumns = priv.totalColumns;\n      if (!this.stretchAllColumnsWidth[column]) {\n        var stretchedWidth = Math.round(baseWidth * this.stretchAllRatio);\n        var newStretchedWidth = priv.stretchingColumnWidthFn(stretchedWidth, column);\n        if (newStretchedWidth === void 0) {\n          this.stretchAllColumnsWidth[column] = stretchedWidth;\n        } else {\n          this.stretchAllColumnsWidth[column] = isNaN(newStretchedWidth) ? this._getColumnWidth(column) : newStretchedWidth;\n        }\n      }\n      if (this.stretchAllColumnsWidth.length === totalColumns && this.needVerifyLastColumnWidth) {\n        this.needVerifyLastColumnWidth = false;\n        for (var i = 0; i < this.stretchAllColumnsWidth.length; i++) {\n          sumRatioWidth += this.stretchAllColumnsWidth[i];\n        }\n        if (sumRatioWidth !== this.totalTargetWidth) {\n          this.stretchAllColumnsWidth[this.stretchAllColumnsWidth.length - 1] += this.totalTargetWidth - sumRatioWidth;\n        }\n      }\n      return this.stretchAllColumnsWidth[column];\n    }\n\n    /**\n     * @param {number} column The visual column index.\n     * @returns {number|null}\n     * @private\n     */\n  }, {\n    key: \"_getStretchedLastColumnWidth\",\n    value: function _getStretchedLastColumnWidth(column) {\n      var priv = privatePool.get(this);\n      var totalColumns = priv.totalColumns;\n      if (column === totalColumns - 1) {\n        return this.stretchLastWidth;\n      }\n      return null;\n    }\n\n    /**\n     * @param {number} column The visual column index.\n     * @returns {number}\n     * @private\n     */\n  }, {\n    key: \"_getColumnWidth\",\n    value: function _getColumnWidth(column) {\n      var width = privatePool.get(this).columnWidthFn(column);\n      if (isNaN(width)) {\n        width = ViewportColumnsCalculator.DEFAULT_WIDTH;\n      }\n      return width;\n    }\n  }], [{\n    key: \"DEFAULT_WIDTH\",\n    get:\n    /**\n     * Default column width.\n     *\n     * @type {number}\n     */\n    function get() {\n      return 50;\n    }\n  }]);\n  return ViewportColumnsCalculator;\n}();\nexport default ViewportColumnsCalculator;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}