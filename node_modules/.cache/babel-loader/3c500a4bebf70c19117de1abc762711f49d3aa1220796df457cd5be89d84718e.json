{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\nimport { toUpperCaseFirst } from \"../helpers/string.mjs\";\nimport { isFunction } from \"../helpers/function.mjs\";\nimport DataMap from \"./dataMap.mjs\";\nimport { deepClone } from \"../helpers/object.mjs\";\n/**\n * Loads new data to Handsontable.\n *\n * @private\n * @param {Array} data Array of arrays or array of objects containing data.\n * @param {Function} setDataMapFunction Function that updates the datamap instance.\n * @param {Function} callbackFunction Function that takes care of updating Handsontable to the new dataset. Called\n * right before the `after-` hooks.\n * @param {object} config The configuration object containing all the needed dependency references and information.\n * @param {Handsontable.Core} config.hotInstance The Handsontable instance.\n * @param {DataMap} config.dataMap The current `dataMap` instance.\n * @param {DataSource} config.dataSource The current `dataSource` instance.\n * @param {string} config.internalSource The immediate internal source of the `replaceData` call.\n * @param {string} config.source The source of the call.\n * @param {boolean} config.firstRun `true` if it's a first call in the Handsontable lifecycle, `false` otherwise.\n * @fires Hooks#beforeLoadData\n * @fires Hooks#beforeUpdateData\n * @fires Hooks#afterLoadData\n * @fires Hooks#afterUpdateData\n * @fires Hooks#afterChange\n */\nfunction replaceData(data, setDataMapFunction, callbackFunction, config) {\n  var hotInstance = config.hotInstance,\n    dataMap = config.dataMap,\n    dataSource = config.dataSource,\n    internalSource = config.internalSource,\n    source = config.source,\n    metaManager = config.metaManager,\n    firstRun = config.firstRun;\n  var capitalizedInternalSource = toUpperCaseFirst(internalSource);\n  var tableMeta = hotInstance.getSettings();\n  if (Array.isArray(tableMeta.dataSchema)) {\n    hotInstance.dataType = 'array';\n  } else if (isFunction(tableMeta.dataSchema)) {\n    hotInstance.dataType = 'function';\n  } else {\n    hotInstance.dataType = 'object';\n  }\n  if (dataMap) {\n    dataMap.destroy();\n  }\n  data = hotInstance.runHooks(\"before\".concat(capitalizedInternalSource), data, firstRun, source);\n  var newDataMap = new DataMap(hotInstance, data, metaManager);\n\n  // We need to apply the new dataMap immediately, because of some asynchronous logic in the\n  // `autoRowSize`/`autoColumnSize` plugins.\n  setDataMapFunction(newDataMap);\n  if (_typeof(data) === 'object' && data !== null) {\n    if (!(data.push && data.splice)) {\n      // check if data is array. Must use duck-type check so Backbone Collections also pass it\n      // when data is not an array, attempt to make a single-row array of it\n      // eslint-disable-next-line no-param-reassign\n      data = [data];\n    }\n  } else if (data === null) {\n    var dataSchema = newDataMap.getSchema();\n\n    // eslint-disable-next-line no-param-reassign\n    data = [];\n    var row;\n    var r = 0;\n    var rlen = 0;\n    for (r = 0, rlen = tableMeta.startRows; r < rlen; r++) {\n      if ((hotInstance.dataType === 'object' || hotInstance.dataType === 'function') && tableMeta.dataSchema) {\n        row = deepClone(dataSchema);\n        data.push(row);\n      } else if (hotInstance.dataType === 'array') {\n        row = deepClone(dataSchema[0]);\n        data.push(row);\n      } else {\n        row = [];\n        for (var c = 0, clen = tableMeta.startCols; c < clen; c++) {\n          row.push(null);\n        }\n        data.push(row);\n      }\n    }\n  } else {\n    throw new Error(\"\".concat(internalSource, \" only accepts array of objects or array of arrays (\").concat(_typeof(data), \" given)\"));\n  }\n  if (Array.isArray(data[0])) {\n    hotInstance.dataType = 'array';\n  }\n  tableMeta.data = data;\n  newDataMap.dataSource = data;\n  dataSource.data = data;\n  dataSource.dataType = hotInstance.dataType;\n  dataSource.colToProp = newDataMap.colToProp.bind(newDataMap);\n  dataSource.propToCol = newDataMap.propToCol.bind(newDataMap);\n  dataSource.countCachedColumns = newDataMap.countCachedColumns.bind(newDataMap);\n\n  // Run the logic for reassuring that the table structure fits the new dataset.\n  callbackFunction(newDataMap);\n  hotInstance.runHooks(\"after\".concat(capitalizedInternalSource), data, firstRun, source);\n\n  // TODO: rethink the way the `afterChange` hook is being run here in the core `init` method.\n  if (!firstRun) {\n    hotInstance.runHooks('afterChange', null, internalSource);\n    hotInstance.render();\n  }\n}\nexport { replaceData };","map":{"version":3,"names":["_typeof","obj","Symbol","iterator","constructor","prototype","toUpperCaseFirst","isFunction","DataMap","deepClone","replaceData","data","setDataMapFunction","callbackFunction","config","hotInstance","dataMap","dataSource","internalSource","source","metaManager","firstRun","capitalizedInternalSource","tableMeta","getSettings","Array","isArray","dataSchema","dataType","destroy","runHooks","concat","newDataMap","push","splice","getSchema","row","r","rlen","startRows","c","clen","startCols","Error","colToProp","bind","propToCol","countCachedColumns","render"],"sources":["/home/rstorey/wwwdev/Blucktool/node_modules/handsontable/dataMap/replaceData.mjs"],"sourcesContent":["import \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nimport { toUpperCaseFirst } from \"../helpers/string.mjs\";\nimport { isFunction } from \"../helpers/function.mjs\";\nimport DataMap from \"./dataMap.mjs\";\nimport { deepClone } from \"../helpers/object.mjs\";\n/**\n * Loads new data to Handsontable.\n *\n * @private\n * @param {Array} data Array of arrays or array of objects containing data.\n * @param {Function} setDataMapFunction Function that updates the datamap instance.\n * @param {Function} callbackFunction Function that takes care of updating Handsontable to the new dataset. Called\n * right before the `after-` hooks.\n * @param {object} config The configuration object containing all the needed dependency references and information.\n * @param {Handsontable.Core} config.hotInstance The Handsontable instance.\n * @param {DataMap} config.dataMap The current `dataMap` instance.\n * @param {DataSource} config.dataSource The current `dataSource` instance.\n * @param {string} config.internalSource The immediate internal source of the `replaceData` call.\n * @param {string} config.source The source of the call.\n * @param {boolean} config.firstRun `true` if it's a first call in the Handsontable lifecycle, `false` otherwise.\n * @fires Hooks#beforeLoadData\n * @fires Hooks#beforeUpdateData\n * @fires Hooks#afterLoadData\n * @fires Hooks#afterUpdateData\n * @fires Hooks#afterChange\n */\nfunction replaceData(data, setDataMapFunction, callbackFunction, config) {\n  var hotInstance = config.hotInstance,\n    dataMap = config.dataMap,\n    dataSource = config.dataSource,\n    internalSource = config.internalSource,\n    source = config.source,\n    metaManager = config.metaManager,\n    firstRun = config.firstRun;\n  var capitalizedInternalSource = toUpperCaseFirst(internalSource);\n  var tableMeta = hotInstance.getSettings();\n  if (Array.isArray(tableMeta.dataSchema)) {\n    hotInstance.dataType = 'array';\n  } else if (isFunction(tableMeta.dataSchema)) {\n    hotInstance.dataType = 'function';\n  } else {\n    hotInstance.dataType = 'object';\n  }\n  if (dataMap) {\n    dataMap.destroy();\n  }\n  data = hotInstance.runHooks(\"before\".concat(capitalizedInternalSource), data, firstRun, source);\n  var newDataMap = new DataMap(hotInstance, data, metaManager);\n\n  // We need to apply the new dataMap immediately, because of some asynchronous logic in the\n  // `autoRowSize`/`autoColumnSize` plugins.\n  setDataMapFunction(newDataMap);\n  if (_typeof(data) === 'object' && data !== null) {\n    if (!(data.push && data.splice)) {\n      // check if data is array. Must use duck-type check so Backbone Collections also pass it\n      // when data is not an array, attempt to make a single-row array of it\n      // eslint-disable-next-line no-param-reassign\n      data = [data];\n    }\n  } else if (data === null) {\n    var dataSchema = newDataMap.getSchema();\n\n    // eslint-disable-next-line no-param-reassign\n    data = [];\n    var row;\n    var r = 0;\n    var rlen = 0;\n    for (r = 0, rlen = tableMeta.startRows; r < rlen; r++) {\n      if ((hotInstance.dataType === 'object' || hotInstance.dataType === 'function') && tableMeta.dataSchema) {\n        row = deepClone(dataSchema);\n        data.push(row);\n      } else if (hotInstance.dataType === 'array') {\n        row = deepClone(dataSchema[0]);\n        data.push(row);\n      } else {\n        row = [];\n        for (var c = 0, clen = tableMeta.startCols; c < clen; c++) {\n          row.push(null);\n        }\n        data.push(row);\n      }\n    }\n  } else {\n    throw new Error(\"\".concat(internalSource, \" only accepts array of objects or array of arrays (\").concat(_typeof(data), \" given)\"));\n  }\n  if (Array.isArray(data[0])) {\n    hotInstance.dataType = 'array';\n  }\n  tableMeta.data = data;\n  newDataMap.dataSource = data;\n  dataSource.data = data;\n  dataSource.dataType = hotInstance.dataType;\n  dataSource.colToProp = newDataMap.colToProp.bind(newDataMap);\n  dataSource.propToCol = newDataMap.propToCol.bind(newDataMap);\n  dataSource.countCachedColumns = newDataMap.countCachedColumns.bind(newDataMap);\n\n  // Run the logic for reassuring that the table structure fits the new dataset.\n  callbackFunction(newDataMap);\n  hotInstance.runHooks(\"after\".concat(capitalizedInternalSource), data, firstRun, source);\n\n  // TODO: rethink the way the `afterChange` hook is being run here in the core `init` method.\n  if (!firstRun) {\n    hotInstance.runHooks('afterChange', null, internalSource);\n    hotInstance.render();\n  }\n}\nexport { replaceData };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}