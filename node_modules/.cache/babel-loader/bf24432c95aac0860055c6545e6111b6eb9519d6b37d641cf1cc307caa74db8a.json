{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nimport { extend } from \"../../../helpers/object.mjs\";\nimport { columnFactory, extendByMetaType } from \"../utils.mjs\";\nimport LazyFactoryMap from \"../lazyFactoryMap.mjs\";\n/**\n * List of props which have to be cleared in the column meta-layer. That props have a\n * different meaning when using in column meta.\n *\n * @type {string[]}\n */\nvar COLUMNS_PROPS_CONFLICTS = ['data', 'width'];\n\n/**\n * The column meta object is a root of all settings defined in the column property of the Handsontable\n * settings. Each column in the Handsontable is associated with a unique meta object which is managed by\n * this layer. Adding, removing, or changing property in that object has a direct reflection only for\n * the CellMeta layer. The reflection will be visible only if the property doesn't exist in the lower\n * layers (prototype lookup).\n *\n * +-------------+.\n * │ GlobalMeta  │\n * │ (prototype) │\n * +-------------+\\\n *       │         \\\n *       │          \\\n *      \\│/         _\\|\n * +-------------+    +-------------+.\n * │ TableMeta   │    │ ColumnMeta  │\n * │ (instance)  │    │ (prototype) │\n * +-------------+    +-------------+.\n *                         │\n *                         │\n *                        \\│/\n *                    +-------------+.\n *                    │  CellMeta   │\n *                    │ (instance)  │\n *                    +-------------+.\n */\nvar ColumnMeta = /*#__PURE__*/function () {\n  function ColumnMeta(globalMeta) {\n    var _this = this;\n    _classCallCheck(this, ColumnMeta);\n    /**\n     * Reference to the GlobalMeta layer. While creating new column meta objects, all new objects\n     * inherit properties from the GlobalMeta layer.\n     *\n     * @type {GlobalMeta}\n     */\n    this.globalMeta = globalMeta;\n    /**\n     * The LazyFactoryMap structure, holder for column meta objects where each column meta is\n     * stored under the physical column index.\n     *\n     * @type {LazyFactoryMap}\n     */\n    this.metas = new LazyFactoryMap(function () {\n      return _this._createMeta();\n    });\n  }\n\n  /**\n   * Updates column meta object by merging settings with the current state.\n   *\n   * @param {number} physicalColumn The physical column index which points what column meta object is updated.\n   * @param {object} settings An object to merge with.\n   */\n  _createClass(ColumnMeta, [{\n    key: \"updateMeta\",\n    value: function updateMeta(physicalColumn, settings) {\n      var meta = this.getMeta(physicalColumn);\n      extend(meta, settings);\n      extendByMetaType(meta, settings);\n    }\n\n    /**\n     * Creates one or more columns at specific position.\n     *\n     * @param {number} physicalColumn The physical column index which points from what position the column is added.\n     * @param {number} amount An amount of columns to add.\n     */\n  }, {\n    key: \"createColumn\",\n    value: function createColumn(physicalColumn, amount) {\n      this.metas.insert(physicalColumn, amount);\n    }\n\n    /**\n     * Removes one or more columns from the collection.\n     *\n     * @param {number} physicalColumn The physical column index which points from what position the column is removed.\n     * @param {number} amount An amount columns to remove.\n     */\n  }, {\n    key: \"removeColumn\",\n    value: function removeColumn(physicalColumn, amount) {\n      this.metas.remove(physicalColumn, amount);\n    }\n\n    /**\n     * Gets settings object for this layer.\n     *\n     * @param {number} physicalColumn The physical column index.\n     * @returns {object}\n     */\n  }, {\n    key: \"getMeta\",\n    value: function getMeta(physicalColumn) {\n      return this.metas.obtain(physicalColumn);\n    }\n\n    /**\n     * Gets constructor of the column meta object. Necessary for inheritance - creating the next meta layers.\n     *\n     * @param {number} physicalColumn The physical column index.\n     * @returns {Function}\n     */\n  }, {\n    key: \"getMetaConstructor\",\n    value: function getMetaConstructor(physicalColumn) {\n      return this.metas.obtain(physicalColumn).constructor;\n    }\n\n    /**\n     * Clears all saved column meta objects.\n     */\n  }, {\n    key: \"clearCache\",\n    value: function clearCache() {\n      this.metas.clear();\n    }\n\n    /**\n     * Creates and returns new column meta object with properties inherited from the global meta layer.\n     *\n     * @private\n     * @returns {object}\n     */\n  }, {\n    key: \"_createMeta\",\n    value: function _createMeta() {\n      return columnFactory(this.globalMeta.getMetaConstructor(), COLUMNS_PROPS_CONFLICTS).prototype;\n    }\n  }]);\n  return ColumnMeta;\n}();\nexport { ColumnMeta as default };","map":{"version":3,"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","_toPropertyKey","key","_createClass","protoProps","staticProps","arg","_toPrimitive","String","input","hint","prim","toPrimitive","undefined","res","call","Number","extend","columnFactory","extendByMetaType","LazyFactoryMap","COLUMNS_PROPS_CONFLICTS","ColumnMeta","globalMeta","_this","metas","_createMeta","value","updateMeta","physicalColumn","settings","meta","getMeta","createColumn","amount","insert","removeColumn","remove","obtain","getMetaConstructor","clearCache","clear","default"],"sources":["/home/rstorey/wwwdev/Blucktool/node_modules/handsontable/dataMap/metaManager/metaLayers/columnMeta.mjs"],"sourcesContent":["import \"core-js/modules/es.symbol.to-primitive.js\";\nimport \"core-js/modules/es.date.to-primitive.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport { extend } from \"../../../helpers/object.mjs\";\nimport { columnFactory, extendByMetaType } from \"../utils.mjs\";\nimport LazyFactoryMap from \"../lazyFactoryMap.mjs\";\n/**\n * List of props which have to be cleared in the column meta-layer. That props have a\n * different meaning when using in column meta.\n *\n * @type {string[]}\n */\nvar COLUMNS_PROPS_CONFLICTS = ['data', 'width'];\n\n/**\n * The column meta object is a root of all settings defined in the column property of the Handsontable\n * settings. Each column in the Handsontable is associated with a unique meta object which is managed by\n * this layer. Adding, removing, or changing property in that object has a direct reflection only for\n * the CellMeta layer. The reflection will be visible only if the property doesn't exist in the lower\n * layers (prototype lookup).\n *\n * +-------------+.\n * │ GlobalMeta  │\n * │ (prototype) │\n * +-------------+\\\n *       │         \\\n *       │          \\\n *      \\│/         _\\|\n * +-------------+    +-------------+.\n * │ TableMeta   │    │ ColumnMeta  │\n * │ (instance)  │    │ (prototype) │\n * +-------------+    +-------------+.\n *                         │\n *                         │\n *                        \\│/\n *                    +-------------+.\n *                    │  CellMeta   │\n *                    │ (instance)  │\n *                    +-------------+.\n */\nvar ColumnMeta = /*#__PURE__*/function () {\n  function ColumnMeta(globalMeta) {\n    var _this = this;\n    _classCallCheck(this, ColumnMeta);\n    /**\n     * Reference to the GlobalMeta layer. While creating new column meta objects, all new objects\n     * inherit properties from the GlobalMeta layer.\n     *\n     * @type {GlobalMeta}\n     */\n    this.globalMeta = globalMeta;\n    /**\n     * The LazyFactoryMap structure, holder for column meta objects where each column meta is\n     * stored under the physical column index.\n     *\n     * @type {LazyFactoryMap}\n     */\n    this.metas = new LazyFactoryMap(function () {\n      return _this._createMeta();\n    });\n  }\n\n  /**\n   * Updates column meta object by merging settings with the current state.\n   *\n   * @param {number} physicalColumn The physical column index which points what column meta object is updated.\n   * @param {object} settings An object to merge with.\n   */\n  _createClass(ColumnMeta, [{\n    key: \"updateMeta\",\n    value: function updateMeta(physicalColumn, settings) {\n      var meta = this.getMeta(physicalColumn);\n      extend(meta, settings);\n      extendByMetaType(meta, settings);\n    }\n\n    /**\n     * Creates one or more columns at specific position.\n     *\n     * @param {number} physicalColumn The physical column index which points from what position the column is added.\n     * @param {number} amount An amount of columns to add.\n     */\n  }, {\n    key: \"createColumn\",\n    value: function createColumn(physicalColumn, amount) {\n      this.metas.insert(physicalColumn, amount);\n    }\n\n    /**\n     * Removes one or more columns from the collection.\n     *\n     * @param {number} physicalColumn The physical column index which points from what position the column is removed.\n     * @param {number} amount An amount columns to remove.\n     */\n  }, {\n    key: \"removeColumn\",\n    value: function removeColumn(physicalColumn, amount) {\n      this.metas.remove(physicalColumn, amount);\n    }\n\n    /**\n     * Gets settings object for this layer.\n     *\n     * @param {number} physicalColumn The physical column index.\n     * @returns {object}\n     */\n  }, {\n    key: \"getMeta\",\n    value: function getMeta(physicalColumn) {\n      return this.metas.obtain(physicalColumn);\n    }\n\n    /**\n     * Gets constructor of the column meta object. Necessary for inheritance - creating the next meta layers.\n     *\n     * @param {number} physicalColumn The physical column index.\n     * @returns {Function}\n     */\n  }, {\n    key: \"getMetaConstructor\",\n    value: function getMetaConstructor(physicalColumn) {\n      return this.metas.obtain(physicalColumn).constructor;\n    }\n\n    /**\n     * Clears all saved column meta objects.\n     */\n  }, {\n    key: \"clearCache\",\n    value: function clearCache() {\n      this.metas.clear();\n    }\n\n    /**\n     * Creates and returns new column meta object with properties inherited from the global meta layer.\n     *\n     * @private\n     * @returns {object}\n     */\n  }, {\n    key: \"_createMeta\",\n    value: function _createMeta() {\n      return columnFactory(this.globalMeta.getMetaConstructor(), COLUMNS_PROPS_CONFLICTS).prototype;\n    }\n  }]);\n  return ColumnMeta;\n}();\nexport { ColumnMeta as default };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}