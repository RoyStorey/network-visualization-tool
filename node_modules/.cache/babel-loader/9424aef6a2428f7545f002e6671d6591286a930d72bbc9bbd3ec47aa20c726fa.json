{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nimport { RENDER_TYPE, FULLY_VISIBLE_TYPE } from \"./constants.mjs\";\nvar privatePool = new WeakMap();\n\n/**\n * Calculates indexes of rows to render OR rows that are visible.\n * To redo the calculation, you need to create a new calculator.\n *\n * @class ViewportRowsCalculator\n */\nvar ViewportRowsCalculator = /*#__PURE__*/function () {\n  /**\n   * @param {object} options Object with all options specified for row viewport calculation.\n   * @param {number} options.viewportSize Height of the viewport.\n   * @param {number} options.scrollOffset Current vertical scroll position of the viewport.\n   * @param {number} options.totalItems Total number of rows.\n   * @param {Function} options.itemSizeFn Function that returns the height of the row at a given index (in px).\n   * @param {Function} options.overrideFn Function that changes calculated this.startRow, this.endRow (used by MergeCells plugin).\n   * @param {string} options.calculationType String which describes types of calculation which will be performed.\n   * @param {number} options.scrollbarHeight The scrollbar height.\n   */\n  function ViewportRowsCalculator() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      viewportSize = _ref.viewportSize,\n      scrollOffset = _ref.scrollOffset,\n      totalItems = _ref.totalItems,\n      itemSizeFn = _ref.itemSizeFn,\n      overrideFn = _ref.overrideFn,\n      calculationType = _ref.calculationType,\n      scrollbarHeight = _ref.scrollbarHeight;\n    _classCallCheck(this, ViewportRowsCalculator);\n    privatePool.set(this, {\n      viewportHeight: viewportSize,\n      scrollOffset: scrollOffset,\n      totalRows: totalItems,\n      rowHeightFn: itemSizeFn,\n      overrideFn: overrideFn,\n      calculationType: calculationType,\n      horizontalScrollbarHeight: scrollbarHeight\n    });\n\n    /**\n     * Number of rendered/visible rows.\n     *\n     * @type {number}\n     */\n    this.count = 0;\n\n    /**\n     * Index of the first rendered/visible row (can be overwritten using overrideFn).\n     *\n     * @type {number|null}\n     */\n    this.startRow = null;\n\n    /**\n     * Index of the last rendered/visible row (can be overwritten using overrideFn).\n     *\n     * @type {null}\n     */\n    this.endRow = null;\n\n    /**\n     * Position of the first rendered/visible row (in px).\n     *\n     * @type {number|null}\n     */\n    this.startPosition = null;\n    this.calculate();\n  }\n\n  /**\n   * Calculates viewport.\n   */\n  _createClass(ViewportRowsCalculator, [{\n    key: \"calculate\",\n    value: function calculate() {\n      var sum = 0;\n      var needReverse = true;\n      var startPositions = [];\n      var priv = privatePool.get(this);\n      var calculationType = priv.calculationType;\n      var overrideFn = priv.overrideFn;\n      var rowHeightFn = priv.rowHeightFn;\n      var scrollOffset = priv.scrollOffset;\n      var totalRows = priv.totalRows;\n      var viewportHeight = priv.viewportHeight;\n      var horizontalScrollbarHeight = priv.horizontalScrollbarHeight || 0;\n      var rowHeight;\n\n      // Calculate the number (start and end index) of rows needed\n      for (var i = 0; i < totalRows; i++) {\n        rowHeight = rowHeightFn(i);\n        if (isNaN(rowHeight)) {\n          rowHeight = ViewportRowsCalculator.DEFAULT_HEIGHT;\n        }\n        if (sum <= scrollOffset && calculationType !== FULLY_VISIBLE_TYPE) {\n          this.startRow = i;\n        }\n        if (sum >= scrollOffset && sum + (calculationType === FULLY_VISIBLE_TYPE ? rowHeight : 0) <= scrollOffset + viewportHeight - horizontalScrollbarHeight) {\n          // eslint-disable-line max-len\n          if (this.startRow === null) {\n            this.startRow = i;\n          }\n          this.endRow = i;\n        }\n        startPositions.push(sum);\n        sum += rowHeight;\n        if (calculationType !== FULLY_VISIBLE_TYPE) {\n          this.endRow = i;\n        }\n        if (sum >= scrollOffset + viewportHeight - horizontalScrollbarHeight) {\n          needReverse = false;\n          break;\n        }\n      }\n\n      // If the estimation has reached the last row and there is still some space available in the viewport,\n      // we need to render in reverse in order to fill the whole viewport with rows\n      if (this.endRow === totalRows - 1 && needReverse) {\n        this.startRow = this.endRow;\n        while (this.startRow > 0) {\n          // rowHeight is the height of the last row\n          var viewportSum = startPositions[this.endRow] + rowHeight - startPositions[this.startRow - 1];\n          if (viewportSum <= viewportHeight - horizontalScrollbarHeight || calculationType !== FULLY_VISIBLE_TYPE) {\n            this.startRow -= 1;\n          }\n          if (viewportSum >= viewportHeight - horizontalScrollbarHeight) {\n            break;\n          }\n        }\n      }\n      if (calculationType === RENDER_TYPE && this.startRow !== null && overrideFn) {\n        overrideFn(this);\n      }\n      this.startPosition = startPositions[this.startRow];\n      if (this.startPosition === void 0) {\n        this.startPosition = null;\n      }\n\n      // If totalRows exceeded its total rows size set endRow to the latest item\n      if (totalRows < this.endRow) {\n        this.endRow = totalRows - 1;\n      }\n      if (this.startRow !== null) {\n        this.count = this.endRow - this.startRow + 1;\n      }\n    }\n  }], [{\n    key: \"DEFAULT_HEIGHT\",\n    get:\n    /**\n     * Default row height.\n     *\n     * @type {number}\n     */\n    function get() {\n      return 23;\n    }\n  }]);\n  return ViewportRowsCalculator;\n}();\nexport default ViewportRowsCalculator;","map":{"version":3,"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","_toPropertyKey","key","_createClass","protoProps","staticProps","arg","_toPrimitive","String","input","hint","prim","toPrimitive","undefined","res","call","Number","RENDER_TYPE","FULLY_VISIBLE_TYPE","privatePool","WeakMap","ViewportRowsCalculator","_ref","arguments","viewportSize","scrollOffset","totalItems","itemSizeFn","overrideFn","calculationType","scrollbarHeight","set","viewportHeight","totalRows","rowHeightFn","horizontalScrollbarHeight","count","startRow","endRow","startPosition","calculate","value","sum","needReverse","startPositions","priv","get","rowHeight","isNaN","DEFAULT_HEIGHT","push","viewportSum"],"sources":["/home/rstorey/wwwdev/Blucktool/node_modules/handsontable/3rdparty/walkontable/src/calculator/viewportRows.mjs"],"sourcesContent":["function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.weak-map.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.symbol.to-primitive.js\";\nimport \"core-js/modules/es.date.to-primitive.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport { RENDER_TYPE, FULLY_VISIBLE_TYPE } from \"./constants.mjs\";\nvar privatePool = new WeakMap();\n\n/**\n * Calculates indexes of rows to render OR rows that are visible.\n * To redo the calculation, you need to create a new calculator.\n *\n * @class ViewportRowsCalculator\n */\nvar ViewportRowsCalculator = /*#__PURE__*/function () {\n  /**\n   * @param {object} options Object with all options specified for row viewport calculation.\n   * @param {number} options.viewportSize Height of the viewport.\n   * @param {number} options.scrollOffset Current vertical scroll position of the viewport.\n   * @param {number} options.totalItems Total number of rows.\n   * @param {Function} options.itemSizeFn Function that returns the height of the row at a given index (in px).\n   * @param {Function} options.overrideFn Function that changes calculated this.startRow, this.endRow (used by MergeCells plugin).\n   * @param {string} options.calculationType String which describes types of calculation which will be performed.\n   * @param {number} options.scrollbarHeight The scrollbar height.\n   */\n  function ViewportRowsCalculator() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      viewportSize = _ref.viewportSize,\n      scrollOffset = _ref.scrollOffset,\n      totalItems = _ref.totalItems,\n      itemSizeFn = _ref.itemSizeFn,\n      overrideFn = _ref.overrideFn,\n      calculationType = _ref.calculationType,\n      scrollbarHeight = _ref.scrollbarHeight;\n    _classCallCheck(this, ViewportRowsCalculator);\n    privatePool.set(this, {\n      viewportHeight: viewportSize,\n      scrollOffset: scrollOffset,\n      totalRows: totalItems,\n      rowHeightFn: itemSizeFn,\n      overrideFn: overrideFn,\n      calculationType: calculationType,\n      horizontalScrollbarHeight: scrollbarHeight\n    });\n\n    /**\n     * Number of rendered/visible rows.\n     *\n     * @type {number}\n     */\n    this.count = 0;\n\n    /**\n     * Index of the first rendered/visible row (can be overwritten using overrideFn).\n     *\n     * @type {number|null}\n     */\n    this.startRow = null;\n\n    /**\n     * Index of the last rendered/visible row (can be overwritten using overrideFn).\n     *\n     * @type {null}\n     */\n    this.endRow = null;\n\n    /**\n     * Position of the first rendered/visible row (in px).\n     *\n     * @type {number|null}\n     */\n    this.startPosition = null;\n    this.calculate();\n  }\n\n  /**\n   * Calculates viewport.\n   */\n  _createClass(ViewportRowsCalculator, [{\n    key: \"calculate\",\n    value: function calculate() {\n      var sum = 0;\n      var needReverse = true;\n      var startPositions = [];\n      var priv = privatePool.get(this);\n      var calculationType = priv.calculationType;\n      var overrideFn = priv.overrideFn;\n      var rowHeightFn = priv.rowHeightFn;\n      var scrollOffset = priv.scrollOffset;\n      var totalRows = priv.totalRows;\n      var viewportHeight = priv.viewportHeight;\n      var horizontalScrollbarHeight = priv.horizontalScrollbarHeight || 0;\n      var rowHeight;\n\n      // Calculate the number (start and end index) of rows needed\n      for (var i = 0; i < totalRows; i++) {\n        rowHeight = rowHeightFn(i);\n        if (isNaN(rowHeight)) {\n          rowHeight = ViewportRowsCalculator.DEFAULT_HEIGHT;\n        }\n        if (sum <= scrollOffset && calculationType !== FULLY_VISIBLE_TYPE) {\n          this.startRow = i;\n        }\n        if (sum >= scrollOffset && sum + (calculationType === FULLY_VISIBLE_TYPE ? rowHeight : 0) <= scrollOffset + viewportHeight - horizontalScrollbarHeight) {\n          // eslint-disable-line max-len\n          if (this.startRow === null) {\n            this.startRow = i;\n          }\n          this.endRow = i;\n        }\n        startPositions.push(sum);\n        sum += rowHeight;\n        if (calculationType !== FULLY_VISIBLE_TYPE) {\n          this.endRow = i;\n        }\n        if (sum >= scrollOffset + viewportHeight - horizontalScrollbarHeight) {\n          needReverse = false;\n          break;\n        }\n      }\n\n      // If the estimation has reached the last row and there is still some space available in the viewport,\n      // we need to render in reverse in order to fill the whole viewport with rows\n      if (this.endRow === totalRows - 1 && needReverse) {\n        this.startRow = this.endRow;\n        while (this.startRow > 0) {\n          // rowHeight is the height of the last row\n          var viewportSum = startPositions[this.endRow] + rowHeight - startPositions[this.startRow - 1];\n          if (viewportSum <= viewportHeight - horizontalScrollbarHeight || calculationType !== FULLY_VISIBLE_TYPE) {\n            this.startRow -= 1;\n          }\n          if (viewportSum >= viewportHeight - horizontalScrollbarHeight) {\n            break;\n          }\n        }\n      }\n      if (calculationType === RENDER_TYPE && this.startRow !== null && overrideFn) {\n        overrideFn(this);\n      }\n      this.startPosition = startPositions[this.startRow];\n      if (this.startPosition === void 0) {\n        this.startPosition = null;\n      }\n\n      // If totalRows exceeded its total rows size set endRow to the latest item\n      if (totalRows < this.endRow) {\n        this.endRow = totalRows - 1;\n      }\n      if (this.startRow !== null) {\n        this.count = this.endRow - this.startRow + 1;\n      }\n    }\n  }], [{\n    key: \"DEFAULT_HEIGHT\",\n    get:\n    /**\n     * Default row height.\n     *\n     * @type {number}\n     */\n    function get() {\n      return 23;\n    }\n  }]);\n  return ViewportRowsCalculator;\n}();\nexport default ViewportRowsCalculator;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}