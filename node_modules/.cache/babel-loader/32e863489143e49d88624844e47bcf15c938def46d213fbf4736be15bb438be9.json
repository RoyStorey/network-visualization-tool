{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (null != _i) {\n    var _s,\n      _e,\n      _x,\n      _r,\n      _arr = [],\n      _n = !0,\n      _d = !1;\n    try {\n      if (_x = (_i = _i.call(arr)).next, 0 === i) {\n        if (Object(_i) !== _i) return;\n        _n = !1;\n      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);\n    } catch (err) {\n      _d = !0, _e = err;\n    } finally {\n      try {\n        if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return;\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nimport { extend } from \"../../../helpers/object.mjs\";\nimport { arrayEach } from \"../../../helpers/array.mjs\";\n/**\n * Class responsible for all of the Autofill-related operations on merged cells.\n *\n * @private\n * @class AutofillCalculations\n */\nvar AutofillCalculations = /*#__PURE__*/function () {\n  function AutofillCalculations(plugin) {\n    _classCallCheck(this, AutofillCalculations);\n    /**\n     * Reference to the Merge Cells plugin.\n     *\n     * @type {MergeCells}\n     */\n    this.plugin = plugin;\n    /**\n     * Reference to the MergedCellsCollection class instance.\n     *\n     * @type {MergedCellsCollection}\n     */\n    this.mergedCellsCollection = this.plugin.mergedCellsCollection;\n    /**\n     * Cache of the currently processed autofill data.\n     *\n     * @private\n     * @type {object}\n     */\n    this.currentFillData = null;\n  }\n\n  /**\n   * Correct the provided selection area, so it's not selecting only a part of a merged cell.\n   *\n   * @param {Array} selectionArea The selection to correct.\n   */\n  _createClass(AutofillCalculations, [{\n    key: \"correctSelectionAreaSize\",\n    value: function correctSelectionAreaSize(selectionArea) {\n      if (selectionArea[0] === selectionArea[2] && selectionArea[1] === selectionArea[3]) {\n        var mergedCell = this.mergedCellsCollection.get(selectionArea[0], selectionArea[1]);\n        if (mergedCell) {\n          selectionArea[2] = selectionArea[0] + mergedCell.rowspan - 1;\n          selectionArea[3] = selectionArea[1] + mergedCell.colspan - 1;\n        }\n      }\n    }\n\n    /**\n     * Get the direction of the autofill process.\n     *\n     * @param {Array} selectionArea The selection area.\n     * @param {Array} finalArea The final area (base + drag).\n     * @returns {string} `up`, `down`, `left` or `right`.\n     */\n  }, {\n    key: \"getDirection\",\n    value: function getDirection(selectionArea, finalArea) {\n      var direction = null;\n      if (finalArea[0] === selectionArea[0] && finalArea[1] === selectionArea[1] && finalArea[3] === selectionArea[3]) {\n        direction = 'down';\n      } else if (finalArea[2] === selectionArea[2] && finalArea[1] === selectionArea[1] && finalArea[3] === selectionArea[3]) {\n        direction = 'up';\n      } else if (finalArea[1] === selectionArea[1] && finalArea[2] === selectionArea[2]) {\n        direction = 'right';\n      } else {\n        direction = 'left';\n      }\n      return direction;\n    }\n\n    /**\n     * Snap the drag area to the farthest merged cell, so it won't clip any of the merged cells.\n     *\n     * @param {Array} baseArea The base selected area.\n     * @param {Array} dragArea The drag area.\n     * @param {string} dragDirection The autofill drag direction.\n     * @param {Array} foundMergedCells MergeCellCoords found in the base selection area.\n     * @returns {Array} The new drag area.\n     */\n  }, {\n    key: \"snapDragArea\",\n    value: function snapDragArea(baseArea, dragArea, dragDirection, foundMergedCells) {\n      var newDragArea = dragArea.slice(0);\n      var fillSize = this.getAutofillSize(baseArea, dragArea, dragDirection);\n      var _baseArea = _slicedToArray(baseArea, 4),\n        baseAreaStartRow = _baseArea[0],\n        baseAreaStartColumn = _baseArea[1],\n        baseAreaEndRow = _baseArea[2],\n        baseAreaEndColumn = _baseArea[3];\n      var verticalDirection = ['up', 'down'].indexOf(dragDirection) > -1;\n      var fullCycle = verticalDirection ? baseAreaEndRow - baseAreaStartRow + 1 : baseAreaEndColumn - baseAreaStartColumn + 1;\n      var fulls = Math.floor(fillSize / fullCycle) * fullCycle;\n      var partials = fillSize - fulls;\n      var farthestCollection = this.getFarthestCollection(baseArea, dragArea, dragDirection, foundMergedCells);\n      if (farthestCollection) {\n        if (dragDirection === 'down') {\n          var fill = farthestCollection.row + farthestCollection.rowspan - baseAreaStartRow - partials;\n          var newLimit = newDragArea[2] + fill;\n          if (newLimit >= this.plugin.hot.countRows()) {\n            newDragArea[2] -= partials;\n          } else {\n            newDragArea[2] += partials ? fill : 0;\n          }\n        } else if (dragDirection === 'right') {\n          var _fill = farthestCollection.col + farthestCollection.colspan - baseAreaStartColumn - partials;\n          var _newLimit = newDragArea[3] + _fill;\n          if (_newLimit >= this.plugin.hot.countCols()) {\n            newDragArea[3] -= partials;\n          } else {\n            newDragArea[3] += partials ? _fill : 0;\n          }\n        } else if (dragDirection === 'up') {\n          var _fill2 = baseAreaEndRow - partials - farthestCollection.row + 1;\n          var _newLimit2 = newDragArea[0] + _fill2;\n          if (_newLimit2 < 0) {\n            newDragArea[0] += partials;\n          } else {\n            newDragArea[0] -= partials ? _fill2 : 0;\n          }\n        } else if (dragDirection === 'left') {\n          var _fill3 = baseAreaEndColumn - partials - farthestCollection.col + 1;\n          var _newLimit3 = newDragArea[1] + _fill3;\n          if (_newLimit3 < 0) {\n            newDragArea[1] += partials;\n          } else {\n            newDragArea[1] -= partials ? _fill3 : 0;\n          }\n        }\n      }\n      this.updateCurrentFillCache({\n        baseArea: baseArea,\n        dragDirection: dragDirection,\n        foundMergedCells: foundMergedCells,\n        fillSize: fillSize,\n        dragArea: newDragArea,\n        cycleLength: fullCycle\n      });\n      return newDragArea;\n    }\n\n    /**\n     * Update the current fill cache with the provided object.\n     *\n     * @private\n     * @param {object} updateObject The current filled object cache.\n     */\n  }, {\n    key: \"updateCurrentFillCache\",\n    value: function updateCurrentFillCache(updateObject) {\n      if (!this.currentFillData) {\n        this.currentFillData = {};\n      }\n      extend(this.currentFillData, updateObject);\n    }\n\n    /**\n     * Get the \"length\" of the drag area.\n     *\n     * @private\n     * @param {Array} baseArea The base selection area.\n     * @param {Array} dragArea The drag area (containing the base area).\n     * @param {string} direction The drag direction.\n     * @returns {number|null} The \"length\" (height or width, depending on the direction) of the drag.\n     */\n  }, {\n    key: \"getAutofillSize\",\n    value: function getAutofillSize(baseArea, dragArea, direction) {\n      var _baseArea2 = _slicedToArray(baseArea, 4),\n        baseAreaStartRow = _baseArea2[0],\n        baseAreaStartColumn = _baseArea2[1],\n        baseAreaEndRow = _baseArea2[2],\n        baseAreaEndColumn = _baseArea2[3];\n      var _dragArea = _slicedToArray(dragArea, 4),\n        dragAreaStartRow = _dragArea[0],\n        dragAreaStartColumn = _dragArea[1],\n        dragAreaEndRow = _dragArea[2],\n        dragAreaEndColumn = _dragArea[3];\n      switch (direction) {\n        case 'up':\n          return baseAreaStartRow - dragAreaStartRow;\n        case 'down':\n          return dragAreaEndRow - baseAreaEndRow;\n        case 'left':\n          return baseAreaStartColumn - dragAreaStartColumn;\n        case 'right':\n          return dragAreaEndColumn - baseAreaEndColumn;\n        default:\n          return null;\n      }\n    }\n\n    /**\n     * Trim the default drag area (containing the selection area) to the drag-only area.\n     *\n     * @private\n     * @param {Array} baseArea The base selection area.\n     * @param {Array} dragArea The base selection area extended by the drag area.\n     * @param {string} direction Drag direction.\n     * @returns {Array|null} Array representing the drag area coordinates.\n     */\n  }, {\n    key: \"getDragArea\",\n    value: function getDragArea(baseArea, dragArea, direction) {\n      var _baseArea3 = _slicedToArray(baseArea, 4),\n        baseAreaStartRow = _baseArea3[0],\n        baseAreaStartColumn = _baseArea3[1],\n        baseAreaEndRow = _baseArea3[2],\n        baseAreaEndColumn = _baseArea3[3];\n      var _dragArea2 = _slicedToArray(dragArea, 4),\n        dragAreaStartRow = _dragArea2[0],\n        dragAreaStartColumn = _dragArea2[1],\n        dragAreaEndRow = _dragArea2[2],\n        dragAreaEndColumn = _dragArea2[3];\n      switch (direction) {\n        case 'up':\n          return [dragAreaStartRow, dragAreaStartColumn, baseAreaStartRow - 1, baseAreaEndColumn];\n        case 'down':\n          return [baseAreaEndRow + 1, baseAreaStartColumn, dragAreaEndRow, baseAreaEndColumn];\n        case 'left':\n          return [dragAreaStartRow, dragAreaStartColumn, baseAreaEndRow, baseAreaStartColumn - 1];\n        case 'right':\n          return [baseAreaStartRow, baseAreaEndColumn + 1, dragAreaEndRow, dragAreaEndColumn];\n        default:\n          return null;\n      }\n    }\n\n    /**\n     * Get the to-be-farthest merged cell in the newly filled area.\n     *\n     * @private\n     * @param {Array} baseArea The base selection area.\n     * @param {Array} dragArea The drag area (containing the base area).\n     * @param {string} direction The drag direction.\n     * @param {Array} mergedCellArray Array of the merged cells found in the base area.\n     * @returns {MergedCellCoords|null}\n     */\n  }, {\n    key: \"getFarthestCollection\",\n    value: function getFarthestCollection(baseArea, dragArea, direction, mergedCellArray) {\n      var _baseArea4 = _slicedToArray(baseArea, 4),\n        baseAreaStartRow = _baseArea4[0],\n        baseAreaStartColumn = _baseArea4[1],\n        baseAreaEndRow = _baseArea4[2],\n        baseAreaEndColumn = _baseArea4[3];\n      var verticalDirection = ['up', 'down'].indexOf(direction) > -1;\n      var baseEnd = verticalDirection ? baseAreaEndRow : baseAreaEndColumn;\n      var baseStart = verticalDirection ? baseAreaStartRow : baseAreaStartColumn;\n      var fillSize = this.getAutofillSize(baseArea, dragArea, direction);\n      var fullCycle = verticalDirection ? baseAreaEndRow - baseAreaStartRow + 1 : baseAreaEndColumn - baseAreaStartColumn + 1;\n      var fulls = Math.floor(fillSize / fullCycle) * fullCycle;\n      var partials = fillSize - fulls;\n      var inclusionFunctionName = null;\n      var farthestCollection = null;\n      var endOfDragRecreationIndex = null;\n      switch (direction) {\n        case 'up':\n          inclusionFunctionName = 'includesVertically';\n          endOfDragRecreationIndex = baseEnd - partials + 1;\n          break;\n        case 'left':\n          inclusionFunctionName = 'includesHorizontally';\n          endOfDragRecreationIndex = baseEnd - partials + 1;\n          break;\n        case 'down':\n          inclusionFunctionName = 'includesVertically';\n          endOfDragRecreationIndex = baseStart + partials - 1;\n          break;\n        case 'right':\n          inclusionFunctionName = 'includesHorizontally';\n          endOfDragRecreationIndex = baseStart + partials - 1;\n          break;\n        default:\n      }\n      arrayEach(mergedCellArray, function (currentCollection) {\n        if (currentCollection[inclusionFunctionName](endOfDragRecreationIndex) && currentCollection.isFarther(farthestCollection, direction)) {\n          farthestCollection = currentCollection;\n        }\n      });\n      return farthestCollection;\n    }\n\n    /**\n     * Recreate the merged cells after the autofill process.\n     *\n     * @param {Array} changes Changes made.\n     */\n  }, {\n    key: \"recreateAfterDataPopulation\",\n    value: function recreateAfterDataPopulation(changes) {\n      if (!this.currentFillData) {\n        return;\n      }\n      var fillRange = this.getRangeFromChanges(changes);\n      var foundMergedCells = this.currentFillData.foundMergedCells;\n      var dragDirection = this.currentFillData.dragDirection;\n      var inBounds = function inBounds(current, offset) {\n        switch (dragDirection) {\n          case 'up':\n            return current.row - offset >= fillRange.from.row;\n          case 'down':\n            return current.row + current.rowspan - 1 + offset <= fillRange.to.row;\n          case 'left':\n            return current.col - offset >= fillRange.from.column;\n          case 'right':\n            return current.col + current.colspan - 1 + offset <= fillRange.to.column;\n          default:\n            return null;\n        }\n      };\n      var fillOffset = 0;\n      var current = null;\n      var multiplier = 1;\n      do {\n        for (var j = 0; j < foundMergedCells.length; j += 1) {\n          current = foundMergedCells[j];\n          fillOffset = multiplier * this.currentFillData.cycleLength;\n          if (inBounds(current, fillOffset)) {\n            switch (dragDirection) {\n              case 'up':\n                this.plugin.mergedCellsCollection.add({\n                  row: current.row - fillOffset,\n                  rowspan: current.rowspan,\n                  col: current.col,\n                  colspan: current.colspan\n                });\n                break;\n              case 'down':\n                this.plugin.mergedCellsCollection.add({\n                  row: current.row + fillOffset,\n                  rowspan: current.rowspan,\n                  col: current.col,\n                  colspan: current.colspan\n                });\n                break;\n              case 'left':\n                this.plugin.mergedCellsCollection.add({\n                  row: current.row,\n                  rowspan: current.rowspan,\n                  col: current.col - fillOffset,\n                  colspan: current.colspan\n                });\n                break;\n              case 'right':\n                this.plugin.mergedCellsCollection.add({\n                  row: current.row,\n                  rowspan: current.rowspan,\n                  col: current.col + fillOffset,\n                  colspan: current.colspan\n                });\n                break;\n              default:\n            }\n          }\n          if (j === foundMergedCells.length - 1) {\n            multiplier += 1;\n          }\n        }\n      } while (inBounds(current, fillOffset));\n      this.currentFillData = null;\n      this.plugin.hot.render();\n      if (foundMergedCells.length > 0) {\n        this.plugin.ifChromeForceRepaint();\n      }\n    }\n\n    /**\n     * Get the drag range from the changes made.\n     *\n     * @private\n     * @param {Array} changes The changes made.\n     * @returns {object} Object with `from` and `to` properties, both containing `row` and `column` keys.\n     */\n  }, {\n    key: \"getRangeFromChanges\",\n    value: function getRangeFromChanges(changes) {\n      var _this = this;\n      var rows = {\n        min: null,\n        max: null\n      };\n      var columns = {\n        min: null,\n        max: null\n      };\n      arrayEach(changes, function (change) {\n        var rowIndex = change[0];\n        var columnIndex = _this.plugin.hot.propToCol(change[1]);\n        if (rows.min === null || rowIndex < rows.min) {\n          rows.min = rowIndex;\n        }\n        if (rows.max === null || rowIndex > rows.max) {\n          rows.max = rowIndex;\n        }\n        if (columns.min === null || columnIndex < columns.min) {\n          columns.min = columnIndex;\n        }\n        if (columns.max === null || columnIndex > columns.max) {\n          columns.max = columnIndex;\n        }\n      });\n      return {\n        from: {\n          row: rows.min,\n          column: columns.min\n        },\n        to: {\n          row: rows.max,\n          column: columns.max\n        }\n      };\n    }\n\n    /**\n     * Check if the drag area contains any merged cells.\n     *\n     * @param {Array} baseArea The base selection area.\n     * @param {Array} fullArea The base area extended by the drag area.\n     * @param {string} direction Drag direction.\n     * @returns {boolean}\n     */\n  }, {\n    key: \"dragAreaOverlapsCollections\",\n    value: function dragAreaOverlapsCollections(baseArea, fullArea, direction) {\n      var dragArea = this.getDragArea(baseArea, fullArea, direction);\n      var _dragArea3 = _slicedToArray(dragArea, 4),\n        dragAreaStartRow = _dragArea3[0],\n        dragAreaStartColumn = _dragArea3[1],\n        dragAreaEndRow = _dragArea3[2],\n        dragAreaEndColumn = _dragArea3[3];\n      var topLeft = this.plugin.hot._createCellCoords(dragAreaStartRow, dragAreaStartColumn);\n      var bottomRight = this.plugin.hot._createCellCoords(dragAreaEndRow, dragAreaEndColumn);\n      var dragRange = this.plugin.hot._createCellRange(topLeft, topLeft, bottomRight);\n      return !!this.mergedCellsCollection.getWithinRange(dragRange, true);\n    }\n  }]);\n  return AutofillCalculations;\n}();\nexport default AutofillCalculations;","map":{"version":3,"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","o","minLen","_arrayLikeToArray","n","Object","toString","call","slice","name","Array","from","test","len","length","arr2","_i","_s","_e","_x","_r","_arr","_n","_d","next","done","push","value","err","return","isArray","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","_toPropertyKey","key","_createClass","protoProps","staticProps","arg","_toPrimitive","String","input","hint","prim","toPrimitive","undefined","res","Number","extend","arrayEach","AutofillCalculations","plugin","mergedCellsCollection","currentFillData","correctSelectionAreaSize","selectionArea","mergedCell","get","rowspan","colspan","getDirection","finalArea","direction","snapDragArea","baseArea","dragArea","dragDirection","foundMergedCells","newDragArea","fillSize","getAutofillSize","_baseArea","baseAreaStartRow","baseAreaStartColumn","baseAreaEndRow","baseAreaEndColumn","verticalDirection","indexOf","fullCycle","fulls","Math","floor","partials","farthestCollection","getFarthestCollection","fill","row","newLimit","hot","countRows","_fill","col","_newLimit","countCols","_fill2","_newLimit2","_fill3","_newLimit3","updateCurrentFillCache","cycleLength","updateObject","_baseArea2","_dragArea","dragAreaStartRow","dragAreaStartColumn","dragAreaEndRow","dragAreaEndColumn","getDragArea","_baseArea3","_dragArea2","mergedCellArray","_baseArea4","baseEnd","baseStart","inclusionFunctionName","endOfDragRecreationIndex","currentCollection","isFarther","recreateAfterDataPopulation","changes","fillRange","getRangeFromChanges","inBounds","current","offset","to","column","fillOffset","multiplier","j","add","render","ifChromeForceRepaint","_this","rows","min","max","columns","change","rowIndex","columnIndex","propToCol","dragAreaOverlapsCollections","fullArea","_dragArea3","topLeft","_createCellCoords","bottomRight","dragRange","_createCellRange","getWithinRange"],"sources":["/home/rstorey/wwwdev/Blucktool/node_modules/handsontable/plugins/mergeCells/calculations/autofill.mjs"],"sourcesContent":["function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.symbol.to-primitive.js\";\nimport \"core-js/modules/es.date.to-primitive.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport { extend } from \"../../../helpers/object.mjs\";\nimport { arrayEach } from \"../../../helpers/array.mjs\";\n/**\n * Class responsible for all of the Autofill-related operations on merged cells.\n *\n * @private\n * @class AutofillCalculations\n */\nvar AutofillCalculations = /*#__PURE__*/function () {\n  function AutofillCalculations(plugin) {\n    _classCallCheck(this, AutofillCalculations);\n    /**\n     * Reference to the Merge Cells plugin.\n     *\n     * @type {MergeCells}\n     */\n    this.plugin = plugin;\n    /**\n     * Reference to the MergedCellsCollection class instance.\n     *\n     * @type {MergedCellsCollection}\n     */\n    this.mergedCellsCollection = this.plugin.mergedCellsCollection;\n    /**\n     * Cache of the currently processed autofill data.\n     *\n     * @private\n     * @type {object}\n     */\n    this.currentFillData = null;\n  }\n\n  /**\n   * Correct the provided selection area, so it's not selecting only a part of a merged cell.\n   *\n   * @param {Array} selectionArea The selection to correct.\n   */\n  _createClass(AutofillCalculations, [{\n    key: \"correctSelectionAreaSize\",\n    value: function correctSelectionAreaSize(selectionArea) {\n      if (selectionArea[0] === selectionArea[2] && selectionArea[1] === selectionArea[3]) {\n        var mergedCell = this.mergedCellsCollection.get(selectionArea[0], selectionArea[1]);\n        if (mergedCell) {\n          selectionArea[2] = selectionArea[0] + mergedCell.rowspan - 1;\n          selectionArea[3] = selectionArea[1] + mergedCell.colspan - 1;\n        }\n      }\n    }\n\n    /**\n     * Get the direction of the autofill process.\n     *\n     * @param {Array} selectionArea The selection area.\n     * @param {Array} finalArea The final area (base + drag).\n     * @returns {string} `up`, `down`, `left` or `right`.\n     */\n  }, {\n    key: \"getDirection\",\n    value: function getDirection(selectionArea, finalArea) {\n      var direction = null;\n      if (finalArea[0] === selectionArea[0] && finalArea[1] === selectionArea[1] && finalArea[3] === selectionArea[3]) {\n        direction = 'down';\n      } else if (finalArea[2] === selectionArea[2] && finalArea[1] === selectionArea[1] && finalArea[3] === selectionArea[3]) {\n        direction = 'up';\n      } else if (finalArea[1] === selectionArea[1] && finalArea[2] === selectionArea[2]) {\n        direction = 'right';\n      } else {\n        direction = 'left';\n      }\n      return direction;\n    }\n\n    /**\n     * Snap the drag area to the farthest merged cell, so it won't clip any of the merged cells.\n     *\n     * @param {Array} baseArea The base selected area.\n     * @param {Array} dragArea The drag area.\n     * @param {string} dragDirection The autofill drag direction.\n     * @param {Array} foundMergedCells MergeCellCoords found in the base selection area.\n     * @returns {Array} The new drag area.\n     */\n  }, {\n    key: \"snapDragArea\",\n    value: function snapDragArea(baseArea, dragArea, dragDirection, foundMergedCells) {\n      var newDragArea = dragArea.slice(0);\n      var fillSize = this.getAutofillSize(baseArea, dragArea, dragDirection);\n      var _baseArea = _slicedToArray(baseArea, 4),\n        baseAreaStartRow = _baseArea[0],\n        baseAreaStartColumn = _baseArea[1],\n        baseAreaEndRow = _baseArea[2],\n        baseAreaEndColumn = _baseArea[3];\n      var verticalDirection = ['up', 'down'].indexOf(dragDirection) > -1;\n      var fullCycle = verticalDirection ? baseAreaEndRow - baseAreaStartRow + 1 : baseAreaEndColumn - baseAreaStartColumn + 1;\n      var fulls = Math.floor(fillSize / fullCycle) * fullCycle;\n      var partials = fillSize - fulls;\n      var farthestCollection = this.getFarthestCollection(baseArea, dragArea, dragDirection, foundMergedCells);\n      if (farthestCollection) {\n        if (dragDirection === 'down') {\n          var fill = farthestCollection.row + farthestCollection.rowspan - baseAreaStartRow - partials;\n          var newLimit = newDragArea[2] + fill;\n          if (newLimit >= this.plugin.hot.countRows()) {\n            newDragArea[2] -= partials;\n          } else {\n            newDragArea[2] += partials ? fill : 0;\n          }\n        } else if (dragDirection === 'right') {\n          var _fill = farthestCollection.col + farthestCollection.colspan - baseAreaStartColumn - partials;\n          var _newLimit = newDragArea[3] + _fill;\n          if (_newLimit >= this.plugin.hot.countCols()) {\n            newDragArea[3] -= partials;\n          } else {\n            newDragArea[3] += partials ? _fill : 0;\n          }\n        } else if (dragDirection === 'up') {\n          var _fill2 = baseAreaEndRow - partials - farthestCollection.row + 1;\n          var _newLimit2 = newDragArea[0] + _fill2;\n          if (_newLimit2 < 0) {\n            newDragArea[0] += partials;\n          } else {\n            newDragArea[0] -= partials ? _fill2 : 0;\n          }\n        } else if (dragDirection === 'left') {\n          var _fill3 = baseAreaEndColumn - partials - farthestCollection.col + 1;\n          var _newLimit3 = newDragArea[1] + _fill3;\n          if (_newLimit3 < 0) {\n            newDragArea[1] += partials;\n          } else {\n            newDragArea[1] -= partials ? _fill3 : 0;\n          }\n        }\n      }\n      this.updateCurrentFillCache({\n        baseArea: baseArea,\n        dragDirection: dragDirection,\n        foundMergedCells: foundMergedCells,\n        fillSize: fillSize,\n        dragArea: newDragArea,\n        cycleLength: fullCycle\n      });\n      return newDragArea;\n    }\n\n    /**\n     * Update the current fill cache with the provided object.\n     *\n     * @private\n     * @param {object} updateObject The current filled object cache.\n     */\n  }, {\n    key: \"updateCurrentFillCache\",\n    value: function updateCurrentFillCache(updateObject) {\n      if (!this.currentFillData) {\n        this.currentFillData = {};\n      }\n      extend(this.currentFillData, updateObject);\n    }\n\n    /**\n     * Get the \"length\" of the drag area.\n     *\n     * @private\n     * @param {Array} baseArea The base selection area.\n     * @param {Array} dragArea The drag area (containing the base area).\n     * @param {string} direction The drag direction.\n     * @returns {number|null} The \"length\" (height or width, depending on the direction) of the drag.\n     */\n  }, {\n    key: \"getAutofillSize\",\n    value: function getAutofillSize(baseArea, dragArea, direction) {\n      var _baseArea2 = _slicedToArray(baseArea, 4),\n        baseAreaStartRow = _baseArea2[0],\n        baseAreaStartColumn = _baseArea2[1],\n        baseAreaEndRow = _baseArea2[2],\n        baseAreaEndColumn = _baseArea2[3];\n      var _dragArea = _slicedToArray(dragArea, 4),\n        dragAreaStartRow = _dragArea[0],\n        dragAreaStartColumn = _dragArea[1],\n        dragAreaEndRow = _dragArea[2],\n        dragAreaEndColumn = _dragArea[3];\n      switch (direction) {\n        case 'up':\n          return baseAreaStartRow - dragAreaStartRow;\n        case 'down':\n          return dragAreaEndRow - baseAreaEndRow;\n        case 'left':\n          return baseAreaStartColumn - dragAreaStartColumn;\n        case 'right':\n          return dragAreaEndColumn - baseAreaEndColumn;\n        default:\n          return null;\n      }\n    }\n\n    /**\n     * Trim the default drag area (containing the selection area) to the drag-only area.\n     *\n     * @private\n     * @param {Array} baseArea The base selection area.\n     * @param {Array} dragArea The base selection area extended by the drag area.\n     * @param {string} direction Drag direction.\n     * @returns {Array|null} Array representing the drag area coordinates.\n     */\n  }, {\n    key: \"getDragArea\",\n    value: function getDragArea(baseArea, dragArea, direction) {\n      var _baseArea3 = _slicedToArray(baseArea, 4),\n        baseAreaStartRow = _baseArea3[0],\n        baseAreaStartColumn = _baseArea3[1],\n        baseAreaEndRow = _baseArea3[2],\n        baseAreaEndColumn = _baseArea3[3];\n      var _dragArea2 = _slicedToArray(dragArea, 4),\n        dragAreaStartRow = _dragArea2[0],\n        dragAreaStartColumn = _dragArea2[1],\n        dragAreaEndRow = _dragArea2[2],\n        dragAreaEndColumn = _dragArea2[3];\n      switch (direction) {\n        case 'up':\n          return [dragAreaStartRow, dragAreaStartColumn, baseAreaStartRow - 1, baseAreaEndColumn];\n        case 'down':\n          return [baseAreaEndRow + 1, baseAreaStartColumn, dragAreaEndRow, baseAreaEndColumn];\n        case 'left':\n          return [dragAreaStartRow, dragAreaStartColumn, baseAreaEndRow, baseAreaStartColumn - 1];\n        case 'right':\n          return [baseAreaStartRow, baseAreaEndColumn + 1, dragAreaEndRow, dragAreaEndColumn];\n        default:\n          return null;\n      }\n    }\n\n    /**\n     * Get the to-be-farthest merged cell in the newly filled area.\n     *\n     * @private\n     * @param {Array} baseArea The base selection area.\n     * @param {Array} dragArea The drag area (containing the base area).\n     * @param {string} direction The drag direction.\n     * @param {Array} mergedCellArray Array of the merged cells found in the base area.\n     * @returns {MergedCellCoords|null}\n     */\n  }, {\n    key: \"getFarthestCollection\",\n    value: function getFarthestCollection(baseArea, dragArea, direction, mergedCellArray) {\n      var _baseArea4 = _slicedToArray(baseArea, 4),\n        baseAreaStartRow = _baseArea4[0],\n        baseAreaStartColumn = _baseArea4[1],\n        baseAreaEndRow = _baseArea4[2],\n        baseAreaEndColumn = _baseArea4[3];\n      var verticalDirection = ['up', 'down'].indexOf(direction) > -1;\n      var baseEnd = verticalDirection ? baseAreaEndRow : baseAreaEndColumn;\n      var baseStart = verticalDirection ? baseAreaStartRow : baseAreaStartColumn;\n      var fillSize = this.getAutofillSize(baseArea, dragArea, direction);\n      var fullCycle = verticalDirection ? baseAreaEndRow - baseAreaStartRow + 1 : baseAreaEndColumn - baseAreaStartColumn + 1;\n      var fulls = Math.floor(fillSize / fullCycle) * fullCycle;\n      var partials = fillSize - fulls;\n      var inclusionFunctionName = null;\n      var farthestCollection = null;\n      var endOfDragRecreationIndex = null;\n      switch (direction) {\n        case 'up':\n          inclusionFunctionName = 'includesVertically';\n          endOfDragRecreationIndex = baseEnd - partials + 1;\n          break;\n        case 'left':\n          inclusionFunctionName = 'includesHorizontally';\n          endOfDragRecreationIndex = baseEnd - partials + 1;\n          break;\n        case 'down':\n          inclusionFunctionName = 'includesVertically';\n          endOfDragRecreationIndex = baseStart + partials - 1;\n          break;\n        case 'right':\n          inclusionFunctionName = 'includesHorizontally';\n          endOfDragRecreationIndex = baseStart + partials - 1;\n          break;\n        default:\n      }\n      arrayEach(mergedCellArray, function (currentCollection) {\n        if (currentCollection[inclusionFunctionName](endOfDragRecreationIndex) && currentCollection.isFarther(farthestCollection, direction)) {\n          farthestCollection = currentCollection;\n        }\n      });\n      return farthestCollection;\n    }\n\n    /**\n     * Recreate the merged cells after the autofill process.\n     *\n     * @param {Array} changes Changes made.\n     */\n  }, {\n    key: \"recreateAfterDataPopulation\",\n    value: function recreateAfterDataPopulation(changes) {\n      if (!this.currentFillData) {\n        return;\n      }\n      var fillRange = this.getRangeFromChanges(changes);\n      var foundMergedCells = this.currentFillData.foundMergedCells;\n      var dragDirection = this.currentFillData.dragDirection;\n      var inBounds = function inBounds(current, offset) {\n        switch (dragDirection) {\n          case 'up':\n            return current.row - offset >= fillRange.from.row;\n          case 'down':\n            return current.row + current.rowspan - 1 + offset <= fillRange.to.row;\n          case 'left':\n            return current.col - offset >= fillRange.from.column;\n          case 'right':\n            return current.col + current.colspan - 1 + offset <= fillRange.to.column;\n          default:\n            return null;\n        }\n      };\n      var fillOffset = 0;\n      var current = null;\n      var multiplier = 1;\n      do {\n        for (var j = 0; j < foundMergedCells.length; j += 1) {\n          current = foundMergedCells[j];\n          fillOffset = multiplier * this.currentFillData.cycleLength;\n          if (inBounds(current, fillOffset)) {\n            switch (dragDirection) {\n              case 'up':\n                this.plugin.mergedCellsCollection.add({\n                  row: current.row - fillOffset,\n                  rowspan: current.rowspan,\n                  col: current.col,\n                  colspan: current.colspan\n                });\n                break;\n              case 'down':\n                this.plugin.mergedCellsCollection.add({\n                  row: current.row + fillOffset,\n                  rowspan: current.rowspan,\n                  col: current.col,\n                  colspan: current.colspan\n                });\n                break;\n              case 'left':\n                this.plugin.mergedCellsCollection.add({\n                  row: current.row,\n                  rowspan: current.rowspan,\n                  col: current.col - fillOffset,\n                  colspan: current.colspan\n                });\n                break;\n              case 'right':\n                this.plugin.mergedCellsCollection.add({\n                  row: current.row,\n                  rowspan: current.rowspan,\n                  col: current.col + fillOffset,\n                  colspan: current.colspan\n                });\n                break;\n              default:\n            }\n          }\n          if (j === foundMergedCells.length - 1) {\n            multiplier += 1;\n          }\n        }\n      } while (inBounds(current, fillOffset));\n      this.currentFillData = null;\n      this.plugin.hot.render();\n      if (foundMergedCells.length > 0) {\n        this.plugin.ifChromeForceRepaint();\n      }\n    }\n\n    /**\n     * Get the drag range from the changes made.\n     *\n     * @private\n     * @param {Array} changes The changes made.\n     * @returns {object} Object with `from` and `to` properties, both containing `row` and `column` keys.\n     */\n  }, {\n    key: \"getRangeFromChanges\",\n    value: function getRangeFromChanges(changes) {\n      var _this = this;\n      var rows = {\n        min: null,\n        max: null\n      };\n      var columns = {\n        min: null,\n        max: null\n      };\n      arrayEach(changes, function (change) {\n        var rowIndex = change[0];\n        var columnIndex = _this.plugin.hot.propToCol(change[1]);\n        if (rows.min === null || rowIndex < rows.min) {\n          rows.min = rowIndex;\n        }\n        if (rows.max === null || rowIndex > rows.max) {\n          rows.max = rowIndex;\n        }\n        if (columns.min === null || columnIndex < columns.min) {\n          columns.min = columnIndex;\n        }\n        if (columns.max === null || columnIndex > columns.max) {\n          columns.max = columnIndex;\n        }\n      });\n      return {\n        from: {\n          row: rows.min,\n          column: columns.min\n        },\n        to: {\n          row: rows.max,\n          column: columns.max\n        }\n      };\n    }\n\n    /**\n     * Check if the drag area contains any merged cells.\n     *\n     * @param {Array} baseArea The base selection area.\n     * @param {Array} fullArea The base area extended by the drag area.\n     * @param {string} direction Drag direction.\n     * @returns {boolean}\n     */\n  }, {\n    key: \"dragAreaOverlapsCollections\",\n    value: function dragAreaOverlapsCollections(baseArea, fullArea, direction) {\n      var dragArea = this.getDragArea(baseArea, fullArea, direction);\n      var _dragArea3 = _slicedToArray(dragArea, 4),\n        dragAreaStartRow = _dragArea3[0],\n        dragAreaStartColumn = _dragArea3[1],\n        dragAreaEndRow = _dragArea3[2],\n        dragAreaEndColumn = _dragArea3[3];\n      var topLeft = this.plugin.hot._createCellCoords(dragAreaStartRow, dragAreaStartColumn);\n      var bottomRight = this.plugin.hot._createCellCoords(dragAreaEndRow, dragAreaEndColumn);\n      var dragRange = this.plugin.hot._createCellRange(topLeft, topLeft, bottomRight);\n      return !!this.mergedCellsCollection.getWithinRange(dragRange, true);\n    }\n  }]);\n  return AutofillCalculations;\n}();\nexport default AutofillCalculations;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}