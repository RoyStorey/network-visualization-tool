{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (null != _i) {\n    var _s,\n      _e,\n      _x,\n      _r,\n      _arr = [],\n      _n = !0,\n      _d = !1;\n    try {\n      if (_x = (_i = _i.call(arr)).next, 0 === i) {\n        if (Object(_i) !== _i) return;\n        _n = !1;\n      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);\n    } catch (err) {\n      _d = !0, _e = err;\n    } finally {\n      try {\n        if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return;\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nfunction _get() {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get.bind();\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n      if (desc.get) {\n        return desc.get.call(arguments.length < 3 ? target : receiver);\n      }\n      return desc.value;\n    };\n  }\n  return _get.apply(this, arguments);\n}\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n  return object;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return _possibleConstructorReturn(this, result);\n  };\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nimport { BasePlugin } from \"../base/index.mjs\";\nimport Hooks from \"../../pluginHooks.mjs\";\nimport MergedCellsCollection from \"./cellsCollection.mjs\";\nimport MergedCellCoords from \"./cellCoords.mjs\";\nimport AutofillCalculations from \"./calculations/autofill.mjs\";\nimport SelectionCalculations from \"./calculations/selection.mjs\";\nimport toggleMergeItem from \"./contextMenuItem/toggleMerge.mjs\";\nimport { arrayEach } from \"../../helpers/array.mjs\";\nimport { isObject, clone } from \"../../helpers/object.mjs\";\nimport { warn } from \"../../helpers/console.mjs\";\nimport { rangeEach } from \"../../helpers/number.mjs\";\nimport { applySpanProperties } from \"./utils.mjs\";\nimport { getStyle } from \"../../helpers/dom/element.mjs\";\nimport { isChrome } from \"../../helpers/browser.mjs\";\nHooks.getSingleton().register('beforeMergeCells');\nHooks.getSingleton().register('afterMergeCells');\nHooks.getSingleton().register('beforeUnmergeCells');\nHooks.getSingleton().register('afterUnmergeCells');\nexport var PLUGIN_KEY = 'mergeCells';\nexport var PLUGIN_PRIORITY = 150;\nvar privatePool = new WeakMap();\nvar SHORTCUTS_GROUP = PLUGIN_KEY;\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * @plugin MergeCells\n * @class MergeCells\n *\n * @description\n * Plugin, which allows merging cells in the table (using the initial configuration, API or context menu).\n *\n * @example\n *\n * ::: only-for javascript\n * ```js\n * const hot = new Handsontable(document.getElementById('example'), {\n *  data: getData(),\n *  mergeCells: [\n *    {row: 0, col: 3, rowspan: 3, colspan: 3},\n *    {row: 2, col: 6, rowspan: 2, colspan: 2},\n *    {row: 4, col: 8, rowspan: 3, colspan: 3}\n *  ],\n * ```\n * :::\n *\n * ::: only-for react\n * ```jsx\n * <HotTable\n *   data={getData()}\n *   // enable plugin\n *   mergeCells={[\n *    {row: 0, col: 3, rowspan: 3, colspan: 3},\n *    {row: 2, col: 6, rowspan: 2, colspan: 2},\n *    {row: 4, col: 8, rowspan: 3, colspan: 3}\n *   ]}\n * />\n * ```\n * :::\n */\nexport var MergeCells = /*#__PURE__*/function (_BasePlugin) {\n  _inherits(MergeCells, _BasePlugin);\n  var _super = _createSuper(MergeCells);\n  function MergeCells(hotInstance) {\n    var _this;\n    _classCallCheck(this, MergeCells);\n    _this = _super.call(this, hotInstance);\n    privatePool.set(_assertThisInitialized(_this), {\n      lastDesiredCoords: null\n    });\n\n    /**\n     * A container for all the merged cells.\n     *\n     * @private\n     * @type {MergedCellsCollection}\n     */\n    _this.mergedCellsCollection = null;\n    /**\n     * Instance of the class responsible for all the autofill-related calculations.\n     *\n     * @private\n     * @type {AutofillCalculations}\n     */\n    _this.autofillCalculations = null;\n    /**\n     * Instance of the class responsible for the selection-related calculations.\n     *\n     * @private\n     * @type {SelectionCalculations}\n     */\n    _this.selectionCalculations = null;\n    return _this;\n  }\n\n  /**\n   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` then the {@link MergeCells#enablePlugin} method is called.\n   *\n   * @returns {boolean}\n   */\n  _createClass(MergeCells, [{\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      return !!this.hot.getSettings()[PLUGIN_KEY];\n    }\n\n    /**\n     * Enables the plugin functionality for this Handsontable instance.\n     */\n  }, {\n    key: \"enablePlugin\",\n    value: function enablePlugin() {\n      var _this2 = this;\n      if (this.enabled) {\n        return;\n      }\n      this.mergedCellsCollection = new MergedCellsCollection(this);\n      this.autofillCalculations = new AutofillCalculations(this);\n      this.selectionCalculations = new SelectionCalculations(this);\n      this.addHook('afterInit', function () {\n        return _this2.onAfterInit.apply(_this2, arguments);\n      });\n      this.addHook('modifyTransformStart', function () {\n        return _this2.onModifyTransformStart.apply(_this2, arguments);\n      });\n      this.addHook('afterModifyTransformStart', function () {\n        return _this2.onAfterModifyTransformStart.apply(_this2, arguments);\n      });\n      this.addHook('modifyTransformEnd', function () {\n        return _this2.onModifyTransformEnd.apply(_this2, arguments);\n      });\n      this.addHook('modifyGetCellCoords', function () {\n        return _this2.onModifyGetCellCoords.apply(_this2, arguments);\n      });\n      this.addHook('beforeSetRangeStart', function () {\n        return _this2.onBeforeSetRangeStart.apply(_this2, arguments);\n      });\n      this.addHook('beforeSetRangeStartOnly', function () {\n        return _this2.onBeforeSetRangeStart.apply(_this2, arguments);\n      });\n      this.addHook('beforeSetRangeEnd', function () {\n        return _this2.onBeforeSetRangeEnd.apply(_this2, arguments);\n      });\n      this.addHook('afterIsMultipleSelection', function () {\n        return _this2.onAfterIsMultipleSelection.apply(_this2, arguments);\n      });\n      this.addHook('afterRenderer', function () {\n        return _this2.onAfterRenderer.apply(_this2, arguments);\n      });\n      this.addHook('afterContextMenuDefaultOptions', function () {\n        return _this2.addMergeActionsToContextMenu.apply(_this2, arguments);\n      });\n      this.addHook('afterGetCellMeta', function () {\n        return _this2.onAfterGetCellMeta.apply(_this2, arguments);\n      });\n      this.addHook('afterViewportRowCalculatorOverride', function () {\n        return _this2.onAfterViewportRowCalculatorOverride.apply(_this2, arguments);\n      });\n      this.addHook('afterViewportColumnCalculatorOverride', function () {\n        return _this2.onAfterViewportColumnCalculatorOverride.apply(_this2, arguments);\n      });\n      this.addHook('modifyAutofillRange', function () {\n        return _this2.onModifyAutofillRange.apply(_this2, arguments);\n      });\n      this.addHook('afterCreateCol', function () {\n        return _this2.onAfterCreateCol.apply(_this2, arguments);\n      });\n      this.addHook('afterRemoveCol', function () {\n        return _this2.onAfterRemoveCol.apply(_this2, arguments);\n      });\n      this.addHook('afterCreateRow', function () {\n        return _this2.onAfterCreateRow.apply(_this2, arguments);\n      });\n      this.addHook('afterRemoveRow', function () {\n        return _this2.onAfterRemoveRow.apply(_this2, arguments);\n      });\n      this.addHook('afterChange', function () {\n        return _this2.onAfterChange.apply(_this2, arguments);\n      });\n      this.addHook('beforeDrawBorders', function () {\n        return _this2.onBeforeDrawAreaBorders.apply(_this2, arguments);\n      });\n      this.addHook('afterDrawSelection', function () {\n        return _this2.onAfterDrawSelection.apply(_this2, arguments);\n      });\n      this.addHook('beforeRemoveCellClassNames', function () {\n        return _this2.onBeforeRemoveCellClassNames.apply(_this2, arguments);\n      });\n      this.addHook('beforeUndoStackChange', function (action, source) {\n        if (source === 'MergeCells') {\n          return false;\n        }\n      });\n      this.registerShortcuts();\n      _get(_getPrototypeOf(MergeCells.prototype), \"enablePlugin\", this).call(this);\n    }\n\n    /**\n     * Disables the plugin functionality for this Handsontable instance.\n     */\n  }, {\n    key: \"disablePlugin\",\n    value: function disablePlugin() {\n      this.clearCollections();\n      this.unregisterShortcuts();\n      this.hot.render();\n      _get(_getPrototypeOf(MergeCells.prototype), \"disablePlugin\", this).call(this);\n    }\n\n    /**\n     * Updates the plugin's state.\n     *\n     * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the\n     * following configuration options:\n     *  - [`mergeCells`](@/api/options.md#mergecells)\n     */\n  }, {\n    key: \"updatePlugin\",\n    value: function updatePlugin() {\n      var settings = this.hot.getSettings()[PLUGIN_KEY];\n      this.disablePlugin();\n      this.enablePlugin();\n      this.generateFromSettings(settings);\n      _get(_getPrototypeOf(MergeCells.prototype), \"updatePlugin\", this).call(this);\n    }\n\n    /**\n     * If the browser is recognized as Chrome, force an additional repaint to prevent showing the effects of a Chrome bug.\n     *\n     * Issue described in https://github.com/handsontable/dev-handsontable/issues/521.\n     *\n     * @private\n     */\n  }, {\n    key: \"ifChromeForceRepaint\",\n    value: function ifChromeForceRepaint() {\n      var _this3 = this;\n      if (!isChrome()) {\n        return;\n      }\n      var rowsToRefresh = [];\n      var rowIndexesToRefresh = [];\n      this.mergedCellsCollection.mergedCells.forEach(function (mergedCell) {\n        var row = mergedCell.row,\n          rowspan = mergedCell.rowspan;\n        for (var r = row + 1; r < row + rowspan; r++) {\n          rowIndexesToRefresh.push(r);\n        }\n      });\n\n      // Remove duplicates\n      rowIndexesToRefresh = _toConsumableArray(new Set(rowIndexesToRefresh));\n      rowIndexesToRefresh.forEach(function (rowIndex) {\n        var renderableRowIndex = _this3.hot.rowIndexMapper.getRenderableFromVisualIndex(rowIndex);\n        _this3.hot.view._wt.wtOverlays.getOverlays(true).map(function (overlay) {\n          return (overlay === null || overlay === void 0 ? void 0 : overlay.name) === 'master' ? overlay : overlay.clone.wtTable;\n        }).forEach(function (wtTableRef) {\n          var rowToRefresh = wtTableRef.getRow(renderableRowIndex);\n          if (rowToRefresh) {\n            // Modify the TR's `background` property to later modify it asynchronously.\n            // The background color is getting modified only with the alpha, so the change should not be visible (and is\n            // covered by the TDs' background color).\n            rowToRefresh.style.background = getStyle(rowToRefresh, 'backgroundColor').replace(')', ', 0.99)');\n            rowsToRefresh.push(rowToRefresh);\n          }\n        });\n      });\n\n      // Asynchronously revert the TRs' `background` property to force a fresh repaint.\n      this.hot._registerTimeout(function () {\n        rowsToRefresh.forEach(function (rowElement) {\n          rowElement.style.background = getStyle(rowElement, 'backgroundColor').replace(', 0.99)', ')');\n        });\n      }, 1);\n    }\n\n    /**\n     * Validates a single setting object, represented by a single merged cell information object.\n     *\n     * @private\n     * @param {object} setting An object with `row`, `col`, `rowspan` and `colspan` properties.\n     * @returns {boolean}\n     */\n  }, {\n    key: \"validateSetting\",\n    value: function validateSetting(setting) {\n      var valid = true;\n      if (!setting) {\n        return false;\n      }\n      if (MergedCellCoords.containsNegativeValues(setting)) {\n        warn(MergedCellCoords.NEGATIVE_VALUES_WARNING(setting));\n        valid = false;\n      } else if (MergedCellCoords.isOutOfBounds(setting, this.hot.countRows(), this.hot.countCols())) {\n        warn(MergedCellCoords.IS_OUT_OF_BOUNDS_WARNING(setting));\n        valid = false;\n      } else if (MergedCellCoords.isSingleCell(setting)) {\n        warn(MergedCellCoords.IS_SINGLE_CELL(setting));\n        valid = false;\n      } else if (MergedCellCoords.containsZeroSpan(setting)) {\n        warn(MergedCellCoords.ZERO_SPAN_WARNING(setting));\n        valid = false;\n      }\n      return valid;\n    }\n\n    /**\n     * Generates the merged cells from the settings provided to the plugin.\n     *\n     * @private\n     * @param {Array|boolean} settings The settings provided to the plugin.\n     */\n  }, {\n    key: \"generateFromSettings\",\n    value: function generateFromSettings(settings) {\n      var _this4 = this;\n      if (Array.isArray(settings)) {\n        var populatedNulls = [];\n        arrayEach(settings, function (setting) {\n          if (!_this4.validateSetting(setting)) {\n            return;\n          }\n          var highlight = _this4.hot._createCellCoords(setting.row, setting.col);\n          var rangeEnd = _this4.hot._createCellCoords(setting.row + setting.rowspan - 1, setting.col + setting.colspan - 1);\n          var mergeRange = _this4.hot._createCellRange(highlight, highlight, rangeEnd);\n\n          // Merging without data population.\n          _this4.mergeRange(mergeRange, true, true);\n          rangeEach(setting.row, setting.row + setting.rowspan - 1, function (rowIndex) {\n            rangeEach(setting.col, setting.col + setting.colspan - 1, function (columnIndex) {\n              // Not resetting a cell representing a merge area's value.\n              if ((rowIndex === setting.row && columnIndex === setting.col) === false) {\n                populatedNulls.push([rowIndex, columnIndex, null]);\n              }\n            });\n          });\n        });\n\n        // There are no merged cells. Thus, no data population is needed.\n        if (populatedNulls.length === 0) {\n          return;\n        }\n        this.hot.setDataAtCell(populatedNulls);\n      }\n    }\n\n    /**\n     * Clears the merged cells from the merged cell container.\n     */\n  }, {\n    key: \"clearCollections\",\n    value: function clearCollections() {\n      this.mergedCellsCollection.clear();\n    }\n\n    /**\n     * Returns `true` if a range is mergeable.\n     *\n     * @private\n     * @param {object} newMergedCellInfo Merged cell information object to test.\n     * @param {boolean} [auto=false] `true` if triggered at initialization.\n     * @returns {boolean}\n     */\n  }, {\n    key: \"canMergeRange\",\n    value: function canMergeRange(newMergedCellInfo) {\n      var auto = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      return auto ? true : this.validateSetting(newMergedCellInfo);\n    }\n\n    /**\n     * Merge or unmerge, based on last selected range.\n     *\n     * @private\n     */\n  }, {\n    key: \"toggleMergeOnSelection\",\n    value: function toggleMergeOnSelection() {\n      var currentRange = this.hot.getSelectedRangeLast();\n      if (!currentRange) {\n        return;\n      }\n      currentRange.setDirection(this.hot.isRtl() ? 'NE-SW' : 'NW-SE');\n      var from = currentRange.from,\n        to = currentRange.to;\n      this.toggleMerge(currentRange);\n      this.hot.selectCell(from.row, from.col, to.row, to.col, false);\n    }\n\n    /**\n     * Merges the selection provided as a cell range.\n     *\n     * @param {CellRange} [cellRange] Selection cell range.\n     */\n  }, {\n    key: \"mergeSelection\",\n    value: function mergeSelection() {\n      var cellRange = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.hot.getSelectedRangeLast();\n      if (!cellRange) {\n        return;\n      }\n      cellRange.setDirection(this.hot.isRtl() ? 'NE-SW' : 'NW-SE');\n      var from = cellRange.from,\n        to = cellRange.to;\n      this.unmergeRange(cellRange, true);\n      this.mergeRange(cellRange);\n      this.hot.selectCell(from.row, from.col, to.row, to.col, false);\n    }\n\n    /**\n     * Unmerges the selection provided as a cell range.\n     *\n     * @param {CellRange} [cellRange] Selection cell range.\n     */\n  }, {\n    key: \"unmergeSelection\",\n    value: function unmergeSelection() {\n      var cellRange = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.hot.getSelectedRangeLast();\n      if (!cellRange) {\n        return;\n      }\n      var from = cellRange.from,\n        to = cellRange.to;\n      this.unmergeRange(cellRange, true);\n      this.hot.selectCell(from.row, from.col, to.row, to.col, false);\n    }\n\n    /**\n     * Merges cells in the provided cell range.\n     *\n     * @private\n     * @param {CellRange} cellRange Cell range to merge.\n     * @param {boolean} [auto=false] `true` if is called automatically, e.g. At initialization.\n     * @param {boolean} [preventPopulation=false] `true`, if the method should not run `populateFromArray` at the end,\n     *   but rather return its arguments.\n     * @returns {Array|boolean} Returns an array of [row, column, dataUnderCollection] if preventPopulation is set to\n     *   true. If the the merging process went successful, it returns `true`, otherwise - `false`.\n     * @fires Hooks#beforeMergeCells\n     * @fires Hooks#afterMergeCells\n     */\n  }, {\n    key: \"mergeRange\",\n    value: function mergeRange(cellRange) {\n      var _this5 = this;\n      var auto = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var preventPopulation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var topStart = cellRange.getTopStartCorner();\n      var bottomEnd = cellRange.getBottomEndCorner();\n      var mergeParent = {\n        row: topStart.row,\n        col: topStart.col,\n        rowspan: bottomEnd.row - topStart.row + 1,\n        colspan: bottomEnd.col - topStart.col + 1\n      };\n      var clearedData = [];\n      var populationInfo = null;\n      if (!this.canMergeRange(mergeParent, auto)) {\n        return false;\n      }\n      this.hot.runHooks('beforeMergeCells', cellRange, auto);\n      rangeEach(0, mergeParent.rowspan - 1, function (i) {\n        rangeEach(0, mergeParent.colspan - 1, function (j) {\n          var clearedValue = null;\n          if (!clearedData[i]) {\n            clearedData[i] = [];\n          }\n          if (i === 0 && j === 0) {\n            clearedValue = _this5.hot.getSourceDataAtCell(_this5.hot.toPhysicalRow(mergeParent.row), _this5.hot.toPhysicalColumn(mergeParent.col));\n          } else {\n            _this5.hot.setCellMeta(mergeParent.row + i, mergeParent.col + j, 'hidden', true);\n          }\n          clearedData[i][j] = clearedValue;\n        });\n      });\n      this.hot.setCellMeta(mergeParent.row, mergeParent.col, 'spanned', true);\n      var mergedCellAdded = this.mergedCellsCollection.add(mergeParent);\n      if (mergedCellAdded) {\n        if (preventPopulation) {\n          populationInfo = [mergeParent.row, mergeParent.col, clearedData];\n        } else {\n          this.hot.populateFromArray(mergeParent.row, mergeParent.col, clearedData, void 0, void 0, this.pluginName);\n        }\n        if (!auto) {\n          this.ifChromeForceRepaint();\n        }\n        this.hot.runHooks('afterMergeCells', cellRange, mergeParent, auto);\n        return populationInfo;\n      }\n      return true;\n    }\n\n    /**\n     * Unmerges the selection provided as a cell range. If no cell range is provided, it uses the current selection.\n     *\n     * @private\n     * @param {CellRange} cellRange Selection cell range.\n     * @param {boolean} [auto=false] `true` if called automatically by the plugin.\n     *\n     * @fires Hooks#beforeUnmergeCells\n     * @fires Hooks#afterUnmergeCells\n     */\n  }, {\n    key: \"unmergeRange\",\n    value: function unmergeRange(cellRange) {\n      var _this6 = this;\n      var auto = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var mergedCells = this.mergedCellsCollection.getWithinRange(cellRange);\n      if (!mergedCells) {\n        return;\n      }\n      this.hot.runHooks('beforeUnmergeCells', cellRange, auto);\n      arrayEach(mergedCells, function (currentCollection) {\n        _this6.mergedCellsCollection.remove(currentCollection.row, currentCollection.col);\n        rangeEach(0, currentCollection.rowspan - 1, function (i) {\n          rangeEach(0, currentCollection.colspan - 1, function (j) {\n            _this6.hot.removeCellMeta(currentCollection.row + i, currentCollection.col + j, 'hidden');\n          });\n        });\n        _this6.hot.removeCellMeta(currentCollection.row, currentCollection.col, 'spanned');\n      });\n      this.hot.runHooks('afterUnmergeCells', cellRange, auto);\n      this.hot.render();\n    }\n\n    /**\n     * Merges or unmerges, based on the cell range provided as `cellRange`.\n     *\n     * @private\n     * @param {CellRange} cellRange The cell range to merge or unmerged.\n     */\n  }, {\n    key: \"toggleMerge\",\n    value: function toggleMerge(cellRange) {\n      var mergedCell = this.mergedCellsCollection.get(cellRange.from.row, cellRange.from.col);\n      var mergedCellCoversWholeRange = mergedCell.row === cellRange.from.row && mergedCell.col === cellRange.from.col && mergedCell.row + mergedCell.rowspan - 1 === cellRange.to.row && mergedCell.col + mergedCell.colspan - 1 === cellRange.to.col;\n      if (mergedCellCoversWholeRange) {\n        this.unmergeRange(cellRange);\n      } else {\n        this.mergeSelection(cellRange);\n      }\n    }\n\n    /**\n     * Merges the specified range.\n     *\n     * @param {number} startRow Start row of the merged cell.\n     * @param {number} startColumn Start column of the merged cell.\n     * @param {number} endRow End row of the merged cell.\n     * @param {number} endColumn End column of the merged cell.\n     * @fires Hooks#beforeMergeCells\n     * @fires Hooks#afterMergeCells\n     */\n  }, {\n    key: \"merge\",\n    value: function merge(startRow, startColumn, endRow, endColumn) {\n      var start = this.hot._createCellCoords(startRow, startColumn);\n      var end = this.hot._createCellCoords(endRow, endColumn);\n      this.mergeRange(this.hot._createCellRange(start, start, end));\n    }\n\n    /**\n     * Unmerges the merged cell in the provided range.\n     *\n     * @param {number} startRow Start row of the merged cell.\n     * @param {number} startColumn Start column of the merged cell.\n     * @param {number} endRow End row of the merged cell.\n     * @param {number} endColumn End column of the merged cell.\n     * @fires Hooks#beforeUnmergeCells\n     * @fires Hooks#afterUnmergeCells\n     */\n  }, {\n    key: \"unmerge\",\n    value: function unmerge(startRow, startColumn, endRow, endColumn) {\n      var start = this.hot._createCellCoords(startRow, startColumn);\n      var end = this.hot._createCellCoords(endRow, endColumn);\n      this.unmergeRange(this.hot._createCellRange(start, start, end));\n    }\n\n    /**\n     * `afterInit` hook callback.\n     *\n     * @private\n     */\n  }, {\n    key: \"onAfterInit\",\n    value: function onAfterInit() {\n      this.generateFromSettings(this.hot.getSettings()[PLUGIN_KEY]);\n      this.hot.render();\n    }\n\n    /**\n     * Register shortcuts responsible for toggling a merge.\n     *\n     * @private\n     */\n  }, {\n    key: \"registerShortcuts\",\n    value: function registerShortcuts() {\n      var _this7 = this;\n      var shortcutManager = this.hot.getShortcutManager();\n      var gridContext = shortcutManager.getContext('grid');\n      gridContext.addShortcut({\n        keys: [['Control', 'm']],\n        callback: function callback() {\n          _this7.toggleMerge(_this7.hot.getSelectedRangeLast());\n          _this7.hot.render();\n        },\n        runOnlyIf: function runOnlyIf(event) {\n          return !event.altKey;\n        },\n        // right ALT in some systems triggers ALT+CTRL\n        group: SHORTCUTS_GROUP\n      });\n    }\n\n    /**\n     * Unregister shortcuts responsible for toggling a merge.\n     *\n     * @private\n     */\n  }, {\n    key: \"unregisterShortcuts\",\n    value: function unregisterShortcuts() {\n      var shortcutManager = this.hot.getShortcutManager();\n      var gridContext = shortcutManager.getContext('grid');\n      gridContext.removeShortcutsByGroup(SHORTCUTS_GROUP);\n    }\n\n    /**\n     * Modifies the information on whether the current selection contains multiple cells. The `afterIsMultipleSelection`\n     * hook callback.\n     *\n     * @private\n     * @param {boolean} isMultiple Determines whether the current selection contains multiple cells.\n     * @returns {boolean}\n     */\n  }, {\n    key: \"onAfterIsMultipleSelection\",\n    value: function onAfterIsMultipleSelection(isMultiple) {\n      if (isMultiple) {\n        var mergedCells = this.mergedCellsCollection.mergedCells;\n        var selectionRange = this.hot.getSelectedRangeLast();\n        for (var group = 0; group < mergedCells.length; group += 1) {\n          if (selectionRange.from.row === mergedCells[group].row && selectionRange.from.col === mergedCells[group].col && selectionRange.to.row === mergedCells[group].row + mergedCells[group].rowspan - 1 && selectionRange.to.col === mergedCells[group].col + mergedCells[group].colspan - 1) {\n            return false;\n          }\n        }\n      }\n      return isMultiple;\n    }\n\n    /**\n     * `modifyTransformStart` hook callback.\n     *\n     * @private\n     * @param {object} delta The transformation delta.\n     */\n  }, {\n    key: \"onModifyTransformStart\",\n    value: function onModifyTransformStart(delta) {\n      var priv = privatePool.get(this);\n      var currentlySelectedRange = this.hot.getSelectedRangeLast();\n      var newDelta = {\n        row: delta.row,\n        col: delta.col\n      };\n      var nextPosition = null;\n      var currentPosition = this.hot._createCellCoords(currentlySelectedRange.highlight.row, currentlySelectedRange.highlight.col);\n      var mergedParent = this.mergedCellsCollection.get(currentPosition.row, currentPosition.col);\n      if (!priv.lastDesiredCoords) {\n        priv.lastDesiredCoords = this.hot._createCellCoords(null, null);\n      }\n      if (mergedParent) {\n        // only merge selected\n        var mergeTopLeft = this.hot._createCellCoords(mergedParent.row, mergedParent.col);\n        var mergeBottomRight = this.hot._createCellCoords(mergedParent.row + mergedParent.rowspan - 1, mergedParent.col + mergedParent.colspan - 1);\n        var mergeRange = this.hot._createCellRange(mergeTopLeft, mergeTopLeft, mergeBottomRight);\n        if (!mergeRange.includes(priv.lastDesiredCoords)) {\n          priv.lastDesiredCoords = this.hot._createCellCoords(null, null); // reset outdated version of lastDesiredCoords\n        }\n\n        newDelta.row = priv.lastDesiredCoords.row ? priv.lastDesiredCoords.row - currentPosition.row : newDelta.row;\n        newDelta.col = priv.lastDesiredCoords.col ? priv.lastDesiredCoords.col - currentPosition.col : newDelta.col;\n        if (delta.row > 0) {\n          // moving down\n          newDelta.row = mergedParent.row + mergedParent.rowspan - 1 - currentPosition.row + delta.row;\n        } else if (delta.row < 0) {\n          // moving up\n          newDelta.row = currentPosition.row - mergedParent.row + delta.row;\n        }\n        if (delta.col > 0) {\n          // moving right\n          newDelta.col = mergedParent.col + mergedParent.colspan - 1 - currentPosition.col + delta.col;\n        } else if (delta.col < 0) {\n          // moving left\n          newDelta.col = currentPosition.col - mergedParent.col + delta.col;\n        }\n      }\n      nextPosition = this.hot._createCellCoords(currentlySelectedRange.highlight.row + newDelta.row, currentlySelectedRange.highlight.col + newDelta.col);\n      var nextPositionMergedCell = this.mergedCellsCollection.get(nextPosition.row, nextPosition.col);\n      if (nextPositionMergedCell) {\n        // skipping the invisible cells in the merge range\n        var firstRenderableCoords = this.mergedCellsCollection.getFirstRenderableCoords(nextPositionMergedCell.row, nextPositionMergedCell.col);\n        priv.lastDesiredCoords = nextPosition;\n        newDelta = {\n          row: firstRenderableCoords.row - currentPosition.row,\n          col: firstRenderableCoords.col - currentPosition.col\n        };\n      }\n      if (newDelta.row !== 0) {\n        delta.row = newDelta.row;\n      }\n      if (newDelta.col !== 0) {\n        delta.col = newDelta.col;\n      }\n    }\n\n    /**\n     * `modifyTransformEnd` hook callback. Needed to handle \"jumping over\" merged merged cells, while selecting.\n     *\n     * @private\n     * @param {object} delta The transformation delta.\n     */\n  }, {\n    key: \"onModifyTransformEnd\",\n    value: function onModifyTransformEnd(delta) {\n      var _this8 = this;\n      var currentSelectionRange = this.hot.getSelectedRangeLast();\n      var newDelta = clone(delta);\n      var newSelectionRange = this.selectionCalculations.getUpdatedSelectionRange(currentSelectionRange, delta);\n      var tempDelta = clone(newDelta);\n      var mergedCellsWithinRange = this.mergedCellsCollection.getWithinRange(newSelectionRange, true);\n      do {\n        tempDelta = clone(newDelta);\n        this.selectionCalculations.getUpdatedSelectionRange(currentSelectionRange, newDelta);\n        arrayEach(mergedCellsWithinRange, function (mergedCell) {\n          _this8.selectionCalculations.snapDelta(newDelta, currentSelectionRange, mergedCell);\n        });\n      } while (newDelta.row !== tempDelta.row || newDelta.col !== tempDelta.col);\n      delta.row = newDelta.row;\n      delta.col = newDelta.col;\n    }\n\n    /**\n     * `modifyGetCellCoords` hook callback. Swaps the `getCell` coords with the merged parent coords.\n     *\n     * @private\n     * @param {number} row Row index.\n     * @param {number} column Visual column index.\n     * @returns {Array|undefined} Visual coordinates of the merge.\n     */\n  }, {\n    key: \"onModifyGetCellCoords\",\n    value: function onModifyGetCellCoords(row, column) {\n      if (row < 0 || column < 0) {\n        return;\n      }\n      var mergeParent = this.mergedCellsCollection.get(row, column);\n      if (!mergeParent) {\n        return;\n      }\n      var mergeRow = mergeParent.row,\n        mergeColumn = mergeParent.col,\n        colspan = mergeParent.colspan,\n        rowspan = mergeParent.rowspan;\n      return [\n      // Most top-left merged cell coords.\n      mergeRow, mergeColumn,\n      // Most bottom-right merged cell coords.\n      mergeRow + rowspan - 1, mergeColumn + colspan - 1];\n    }\n\n    /**\n     * `afterContextMenuDefaultOptions` hook callback.\n     *\n     * @private\n     * @param {object} defaultOptions The default context menu options.\n     */\n  }, {\n    key: \"addMergeActionsToContextMenu\",\n    value: function addMergeActionsToContextMenu(defaultOptions) {\n      defaultOptions.items.push({\n        name: '---------'\n      }, toggleMergeItem(this));\n    }\n\n    /**\n     * `afterRenderer` hook callback.\n     *\n     * @private\n     * @param {HTMLElement} TD The cell to be modified.\n     * @param {number} row Row index.\n     * @param {number} col Visual column index.\n     */\n  }, {\n    key: \"onAfterRenderer\",\n    value: function onAfterRenderer(TD, row, col) {\n      var mergedCell = this.mergedCellsCollection.get(row, col);\n      // We shouldn't override data in the collection.\n      var mergedCellCopy = isObject(mergedCell) ? clone(mergedCell) : void 0;\n      if (isObject(mergedCellCopy)) {\n        var _this$hot = this.hot,\n          rowMapper = _this$hot.rowIndexMapper,\n          columnMapper = _this$hot.columnIndexMapper;\n        var mergeRow = mergedCellCopy.row,\n          mergeColumn = mergedCellCopy.col,\n          colspan = mergedCellCopy.colspan,\n          rowspan = mergedCellCopy.rowspan;\n        var _this$translateMerged = this.translateMergedCellToRenderable(mergeRow, rowspan, mergeColumn, colspan),\n          _this$translateMerged2 = _slicedToArray(_this$translateMerged, 2),\n          lastMergedRowIndex = _this$translateMerged2[0],\n          lastMergedColumnIndex = _this$translateMerged2[1];\n        var renderedRowIndex = rowMapper.getRenderableFromVisualIndex(row);\n        var renderedColumnIndex = columnMapper.getRenderableFromVisualIndex(col);\n        var maxRowSpan = lastMergedRowIndex - renderedRowIndex + 1; // Number of rendered columns.\n        var maxColSpan = lastMergedColumnIndex - renderedColumnIndex + 1; // Number of rendered columns.\n\n        // We just try to determine some values basing on the actual number of rendered indexes (some columns may be hidden).\n        mergedCellCopy.row = rowMapper.getNearestNotHiddenIndex(mergedCellCopy.row, 1);\n        // We just try to determine some values basing on the actual number of rendered indexes (some columns may be hidden).\n        mergedCellCopy.col = columnMapper.getNearestNotHiddenIndex(mergedCellCopy.col, 1);\n        // The `rowSpan` property for a `TD` element should be at most equal to number of rendered rows in the merge area.\n        mergedCellCopy.rowspan = Math.min(mergedCellCopy.rowspan, maxRowSpan);\n        // The `colSpan` property for a `TD` element should be at most equal to number of rendered columns in the merge area.\n        mergedCellCopy.colspan = Math.min(mergedCellCopy.colspan, maxColSpan);\n      }\n      applySpanProperties(TD, mergedCellCopy, row, col);\n    }\n\n    /**\n     * `beforeSetRangeStart` and `beforeSetRangeStartOnly` hook callback.\n     * A selection within merge area should be rewritten to the start of merge area.\n     *\n     * @private\n     * @param {object} coords Cell coords.\n     */\n  }, {\n    key: \"onBeforeSetRangeStart\",\n    value: function onBeforeSetRangeStart(coords) {\n      // TODO: It is a workaround, but probably this hook may be needed. Every selection on the merge area\n      // could set start point of the selection to the start of the merge area. However, logic inside `expandByRange` need\n      // an initial start point. Click on the merge cell when there are some hidden indexes break the logic in some cases.\n      // Please take a look at #7010 for more information. I'm not sure if selection directions are calculated properly\n      // and what was idea for flipping direction inside `expandByRange` method.\n      if (this.mergedCellsCollection.isFirstRenderableMergedCell(coords.row, coords.col)) {\n        var mergeParent = this.mergedCellsCollection.get(coords.row, coords.col);\n        var _ref = [mergeParent.row, mergeParent.col];\n        coords.row = _ref[0];\n        coords.col = _ref[1];\n      }\n    }\n\n    /**\n     * `beforeSetRangeEnd` hook callback.\n     * While selecting cells with keyboard or mouse, make sure that rectangular area is expanded to the extent of the\n     * merged cell.\n     *\n     * Note: Please keep in mind that callback may modify both start and end range coordinates by the reference.\n     *\n     * @private\n     * @param {object} coords Cell coords.\n     */\n  }, {\n    key: \"onBeforeSetRangeEnd\",\n    value: function onBeforeSetRangeEnd(coords) {\n      var selRange = this.hot.getSelectedRangeLast();\n      selRange.highlight = this.hot._createCellCoords(selRange.highlight.row, selRange.highlight.col); // clone in case we will modify its reference\n      selRange.to = coords;\n      var rangeExpanded = false;\n      if (this.hot.selection.isSelectedByColumnHeader() || this.hot.selection.isSelectedByRowHeader()) {\n        return;\n      }\n      do {\n        rangeExpanded = false;\n        for (var i = 0; i < this.mergedCellsCollection.mergedCells.length; i += 1) {\n          var cellInfo = this.mergedCellsCollection.mergedCells[i];\n          var mergedCellRange = cellInfo.getRange();\n          if (selRange.expandByRange(mergedCellRange)) {\n            coords.row = selRange.to.row;\n            coords.col = selRange.to.col;\n            rangeExpanded = true;\n          }\n        }\n      } while (rangeExpanded);\n    }\n\n    /**\n     * The `afterGetCellMeta` hook callback.\n     *\n     * @private\n     * @param {number} row Row index.\n     * @param {number} col Column index.\n     * @param {object} cellProperties The cell properties object.\n     */\n  }, {\n    key: \"onAfterGetCellMeta\",\n    value: function onAfterGetCellMeta(row, col, cellProperties) {\n      var mergeParent = this.mergedCellsCollection.get(row, col);\n      if (mergeParent) {\n        if (mergeParent.row !== row || mergeParent.col !== col) {\n          cellProperties.copyable = false;\n        } else {\n          cellProperties.rowspan = mergeParent.rowspan;\n          cellProperties.colspan = mergeParent.colspan;\n        }\n      }\n    }\n\n    /**\n     * `afterViewportRowCalculatorOverride` hook callback.\n     *\n     * @private\n     * @param {object} calc The row calculator object.\n     */\n  }, {\n    key: \"onAfterViewportRowCalculatorOverride\",\n    value: function onAfterViewportRowCalculatorOverride(calc) {\n      var nrOfColumns = this.hot.countCols();\n      this.modifyViewportRowStart(calc, nrOfColumns);\n      this.modifyViewportRowEnd(calc, nrOfColumns);\n    }\n\n    /**\n     * Modify viewport start when needed. We extend viewport when merged cells aren't fully visible.\n     *\n     * @private\n     * @param {object} calc The row calculator object.\n     * @param {number} nrOfColumns Number of visual columns.\n     */\n  }, {\n    key: \"modifyViewportRowStart\",\n    value: function modifyViewportRowStart(calc, nrOfColumns) {\n      var rowMapper = this.hot.rowIndexMapper;\n      var visualStartRow = rowMapper.getVisualFromRenderableIndex(calc.startRow);\n      for (var visualColumnIndex = 0; visualColumnIndex < nrOfColumns; visualColumnIndex += 1) {\n        var mergeParentForViewportStart = this.mergedCellsCollection.get(visualStartRow, visualColumnIndex);\n        if (isObject(mergeParentForViewportStart)) {\n          var renderableIndexAtMergeStart = rowMapper.getRenderableFromVisualIndex(rowMapper.getNearestNotHiddenIndex(mergeParentForViewportStart.row, 1));\n\n          // Merge start is out of the viewport (i.e. when we scrolled to the bottom and we can see just part of a merge).\n          if (renderableIndexAtMergeStart < calc.startRow) {\n            // We extend viewport when some rows have been merged.\n            calc.startRow = renderableIndexAtMergeStart;\n            // We are looking for next merges inside already extended viewport (starting again from row equal to 0).\n            this.modifyViewportRowStart(calc, nrOfColumns); // recursively search upwards\n\n            return; // Finish the current loop. Everything will be checked from the beginning by above recursion.\n          }\n        }\n      }\n    }\n\n    /**\n     *  Modify viewport end when needed. We extend viewport when merged cells aren't fully visible.\n     *\n     * @private\n     * @param {object} calc The row calculator object.\n     * @param {number} nrOfColumns Number of visual columns.\n     */\n  }, {\n    key: \"modifyViewportRowEnd\",\n    value: function modifyViewportRowEnd(calc, nrOfColumns) {\n      var rowMapper = this.hot.rowIndexMapper;\n      var visualEndRow = rowMapper.getVisualFromRenderableIndex(calc.endRow);\n      for (var visualColumnIndex = 0; visualColumnIndex < nrOfColumns; visualColumnIndex += 1) {\n        var mergeParentForViewportEnd = this.mergedCellsCollection.get(visualEndRow, visualColumnIndex);\n        if (isObject(mergeParentForViewportEnd)) {\n          var mergeEnd = mergeParentForViewportEnd.row + mergeParentForViewportEnd.rowspan - 1;\n          var renderableIndexAtMergeEnd = rowMapper.getRenderableFromVisualIndex(rowMapper.getNearestNotHiddenIndex(mergeEnd, -1));\n\n          // Merge end is out of the viewport.\n          if (renderableIndexAtMergeEnd > calc.endRow) {\n            // We extend the viewport when some rows have been merged.\n            calc.endRow = renderableIndexAtMergeEnd;\n            // We are looking for next merges inside already extended viewport (starting again from row equal to 0).\n            this.modifyViewportRowEnd(calc, nrOfColumns); // recursively search upwards\n\n            return; // Finish the current loop. Everything will be checked from the beginning by above recursion.\n          }\n        }\n      }\n    }\n\n    /**\n     * `afterViewportColumnCalculatorOverride` hook callback.\n     *\n     * @private\n     * @param {object} calc The column calculator object.\n     */\n  }, {\n    key: \"onAfterViewportColumnCalculatorOverride\",\n    value: function onAfterViewportColumnCalculatorOverride(calc) {\n      var nrOfRows = this.hot.countRows();\n      this.modifyViewportColumnStart(calc, nrOfRows);\n      this.modifyViewportColumnEnd(calc, nrOfRows);\n    }\n\n    /**\n     * Modify viewport start when needed. We extend viewport when merged cells aren't fully visible.\n     *\n     * @private\n     * @param {object} calc The column calculator object.\n     * @param {number} nrOfRows Number of visual rows.\n     */\n  }, {\n    key: \"modifyViewportColumnStart\",\n    value: function modifyViewportColumnStart(calc, nrOfRows) {\n      var columnMapper = this.hot.columnIndexMapper;\n      var visualStartCol = columnMapper.getVisualFromRenderableIndex(calc.startColumn);\n      for (var visualRowIndex = 0; visualRowIndex < nrOfRows; visualRowIndex += 1) {\n        var mergeParentForViewportStart = this.mergedCellsCollection.get(visualRowIndex, visualStartCol);\n        if (isObject(mergeParentForViewportStart)) {\n          var renderableIndexAtMergeStart = columnMapper.getRenderableFromVisualIndex(columnMapper.getNearestNotHiddenIndex(mergeParentForViewportStart.col, 1));\n\n          // Merge start is out of the viewport (i.e. when we scrolled to the right and we can see just part of a merge).\n          if (renderableIndexAtMergeStart < calc.startColumn) {\n            // We extend viewport when some columns have been merged.\n            calc.startColumn = renderableIndexAtMergeStart;\n            // We are looking for next merges inside already extended viewport (starting again from column equal to 0).\n            this.modifyViewportColumnStart(calc, nrOfRows); // recursively search upwards\n\n            return; // Finish the current loop. Everything will be checked from the beginning by above recursion.\n          }\n        }\n      }\n    }\n\n    /**\n     *  Modify viewport end when needed. We extend viewport when merged cells aren't fully visible.\n     *\n     * @private\n     * @param {object} calc The column calculator object.\n     * @param {number} nrOfRows Number of visual rows.\n     */\n  }, {\n    key: \"modifyViewportColumnEnd\",\n    value: function modifyViewportColumnEnd(calc, nrOfRows) {\n      var columnMapper = this.hot.columnIndexMapper;\n      var visualEndCol = columnMapper.getVisualFromRenderableIndex(calc.endColumn);\n      for (var visualRowIndex = 0; visualRowIndex < nrOfRows; visualRowIndex += 1) {\n        var mergeParentForViewportEnd = this.mergedCellsCollection.get(visualRowIndex, visualEndCol);\n        if (isObject(mergeParentForViewportEnd)) {\n          var mergeEnd = mergeParentForViewportEnd.col + mergeParentForViewportEnd.colspan - 1;\n          var renderableIndexAtMergeEnd = columnMapper.getRenderableFromVisualIndex(columnMapper.getNearestNotHiddenIndex(mergeEnd, -1));\n\n          // Merge end is out of the viewport.\n          if (renderableIndexAtMergeEnd > calc.endColumn) {\n            // We extend the viewport when some columns have been merged.\n            calc.endColumn = renderableIndexAtMergeEnd;\n            // We are looking for next merges inside already extended viewport (starting again from column equal to 0).\n            this.modifyViewportColumnEnd(calc, nrOfRows); // recursively search upwards\n\n            return; // Finish the current loop. Everything will be checked from the beginning by above recursion.\n          }\n        }\n      }\n    }\n\n    /**\n     * Translates merged cell coordinates to renderable indexes.\n     *\n     * @private\n     * @param {number} parentRow Visual row index.\n     * @param {number} rowspan Rowspan which describes shift which will be applied to parent row\n     *                         to calculate renderable index which points to the most bottom\n     *                         index position. Pass rowspan as `0` to calculate the most top\n     *                         index position.\n     * @param {number} parentColumn Visual column index.\n     * @param {number} colspan Colspan which describes shift which will be applied to parent column\n     *                         to calculate renderable index which points to the most right\n     *                         index position. Pass colspan as `0` to calculate the most left\n     *                         index position.\n     * @returns {number[]}\n     */\n  }, {\n    key: \"translateMergedCellToRenderable\",\n    value: function translateMergedCellToRenderable(parentRow, rowspan, parentColumn, colspan) {\n      var _this$hot2 = this.hot,\n        rowMapper = _this$hot2.rowIndexMapper,\n        columnMapper = _this$hot2.columnIndexMapper;\n      var firstNonHiddenRow;\n      var firstNonHiddenColumn;\n      if (rowspan === 0) {\n        firstNonHiddenRow = rowMapper.getNearestNotHiddenIndex(parentRow, 1);\n      } else {\n        firstNonHiddenRow = rowMapper.getNearestNotHiddenIndex(parentRow + rowspan - 1, -1);\n      }\n      if (colspan === 0) {\n        firstNonHiddenColumn = columnMapper.getNearestNotHiddenIndex(parentColumn, 1);\n      } else {\n        firstNonHiddenColumn = columnMapper.getNearestNotHiddenIndex(parentColumn + colspan - 1, -1);\n      }\n      var renderableRow = parentRow >= 0 ? rowMapper.getRenderableFromVisualIndex(firstNonHiddenRow) : parentRow;\n      var renderableColumn = parentColumn >= 0 ? columnMapper.getRenderableFromVisualIndex(firstNonHiddenColumn) : parentColumn;\n      return [renderableRow, renderableColumn];\n    }\n\n    /**\n     * The `modifyAutofillRange` hook callback.\n     *\n     * @private\n     * @param {Array} drag The drag area coordinates.\n     * @param {Array} select The selection information.\n     * @returns {Array} The new drag area.\n     */\n  }, {\n    key: \"onModifyAutofillRange\",\n    value: function onModifyAutofillRange(drag, select) {\n      this.autofillCalculations.correctSelectionAreaSize(select);\n      var dragDirection = this.autofillCalculations.getDirection(select, drag);\n      var dragArea = drag;\n      if (this.autofillCalculations.dragAreaOverlapsCollections(select, dragArea, dragDirection)) {\n        dragArea = select;\n        return dragArea;\n      }\n      var mergedCellsWithinSelectionArea = this.mergedCellsCollection.getWithinRange({\n        from: {\n          row: select[0],\n          col: select[1]\n        },\n        to: {\n          row: select[2],\n          col: select[3]\n        }\n      });\n      if (!mergedCellsWithinSelectionArea) {\n        return dragArea;\n      }\n      dragArea = this.autofillCalculations.snapDragArea(select, dragArea, dragDirection, mergedCellsWithinSelectionArea);\n      return dragArea;\n    }\n\n    /**\n     * `afterCreateCol` hook callback.\n     *\n     * @private\n     * @param {number} column Column index.\n     * @param {number} count Number of created columns.\n     */\n  }, {\n    key: \"onAfterCreateCol\",\n    value: function onAfterCreateCol(column, count) {\n      this.mergedCellsCollection.shiftCollections('right', column, count);\n    }\n\n    /**\n     * `afterRemoveCol` hook callback.\n     *\n     * @private\n     * @param {number} column Column index.\n     * @param {number} count Number of removed columns.\n     */\n  }, {\n    key: \"onAfterRemoveCol\",\n    value: function onAfterRemoveCol(column, count) {\n      this.mergedCellsCollection.shiftCollections('left', column, count);\n    }\n\n    /**\n     * `afterCreateRow` hook callback.\n     *\n     * @private\n     * @param {number} row Row index.\n     * @param {number} count Number of created rows.\n     * @param {string} source Source of change.\n     */\n  }, {\n    key: \"onAfterCreateRow\",\n    value: function onAfterCreateRow(row, count, source) {\n      if (source === 'auto') {\n        return;\n      }\n      this.mergedCellsCollection.shiftCollections('down', row, count);\n    }\n\n    /**\n     * `afterRemoveRow` hook callback.\n     *\n     * @private\n     * @param {number} row Row index.\n     * @param {number} count Number of removed rows.\n     */\n  }, {\n    key: \"onAfterRemoveRow\",\n    value: function onAfterRemoveRow(row, count) {\n      this.mergedCellsCollection.shiftCollections('up', row, count);\n    }\n\n    /**\n     * `afterChange` hook callback. Used to propagate merged cells after using Autofill.\n     *\n     * @private\n     * @param {Array} changes The changes array.\n     * @param {string} source Determines the source of the change.\n     */\n  }, {\n    key: \"onAfterChange\",\n    value: function onAfterChange(changes, source) {\n      if (source !== 'Autofill.fill') {\n        return;\n      }\n      this.autofillCalculations.recreateAfterDataPopulation(changes);\n    }\n\n    /**\n     * `beforeDrawAreaBorders` hook callback.\n     *\n     * @private\n     * @param {Array} corners Visual coordinates of the area corners.\n     * @param {string} className Class name for the area.\n     */\n  }, {\n    key: \"onBeforeDrawAreaBorders\",\n    value: function onBeforeDrawAreaBorders(corners, className) {\n      if (className && className === 'area') {\n        var selectedRange = this.hot.getSelectedRangeLast();\n        var mergedCellsWithinRange = this.mergedCellsCollection.getWithinRange(selectedRange);\n        arrayEach(mergedCellsWithinRange, function (mergedCell) {\n          if (selectedRange.getBottomEndCorner().row === mergedCell.getLastRow() && selectedRange.getBottomEndCorner().col === mergedCell.getLastColumn()) {\n            corners[2] = mergedCell.row;\n            corners[3] = mergedCell.col;\n          }\n        });\n      }\n    }\n\n    /**\n     * `afterModifyTransformStart` hook callback. Fixes a problem with navigating through merged cells at the edges of\n     * the table with the ENTER/SHIFT+ENTER/TAB/SHIFT+TAB keys.\n     *\n     * @private\n     * @param {CellCoords} coords Coordinates of the to-be-selected cell.\n     * @param {number} rowTransformDir Row transformation direction (negative value = up, 0 = none, positive value =\n     *   down).\n     * @param {number} colTransformDir Column transformation direction (negative value = up, 0 = none, positive value =\n     *   down).\n     */\n  }, {\n    key: \"onAfterModifyTransformStart\",\n    value: function onAfterModifyTransformStart(coords, rowTransformDir, colTransformDir) {\n      if (!this.enabled) {\n        return;\n      }\n      var mergedCellAtCoords = this.mergedCellsCollection.get(coords.row, coords.col);\n      if (!mergedCellAtCoords) {\n        return;\n      }\n      var goingDown = rowTransformDir > 0;\n      var goingUp = rowTransformDir < 0;\n      var goingLeft = colTransformDir < 0;\n      var goingRight = colTransformDir > 0;\n      var mergedCellOnBottomEdge = mergedCellAtCoords.row + mergedCellAtCoords.rowspan - 1 === this.hot.countRows() - 1;\n      var mergedCellOnTopEdge = mergedCellAtCoords.row === 0;\n      var mergedCellOnRightEdge = mergedCellAtCoords.col + mergedCellAtCoords.colspan - 1 === this.hot.countCols() - 1;\n      var mergedCellOnLeftEdge = mergedCellAtCoords.col === 0;\n      if (goingDown && mergedCellOnBottomEdge || goingUp && mergedCellOnTopEdge || goingRight && mergedCellOnRightEdge || goingLeft && mergedCellOnLeftEdge) {\n        coords.row = mergedCellAtCoords.row;\n        coords.col = mergedCellAtCoords.col;\n      }\n    }\n\n    /**\n     * `afterDrawSelection` hook callback. Used to add the additional class name for the entirely-selected merged cells.\n     *\n     * @private\n     * @param {number} currentRow Visual row index of the currently processed cell.\n     * @param {number} currentColumn Visual column index of the currently cell.\n     * @param {Array} cornersOfSelection Array of the current selection in a form of `[startRow, startColumn, endRow,\n     *   endColumn]`.\n     * @param {number|undefined} layerLevel Number indicating which layer of selection is currently processed.\n     * @returns {string|undefined} A `String`, which will act as an additional `className` to be added to the currently\n     *   processed cell.\n     */\n  }, {\n    key: \"onAfterDrawSelection\",\n    value: function onAfterDrawSelection(currentRow, currentColumn, cornersOfSelection, layerLevel) {\n      // Nothing's selected (hook might be triggered by the custom borders)\n      if (!cornersOfSelection) {\n        return;\n      }\n      return this.selectionCalculations.getSelectedMergedCellClassName(currentRow, currentColumn, cornersOfSelection, layerLevel);\n    }\n\n    /**\n     * `beforeRemoveCellClassNames` hook callback. Used to remove additional class name from all cells in the table.\n     *\n     * @private\n     * @returns {string[]} An `Array` of `String`s. Each of these strings will act like class names to be removed from\n     *   all the cells in the table.\n     */\n  }, {\n    key: \"onBeforeRemoveCellClassNames\",\n    value: function onBeforeRemoveCellClassNames() {\n      return this.selectionCalculations.getSelectedMergedCellClassNameToRemove();\n    }\n  }], [{\n    key: \"PLUGIN_KEY\",\n    get: function get() {\n      return PLUGIN_KEY;\n    }\n  }, {\n    key: \"PLUGIN_PRIORITY\",\n    get: function get() {\n      return PLUGIN_PRIORITY;\n    }\n  }]);\n  return MergeCells;\n}(BasePlugin);","map":{"version":3,"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","_i","_s","_e","_x","_r","_arr","_n","_d","call","next","Object","done","push","value","length","err","return","Array","isArray","_toConsumableArray","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","o","minLen","_arrayLikeToArray","n","toString","slice","name","from","test","iter","len","arr2","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","_toPropertyKey","key","_createClass","protoProps","staticProps","arg","_toPrimitive","String","input","hint","prim","toPrimitive","undefined","res","Number","_get","Reflect","get","bind","property","receiver","base","_superPropBase","desc","getOwnPropertyDescriptor","arguments","apply","object","hasOwnProperty","_getPrototypeOf","_inherits","subClass","superClass","create","_setPrototypeOf","p","setPrototypeOf","__proto__","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","result","NewTarget","construct","_possibleConstructorReturn","self","_assertThisInitialized","ReferenceError","sham","Proxy","Boolean","valueOf","e","getPrototypeOf","BasePlugin","Hooks","MergedCellsCollection","MergedCellCoords","AutofillCalculations","SelectionCalculations","toggleMergeItem","arrayEach","isObject","clone","warn","rangeEach","applySpanProperties","getStyle","isChrome","getSingleton","register","PLUGIN_KEY","PLUGIN_PRIORITY","privatePool","WeakMap","SHORTCUTS_GROUP","MergeCells","_BasePlugin","_super","hotInstance","_this","set","lastDesiredCoords","mergedCellsCollection","autofillCalculations","selectionCalculations","isEnabled","hot","getSettings","enablePlugin","_this2","enabled","addHook","onAfterInit","onModifyTransformStart","onAfterModifyTransformStart","onModifyTransformEnd","onModifyGetCellCoords","onBeforeSetRangeStart","onBeforeSetRangeEnd","onAfterIsMultipleSelection","onAfterRenderer","addMergeActionsToContextMenu","onAfterGetCellMeta","onAfterViewportRowCalculatorOverride","onAfterViewportColumnCalculatorOverride","onModifyAutofillRange","onAfterCreateCol","onAfterRemoveCol","onAfterCreateRow","onAfterRemoveRow","onAfterChange","onBeforeDrawAreaBorders","onAfterDrawSelection","onBeforeRemoveCellClassNames","action","source","registerShortcuts","disablePlugin","clearCollections","unregisterShortcuts","render","updatePlugin","settings","generateFromSettings","ifChromeForceRepaint","_this3","rowsToRefresh","rowIndexesToRefresh","mergedCells","forEach","mergedCell","row","rowspan","r","Set","rowIndex","renderableRowIndex","rowIndexMapper","getRenderableFromVisualIndex","view","_wt","wtOverlays","getOverlays","map","overlay","wtTable","wtTableRef","rowToRefresh","getRow","style","background","replace","_registerTimeout","rowElement","validateSetting","setting","valid","containsNegativeValues","NEGATIVE_VALUES_WARNING","isOutOfBounds","countRows","countCols","IS_OUT_OF_BOUNDS_WARNING","isSingleCell","IS_SINGLE_CELL","containsZeroSpan","ZERO_SPAN_WARNING","_this4","populatedNulls","highlight","_createCellCoords","col","rangeEnd","colspan","mergeRange","_createCellRange","columnIndex","setDataAtCell","clear","canMergeRange","newMergedCellInfo","auto","toggleMergeOnSelection","currentRange","getSelectedRangeLast","setDirection","isRtl","to","toggleMerge","selectCell","mergeSelection","cellRange","unmergeRange","unmergeSelection","_this5","preventPopulation","topStart","getTopStartCorner","bottomEnd","getBottomEndCorner","mergeParent","clearedData","populationInfo","runHooks","j","clearedValue","getSourceDataAtCell","toPhysicalRow","toPhysicalColumn","setCellMeta","mergedCellAdded","add","populateFromArray","pluginName","_this6","getWithinRange","currentCollection","remove","removeCellMeta","mergedCellCoversWholeRange","merge","startRow","startColumn","endRow","endColumn","start","end","unmerge","_this7","shortcutManager","getShortcutManager","gridContext","getContext","addShortcut","keys","callback","runOnlyIf","event","altKey","group","removeShortcutsByGroup","isMultiple","selectionRange","delta","priv","currentlySelectedRange","newDelta","nextPosition","currentPosition","mergedParent","mergeTopLeft","mergeBottomRight","includes","nextPositionMergedCell","firstRenderableCoords","getFirstRenderableCoords","_this8","currentSelectionRange","newSelectionRange","getUpdatedSelectionRange","tempDelta","mergedCellsWithinRange","snapDelta","column","mergeRow","mergeColumn","defaultOptions","items","TD","mergedCellCopy","_this$hot","rowMapper","columnMapper","columnIndexMapper","_this$translateMerged","translateMergedCellToRenderable","_this$translateMerged2","lastMergedRowIndex","lastMergedColumnIndex","renderedRowIndex","renderedColumnIndex","maxRowSpan","maxColSpan","getNearestNotHiddenIndex","Math","min","coords","isFirstRenderableMergedCell","_ref","selRange","rangeExpanded","selection","isSelectedByColumnHeader","isSelectedByRowHeader","cellInfo","mergedCellRange","getRange","expandByRange","cellProperties","copyable","calc","nrOfColumns","modifyViewportRowStart","modifyViewportRowEnd","visualStartRow","getVisualFromRenderableIndex","visualColumnIndex","mergeParentForViewportStart","renderableIndexAtMergeStart","visualEndRow","mergeParentForViewportEnd","mergeEnd","renderableIndexAtMergeEnd","nrOfRows","modifyViewportColumnStart","modifyViewportColumnEnd","visualStartCol","visualRowIndex","visualEndCol","parentRow","parentColumn","_this$hot2","firstNonHiddenRow","firstNonHiddenColumn","renderableRow","renderableColumn","drag","select","correctSelectionAreaSize","dragDirection","getDirection","dragArea","dragAreaOverlapsCollections","mergedCellsWithinSelectionArea","snapDragArea","count","shiftCollections","changes","recreateAfterDataPopulation","corners","className","selectedRange","getLastRow","getLastColumn","rowTransformDir","colTransformDir","mergedCellAtCoords","goingDown","goingUp","goingLeft","goingRight","mergedCellOnBottomEdge","mergedCellOnTopEdge","mergedCellOnRightEdge","mergedCellOnLeftEdge","currentRow","currentColumn","cornersOfSelection","layerLevel","getSelectedMergedCellClassName","getSelectedMergedCellClassNameToRemove"],"sources":["/home/rstorey/wwwdev/Blucktool/node_modules/handsontable/plugins/mergeCells/mergeCells.mjs"],"sourcesContent":["function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _get() { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.weak-map.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.object.set-prototype-of.js\";\nimport \"core-js/modules/es.object.get-prototype-of.js\";\nimport \"core-js/modules/es.reflect.construct.js\";\nimport \"core-js/modules/es.reflect.get.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/es.symbol.to-primitive.js\";\nimport \"core-js/modules/es.date.to-primitive.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport { BasePlugin } from \"../base/index.mjs\";\nimport Hooks from \"../../pluginHooks.mjs\";\nimport MergedCellsCollection from \"./cellsCollection.mjs\";\nimport MergedCellCoords from \"./cellCoords.mjs\";\nimport AutofillCalculations from \"./calculations/autofill.mjs\";\nimport SelectionCalculations from \"./calculations/selection.mjs\";\nimport toggleMergeItem from \"./contextMenuItem/toggleMerge.mjs\";\nimport { arrayEach } from \"../../helpers/array.mjs\";\nimport { isObject, clone } from \"../../helpers/object.mjs\";\nimport { warn } from \"../../helpers/console.mjs\";\nimport { rangeEach } from \"../../helpers/number.mjs\";\nimport { applySpanProperties } from \"./utils.mjs\";\nimport { getStyle } from \"../../helpers/dom/element.mjs\";\nimport { isChrome } from \"../../helpers/browser.mjs\";\nHooks.getSingleton().register('beforeMergeCells');\nHooks.getSingleton().register('afterMergeCells');\nHooks.getSingleton().register('beforeUnmergeCells');\nHooks.getSingleton().register('afterUnmergeCells');\nexport var PLUGIN_KEY = 'mergeCells';\nexport var PLUGIN_PRIORITY = 150;\nvar privatePool = new WeakMap();\nvar SHORTCUTS_GROUP = PLUGIN_KEY;\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * @plugin MergeCells\n * @class MergeCells\n *\n * @description\n * Plugin, which allows merging cells in the table (using the initial configuration, API or context menu).\n *\n * @example\n *\n * ::: only-for javascript\n * ```js\n * const hot = new Handsontable(document.getElementById('example'), {\n *  data: getData(),\n *  mergeCells: [\n *    {row: 0, col: 3, rowspan: 3, colspan: 3},\n *    {row: 2, col: 6, rowspan: 2, colspan: 2},\n *    {row: 4, col: 8, rowspan: 3, colspan: 3}\n *  ],\n * ```\n * :::\n *\n * ::: only-for react\n * ```jsx\n * <HotTable\n *   data={getData()}\n *   // enable plugin\n *   mergeCells={[\n *    {row: 0, col: 3, rowspan: 3, colspan: 3},\n *    {row: 2, col: 6, rowspan: 2, colspan: 2},\n *    {row: 4, col: 8, rowspan: 3, colspan: 3}\n *   ]}\n * />\n * ```\n * :::\n */\nexport var MergeCells = /*#__PURE__*/function (_BasePlugin) {\n  _inherits(MergeCells, _BasePlugin);\n  var _super = _createSuper(MergeCells);\n  function MergeCells(hotInstance) {\n    var _this;\n    _classCallCheck(this, MergeCells);\n    _this = _super.call(this, hotInstance);\n    privatePool.set(_assertThisInitialized(_this), {\n      lastDesiredCoords: null\n    });\n\n    /**\n     * A container for all the merged cells.\n     *\n     * @private\n     * @type {MergedCellsCollection}\n     */\n    _this.mergedCellsCollection = null;\n    /**\n     * Instance of the class responsible for all the autofill-related calculations.\n     *\n     * @private\n     * @type {AutofillCalculations}\n     */\n    _this.autofillCalculations = null;\n    /**\n     * Instance of the class responsible for the selection-related calculations.\n     *\n     * @private\n     * @type {SelectionCalculations}\n     */\n    _this.selectionCalculations = null;\n    return _this;\n  }\n\n  /**\n   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` then the {@link MergeCells#enablePlugin} method is called.\n   *\n   * @returns {boolean}\n   */\n  _createClass(MergeCells, [{\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      return !!this.hot.getSettings()[PLUGIN_KEY];\n    }\n\n    /**\n     * Enables the plugin functionality for this Handsontable instance.\n     */\n  }, {\n    key: \"enablePlugin\",\n    value: function enablePlugin() {\n      var _this2 = this;\n      if (this.enabled) {\n        return;\n      }\n      this.mergedCellsCollection = new MergedCellsCollection(this);\n      this.autofillCalculations = new AutofillCalculations(this);\n      this.selectionCalculations = new SelectionCalculations(this);\n      this.addHook('afterInit', function () {\n        return _this2.onAfterInit.apply(_this2, arguments);\n      });\n      this.addHook('modifyTransformStart', function () {\n        return _this2.onModifyTransformStart.apply(_this2, arguments);\n      });\n      this.addHook('afterModifyTransformStart', function () {\n        return _this2.onAfterModifyTransformStart.apply(_this2, arguments);\n      });\n      this.addHook('modifyTransformEnd', function () {\n        return _this2.onModifyTransformEnd.apply(_this2, arguments);\n      });\n      this.addHook('modifyGetCellCoords', function () {\n        return _this2.onModifyGetCellCoords.apply(_this2, arguments);\n      });\n      this.addHook('beforeSetRangeStart', function () {\n        return _this2.onBeforeSetRangeStart.apply(_this2, arguments);\n      });\n      this.addHook('beforeSetRangeStartOnly', function () {\n        return _this2.onBeforeSetRangeStart.apply(_this2, arguments);\n      });\n      this.addHook('beforeSetRangeEnd', function () {\n        return _this2.onBeforeSetRangeEnd.apply(_this2, arguments);\n      });\n      this.addHook('afterIsMultipleSelection', function () {\n        return _this2.onAfterIsMultipleSelection.apply(_this2, arguments);\n      });\n      this.addHook('afterRenderer', function () {\n        return _this2.onAfterRenderer.apply(_this2, arguments);\n      });\n      this.addHook('afterContextMenuDefaultOptions', function () {\n        return _this2.addMergeActionsToContextMenu.apply(_this2, arguments);\n      });\n      this.addHook('afterGetCellMeta', function () {\n        return _this2.onAfterGetCellMeta.apply(_this2, arguments);\n      });\n      this.addHook('afterViewportRowCalculatorOverride', function () {\n        return _this2.onAfterViewportRowCalculatorOverride.apply(_this2, arguments);\n      });\n      this.addHook('afterViewportColumnCalculatorOverride', function () {\n        return _this2.onAfterViewportColumnCalculatorOverride.apply(_this2, arguments);\n      });\n      this.addHook('modifyAutofillRange', function () {\n        return _this2.onModifyAutofillRange.apply(_this2, arguments);\n      });\n      this.addHook('afterCreateCol', function () {\n        return _this2.onAfterCreateCol.apply(_this2, arguments);\n      });\n      this.addHook('afterRemoveCol', function () {\n        return _this2.onAfterRemoveCol.apply(_this2, arguments);\n      });\n      this.addHook('afterCreateRow', function () {\n        return _this2.onAfterCreateRow.apply(_this2, arguments);\n      });\n      this.addHook('afterRemoveRow', function () {\n        return _this2.onAfterRemoveRow.apply(_this2, arguments);\n      });\n      this.addHook('afterChange', function () {\n        return _this2.onAfterChange.apply(_this2, arguments);\n      });\n      this.addHook('beforeDrawBorders', function () {\n        return _this2.onBeforeDrawAreaBorders.apply(_this2, arguments);\n      });\n      this.addHook('afterDrawSelection', function () {\n        return _this2.onAfterDrawSelection.apply(_this2, arguments);\n      });\n      this.addHook('beforeRemoveCellClassNames', function () {\n        return _this2.onBeforeRemoveCellClassNames.apply(_this2, arguments);\n      });\n      this.addHook('beforeUndoStackChange', function (action, source) {\n        if (source === 'MergeCells') {\n          return false;\n        }\n      });\n      this.registerShortcuts();\n      _get(_getPrototypeOf(MergeCells.prototype), \"enablePlugin\", this).call(this);\n    }\n\n    /**\n     * Disables the plugin functionality for this Handsontable instance.\n     */\n  }, {\n    key: \"disablePlugin\",\n    value: function disablePlugin() {\n      this.clearCollections();\n      this.unregisterShortcuts();\n      this.hot.render();\n      _get(_getPrototypeOf(MergeCells.prototype), \"disablePlugin\", this).call(this);\n    }\n\n    /**\n     * Updates the plugin's state.\n     *\n     * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the\n     * following configuration options:\n     *  - [`mergeCells`](@/api/options.md#mergecells)\n     */\n  }, {\n    key: \"updatePlugin\",\n    value: function updatePlugin() {\n      var settings = this.hot.getSettings()[PLUGIN_KEY];\n      this.disablePlugin();\n      this.enablePlugin();\n      this.generateFromSettings(settings);\n      _get(_getPrototypeOf(MergeCells.prototype), \"updatePlugin\", this).call(this);\n    }\n\n    /**\n     * If the browser is recognized as Chrome, force an additional repaint to prevent showing the effects of a Chrome bug.\n     *\n     * Issue described in https://github.com/handsontable/dev-handsontable/issues/521.\n     *\n     * @private\n     */\n  }, {\n    key: \"ifChromeForceRepaint\",\n    value: function ifChromeForceRepaint() {\n      var _this3 = this;\n      if (!isChrome()) {\n        return;\n      }\n      var rowsToRefresh = [];\n      var rowIndexesToRefresh = [];\n      this.mergedCellsCollection.mergedCells.forEach(function (mergedCell) {\n        var row = mergedCell.row,\n          rowspan = mergedCell.rowspan;\n        for (var r = row + 1; r < row + rowspan; r++) {\n          rowIndexesToRefresh.push(r);\n        }\n      });\n\n      // Remove duplicates\n      rowIndexesToRefresh = _toConsumableArray(new Set(rowIndexesToRefresh));\n      rowIndexesToRefresh.forEach(function (rowIndex) {\n        var renderableRowIndex = _this3.hot.rowIndexMapper.getRenderableFromVisualIndex(rowIndex);\n        _this3.hot.view._wt.wtOverlays.getOverlays(true).map(function (overlay) {\n          return (overlay === null || overlay === void 0 ? void 0 : overlay.name) === 'master' ? overlay : overlay.clone.wtTable;\n        }).forEach(function (wtTableRef) {\n          var rowToRefresh = wtTableRef.getRow(renderableRowIndex);\n          if (rowToRefresh) {\n            // Modify the TR's `background` property to later modify it asynchronously.\n            // The background color is getting modified only with the alpha, so the change should not be visible (and is\n            // covered by the TDs' background color).\n            rowToRefresh.style.background = getStyle(rowToRefresh, 'backgroundColor').replace(')', ', 0.99)');\n            rowsToRefresh.push(rowToRefresh);\n          }\n        });\n      });\n\n      // Asynchronously revert the TRs' `background` property to force a fresh repaint.\n      this.hot._registerTimeout(function () {\n        rowsToRefresh.forEach(function (rowElement) {\n          rowElement.style.background = getStyle(rowElement, 'backgroundColor').replace(', 0.99)', ')');\n        });\n      }, 1);\n    }\n\n    /**\n     * Validates a single setting object, represented by a single merged cell information object.\n     *\n     * @private\n     * @param {object} setting An object with `row`, `col`, `rowspan` and `colspan` properties.\n     * @returns {boolean}\n     */\n  }, {\n    key: \"validateSetting\",\n    value: function validateSetting(setting) {\n      var valid = true;\n      if (!setting) {\n        return false;\n      }\n      if (MergedCellCoords.containsNegativeValues(setting)) {\n        warn(MergedCellCoords.NEGATIVE_VALUES_WARNING(setting));\n        valid = false;\n      } else if (MergedCellCoords.isOutOfBounds(setting, this.hot.countRows(), this.hot.countCols())) {\n        warn(MergedCellCoords.IS_OUT_OF_BOUNDS_WARNING(setting));\n        valid = false;\n      } else if (MergedCellCoords.isSingleCell(setting)) {\n        warn(MergedCellCoords.IS_SINGLE_CELL(setting));\n        valid = false;\n      } else if (MergedCellCoords.containsZeroSpan(setting)) {\n        warn(MergedCellCoords.ZERO_SPAN_WARNING(setting));\n        valid = false;\n      }\n      return valid;\n    }\n\n    /**\n     * Generates the merged cells from the settings provided to the plugin.\n     *\n     * @private\n     * @param {Array|boolean} settings The settings provided to the plugin.\n     */\n  }, {\n    key: \"generateFromSettings\",\n    value: function generateFromSettings(settings) {\n      var _this4 = this;\n      if (Array.isArray(settings)) {\n        var populatedNulls = [];\n        arrayEach(settings, function (setting) {\n          if (!_this4.validateSetting(setting)) {\n            return;\n          }\n          var highlight = _this4.hot._createCellCoords(setting.row, setting.col);\n          var rangeEnd = _this4.hot._createCellCoords(setting.row + setting.rowspan - 1, setting.col + setting.colspan - 1);\n          var mergeRange = _this4.hot._createCellRange(highlight, highlight, rangeEnd);\n\n          // Merging without data population.\n          _this4.mergeRange(mergeRange, true, true);\n          rangeEach(setting.row, setting.row + setting.rowspan - 1, function (rowIndex) {\n            rangeEach(setting.col, setting.col + setting.colspan - 1, function (columnIndex) {\n              // Not resetting a cell representing a merge area's value.\n              if ((rowIndex === setting.row && columnIndex === setting.col) === false) {\n                populatedNulls.push([rowIndex, columnIndex, null]);\n              }\n            });\n          });\n        });\n\n        // There are no merged cells. Thus, no data population is needed.\n        if (populatedNulls.length === 0) {\n          return;\n        }\n        this.hot.setDataAtCell(populatedNulls);\n      }\n    }\n\n    /**\n     * Clears the merged cells from the merged cell container.\n     */\n  }, {\n    key: \"clearCollections\",\n    value: function clearCollections() {\n      this.mergedCellsCollection.clear();\n    }\n\n    /**\n     * Returns `true` if a range is mergeable.\n     *\n     * @private\n     * @param {object} newMergedCellInfo Merged cell information object to test.\n     * @param {boolean} [auto=false] `true` if triggered at initialization.\n     * @returns {boolean}\n     */\n  }, {\n    key: \"canMergeRange\",\n    value: function canMergeRange(newMergedCellInfo) {\n      var auto = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      return auto ? true : this.validateSetting(newMergedCellInfo);\n    }\n\n    /**\n     * Merge or unmerge, based on last selected range.\n     *\n     * @private\n     */\n  }, {\n    key: \"toggleMergeOnSelection\",\n    value: function toggleMergeOnSelection() {\n      var currentRange = this.hot.getSelectedRangeLast();\n      if (!currentRange) {\n        return;\n      }\n      currentRange.setDirection(this.hot.isRtl() ? 'NE-SW' : 'NW-SE');\n      var from = currentRange.from,\n        to = currentRange.to;\n      this.toggleMerge(currentRange);\n      this.hot.selectCell(from.row, from.col, to.row, to.col, false);\n    }\n\n    /**\n     * Merges the selection provided as a cell range.\n     *\n     * @param {CellRange} [cellRange] Selection cell range.\n     */\n  }, {\n    key: \"mergeSelection\",\n    value: function mergeSelection() {\n      var cellRange = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.hot.getSelectedRangeLast();\n      if (!cellRange) {\n        return;\n      }\n      cellRange.setDirection(this.hot.isRtl() ? 'NE-SW' : 'NW-SE');\n      var from = cellRange.from,\n        to = cellRange.to;\n      this.unmergeRange(cellRange, true);\n      this.mergeRange(cellRange);\n      this.hot.selectCell(from.row, from.col, to.row, to.col, false);\n    }\n\n    /**\n     * Unmerges the selection provided as a cell range.\n     *\n     * @param {CellRange} [cellRange] Selection cell range.\n     */\n  }, {\n    key: \"unmergeSelection\",\n    value: function unmergeSelection() {\n      var cellRange = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.hot.getSelectedRangeLast();\n      if (!cellRange) {\n        return;\n      }\n      var from = cellRange.from,\n        to = cellRange.to;\n      this.unmergeRange(cellRange, true);\n      this.hot.selectCell(from.row, from.col, to.row, to.col, false);\n    }\n\n    /**\n     * Merges cells in the provided cell range.\n     *\n     * @private\n     * @param {CellRange} cellRange Cell range to merge.\n     * @param {boolean} [auto=false] `true` if is called automatically, e.g. At initialization.\n     * @param {boolean} [preventPopulation=false] `true`, if the method should not run `populateFromArray` at the end,\n     *   but rather return its arguments.\n     * @returns {Array|boolean} Returns an array of [row, column, dataUnderCollection] if preventPopulation is set to\n     *   true. If the the merging process went successful, it returns `true`, otherwise - `false`.\n     * @fires Hooks#beforeMergeCells\n     * @fires Hooks#afterMergeCells\n     */\n  }, {\n    key: \"mergeRange\",\n    value: function mergeRange(cellRange) {\n      var _this5 = this;\n      var auto = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var preventPopulation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var topStart = cellRange.getTopStartCorner();\n      var bottomEnd = cellRange.getBottomEndCorner();\n      var mergeParent = {\n        row: topStart.row,\n        col: topStart.col,\n        rowspan: bottomEnd.row - topStart.row + 1,\n        colspan: bottomEnd.col - topStart.col + 1\n      };\n      var clearedData = [];\n      var populationInfo = null;\n      if (!this.canMergeRange(mergeParent, auto)) {\n        return false;\n      }\n      this.hot.runHooks('beforeMergeCells', cellRange, auto);\n      rangeEach(0, mergeParent.rowspan - 1, function (i) {\n        rangeEach(0, mergeParent.colspan - 1, function (j) {\n          var clearedValue = null;\n          if (!clearedData[i]) {\n            clearedData[i] = [];\n          }\n          if (i === 0 && j === 0) {\n            clearedValue = _this5.hot.getSourceDataAtCell(_this5.hot.toPhysicalRow(mergeParent.row), _this5.hot.toPhysicalColumn(mergeParent.col));\n          } else {\n            _this5.hot.setCellMeta(mergeParent.row + i, mergeParent.col + j, 'hidden', true);\n          }\n          clearedData[i][j] = clearedValue;\n        });\n      });\n      this.hot.setCellMeta(mergeParent.row, mergeParent.col, 'spanned', true);\n      var mergedCellAdded = this.mergedCellsCollection.add(mergeParent);\n      if (mergedCellAdded) {\n        if (preventPopulation) {\n          populationInfo = [mergeParent.row, mergeParent.col, clearedData];\n        } else {\n          this.hot.populateFromArray(mergeParent.row, mergeParent.col, clearedData, void 0, void 0, this.pluginName);\n        }\n        if (!auto) {\n          this.ifChromeForceRepaint();\n        }\n        this.hot.runHooks('afterMergeCells', cellRange, mergeParent, auto);\n        return populationInfo;\n      }\n      return true;\n    }\n\n    /**\n     * Unmerges the selection provided as a cell range. If no cell range is provided, it uses the current selection.\n     *\n     * @private\n     * @param {CellRange} cellRange Selection cell range.\n     * @param {boolean} [auto=false] `true` if called automatically by the plugin.\n     *\n     * @fires Hooks#beforeUnmergeCells\n     * @fires Hooks#afterUnmergeCells\n     */\n  }, {\n    key: \"unmergeRange\",\n    value: function unmergeRange(cellRange) {\n      var _this6 = this;\n      var auto = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var mergedCells = this.mergedCellsCollection.getWithinRange(cellRange);\n      if (!mergedCells) {\n        return;\n      }\n      this.hot.runHooks('beforeUnmergeCells', cellRange, auto);\n      arrayEach(mergedCells, function (currentCollection) {\n        _this6.mergedCellsCollection.remove(currentCollection.row, currentCollection.col);\n        rangeEach(0, currentCollection.rowspan - 1, function (i) {\n          rangeEach(0, currentCollection.colspan - 1, function (j) {\n            _this6.hot.removeCellMeta(currentCollection.row + i, currentCollection.col + j, 'hidden');\n          });\n        });\n        _this6.hot.removeCellMeta(currentCollection.row, currentCollection.col, 'spanned');\n      });\n      this.hot.runHooks('afterUnmergeCells', cellRange, auto);\n      this.hot.render();\n    }\n\n    /**\n     * Merges or unmerges, based on the cell range provided as `cellRange`.\n     *\n     * @private\n     * @param {CellRange} cellRange The cell range to merge or unmerged.\n     */\n  }, {\n    key: \"toggleMerge\",\n    value: function toggleMerge(cellRange) {\n      var mergedCell = this.mergedCellsCollection.get(cellRange.from.row, cellRange.from.col);\n      var mergedCellCoversWholeRange = mergedCell.row === cellRange.from.row && mergedCell.col === cellRange.from.col && mergedCell.row + mergedCell.rowspan - 1 === cellRange.to.row && mergedCell.col + mergedCell.colspan - 1 === cellRange.to.col;\n      if (mergedCellCoversWholeRange) {\n        this.unmergeRange(cellRange);\n      } else {\n        this.mergeSelection(cellRange);\n      }\n    }\n\n    /**\n     * Merges the specified range.\n     *\n     * @param {number} startRow Start row of the merged cell.\n     * @param {number} startColumn Start column of the merged cell.\n     * @param {number} endRow End row of the merged cell.\n     * @param {number} endColumn End column of the merged cell.\n     * @fires Hooks#beforeMergeCells\n     * @fires Hooks#afterMergeCells\n     */\n  }, {\n    key: \"merge\",\n    value: function merge(startRow, startColumn, endRow, endColumn) {\n      var start = this.hot._createCellCoords(startRow, startColumn);\n      var end = this.hot._createCellCoords(endRow, endColumn);\n      this.mergeRange(this.hot._createCellRange(start, start, end));\n    }\n\n    /**\n     * Unmerges the merged cell in the provided range.\n     *\n     * @param {number} startRow Start row of the merged cell.\n     * @param {number} startColumn Start column of the merged cell.\n     * @param {number} endRow End row of the merged cell.\n     * @param {number} endColumn End column of the merged cell.\n     * @fires Hooks#beforeUnmergeCells\n     * @fires Hooks#afterUnmergeCells\n     */\n  }, {\n    key: \"unmerge\",\n    value: function unmerge(startRow, startColumn, endRow, endColumn) {\n      var start = this.hot._createCellCoords(startRow, startColumn);\n      var end = this.hot._createCellCoords(endRow, endColumn);\n      this.unmergeRange(this.hot._createCellRange(start, start, end));\n    }\n\n    /**\n     * `afterInit` hook callback.\n     *\n     * @private\n     */\n  }, {\n    key: \"onAfterInit\",\n    value: function onAfterInit() {\n      this.generateFromSettings(this.hot.getSettings()[PLUGIN_KEY]);\n      this.hot.render();\n    }\n\n    /**\n     * Register shortcuts responsible for toggling a merge.\n     *\n     * @private\n     */\n  }, {\n    key: \"registerShortcuts\",\n    value: function registerShortcuts() {\n      var _this7 = this;\n      var shortcutManager = this.hot.getShortcutManager();\n      var gridContext = shortcutManager.getContext('grid');\n      gridContext.addShortcut({\n        keys: [['Control', 'm']],\n        callback: function callback() {\n          _this7.toggleMerge(_this7.hot.getSelectedRangeLast());\n          _this7.hot.render();\n        },\n        runOnlyIf: function runOnlyIf(event) {\n          return !event.altKey;\n        },\n        // right ALT in some systems triggers ALT+CTRL\n        group: SHORTCUTS_GROUP\n      });\n    }\n\n    /**\n     * Unregister shortcuts responsible for toggling a merge.\n     *\n     * @private\n     */\n  }, {\n    key: \"unregisterShortcuts\",\n    value: function unregisterShortcuts() {\n      var shortcutManager = this.hot.getShortcutManager();\n      var gridContext = shortcutManager.getContext('grid');\n      gridContext.removeShortcutsByGroup(SHORTCUTS_GROUP);\n    }\n\n    /**\n     * Modifies the information on whether the current selection contains multiple cells. The `afterIsMultipleSelection`\n     * hook callback.\n     *\n     * @private\n     * @param {boolean} isMultiple Determines whether the current selection contains multiple cells.\n     * @returns {boolean}\n     */\n  }, {\n    key: \"onAfterIsMultipleSelection\",\n    value: function onAfterIsMultipleSelection(isMultiple) {\n      if (isMultiple) {\n        var mergedCells = this.mergedCellsCollection.mergedCells;\n        var selectionRange = this.hot.getSelectedRangeLast();\n        for (var group = 0; group < mergedCells.length; group += 1) {\n          if (selectionRange.from.row === mergedCells[group].row && selectionRange.from.col === mergedCells[group].col && selectionRange.to.row === mergedCells[group].row + mergedCells[group].rowspan - 1 && selectionRange.to.col === mergedCells[group].col + mergedCells[group].colspan - 1) {\n            return false;\n          }\n        }\n      }\n      return isMultiple;\n    }\n\n    /**\n     * `modifyTransformStart` hook callback.\n     *\n     * @private\n     * @param {object} delta The transformation delta.\n     */\n  }, {\n    key: \"onModifyTransformStart\",\n    value: function onModifyTransformStart(delta) {\n      var priv = privatePool.get(this);\n      var currentlySelectedRange = this.hot.getSelectedRangeLast();\n      var newDelta = {\n        row: delta.row,\n        col: delta.col\n      };\n      var nextPosition = null;\n      var currentPosition = this.hot._createCellCoords(currentlySelectedRange.highlight.row, currentlySelectedRange.highlight.col);\n      var mergedParent = this.mergedCellsCollection.get(currentPosition.row, currentPosition.col);\n      if (!priv.lastDesiredCoords) {\n        priv.lastDesiredCoords = this.hot._createCellCoords(null, null);\n      }\n      if (mergedParent) {\n        // only merge selected\n        var mergeTopLeft = this.hot._createCellCoords(mergedParent.row, mergedParent.col);\n        var mergeBottomRight = this.hot._createCellCoords(mergedParent.row + mergedParent.rowspan - 1, mergedParent.col + mergedParent.colspan - 1);\n        var mergeRange = this.hot._createCellRange(mergeTopLeft, mergeTopLeft, mergeBottomRight);\n        if (!mergeRange.includes(priv.lastDesiredCoords)) {\n          priv.lastDesiredCoords = this.hot._createCellCoords(null, null); // reset outdated version of lastDesiredCoords\n        }\n\n        newDelta.row = priv.lastDesiredCoords.row ? priv.lastDesiredCoords.row - currentPosition.row : newDelta.row;\n        newDelta.col = priv.lastDesiredCoords.col ? priv.lastDesiredCoords.col - currentPosition.col : newDelta.col;\n        if (delta.row > 0) {\n          // moving down\n          newDelta.row = mergedParent.row + mergedParent.rowspan - 1 - currentPosition.row + delta.row;\n        } else if (delta.row < 0) {\n          // moving up\n          newDelta.row = currentPosition.row - mergedParent.row + delta.row;\n        }\n        if (delta.col > 0) {\n          // moving right\n          newDelta.col = mergedParent.col + mergedParent.colspan - 1 - currentPosition.col + delta.col;\n        } else if (delta.col < 0) {\n          // moving left\n          newDelta.col = currentPosition.col - mergedParent.col + delta.col;\n        }\n      }\n      nextPosition = this.hot._createCellCoords(currentlySelectedRange.highlight.row + newDelta.row, currentlySelectedRange.highlight.col + newDelta.col);\n      var nextPositionMergedCell = this.mergedCellsCollection.get(nextPosition.row, nextPosition.col);\n      if (nextPositionMergedCell) {\n        // skipping the invisible cells in the merge range\n        var firstRenderableCoords = this.mergedCellsCollection.getFirstRenderableCoords(nextPositionMergedCell.row, nextPositionMergedCell.col);\n        priv.lastDesiredCoords = nextPosition;\n        newDelta = {\n          row: firstRenderableCoords.row - currentPosition.row,\n          col: firstRenderableCoords.col - currentPosition.col\n        };\n      }\n      if (newDelta.row !== 0) {\n        delta.row = newDelta.row;\n      }\n      if (newDelta.col !== 0) {\n        delta.col = newDelta.col;\n      }\n    }\n\n    /**\n     * `modifyTransformEnd` hook callback. Needed to handle \"jumping over\" merged merged cells, while selecting.\n     *\n     * @private\n     * @param {object} delta The transformation delta.\n     */\n  }, {\n    key: \"onModifyTransformEnd\",\n    value: function onModifyTransformEnd(delta) {\n      var _this8 = this;\n      var currentSelectionRange = this.hot.getSelectedRangeLast();\n      var newDelta = clone(delta);\n      var newSelectionRange = this.selectionCalculations.getUpdatedSelectionRange(currentSelectionRange, delta);\n      var tempDelta = clone(newDelta);\n      var mergedCellsWithinRange = this.mergedCellsCollection.getWithinRange(newSelectionRange, true);\n      do {\n        tempDelta = clone(newDelta);\n        this.selectionCalculations.getUpdatedSelectionRange(currentSelectionRange, newDelta);\n        arrayEach(mergedCellsWithinRange, function (mergedCell) {\n          _this8.selectionCalculations.snapDelta(newDelta, currentSelectionRange, mergedCell);\n        });\n      } while (newDelta.row !== tempDelta.row || newDelta.col !== tempDelta.col);\n      delta.row = newDelta.row;\n      delta.col = newDelta.col;\n    }\n\n    /**\n     * `modifyGetCellCoords` hook callback. Swaps the `getCell` coords with the merged parent coords.\n     *\n     * @private\n     * @param {number} row Row index.\n     * @param {number} column Visual column index.\n     * @returns {Array|undefined} Visual coordinates of the merge.\n     */\n  }, {\n    key: \"onModifyGetCellCoords\",\n    value: function onModifyGetCellCoords(row, column) {\n      if (row < 0 || column < 0) {\n        return;\n      }\n      var mergeParent = this.mergedCellsCollection.get(row, column);\n      if (!mergeParent) {\n        return;\n      }\n      var mergeRow = mergeParent.row,\n        mergeColumn = mergeParent.col,\n        colspan = mergeParent.colspan,\n        rowspan = mergeParent.rowspan;\n      return [\n      // Most top-left merged cell coords.\n      mergeRow, mergeColumn,\n      // Most bottom-right merged cell coords.\n      mergeRow + rowspan - 1, mergeColumn + colspan - 1];\n    }\n\n    /**\n     * `afterContextMenuDefaultOptions` hook callback.\n     *\n     * @private\n     * @param {object} defaultOptions The default context menu options.\n     */\n  }, {\n    key: \"addMergeActionsToContextMenu\",\n    value: function addMergeActionsToContextMenu(defaultOptions) {\n      defaultOptions.items.push({\n        name: '---------'\n      }, toggleMergeItem(this));\n    }\n\n    /**\n     * `afterRenderer` hook callback.\n     *\n     * @private\n     * @param {HTMLElement} TD The cell to be modified.\n     * @param {number} row Row index.\n     * @param {number} col Visual column index.\n     */\n  }, {\n    key: \"onAfterRenderer\",\n    value: function onAfterRenderer(TD, row, col) {\n      var mergedCell = this.mergedCellsCollection.get(row, col);\n      // We shouldn't override data in the collection.\n      var mergedCellCopy = isObject(mergedCell) ? clone(mergedCell) : void 0;\n      if (isObject(mergedCellCopy)) {\n        var _this$hot = this.hot,\n          rowMapper = _this$hot.rowIndexMapper,\n          columnMapper = _this$hot.columnIndexMapper;\n        var mergeRow = mergedCellCopy.row,\n          mergeColumn = mergedCellCopy.col,\n          colspan = mergedCellCopy.colspan,\n          rowspan = mergedCellCopy.rowspan;\n        var _this$translateMerged = this.translateMergedCellToRenderable(mergeRow, rowspan, mergeColumn, colspan),\n          _this$translateMerged2 = _slicedToArray(_this$translateMerged, 2),\n          lastMergedRowIndex = _this$translateMerged2[0],\n          lastMergedColumnIndex = _this$translateMerged2[1];\n        var renderedRowIndex = rowMapper.getRenderableFromVisualIndex(row);\n        var renderedColumnIndex = columnMapper.getRenderableFromVisualIndex(col);\n        var maxRowSpan = lastMergedRowIndex - renderedRowIndex + 1; // Number of rendered columns.\n        var maxColSpan = lastMergedColumnIndex - renderedColumnIndex + 1; // Number of rendered columns.\n\n        // We just try to determine some values basing on the actual number of rendered indexes (some columns may be hidden).\n        mergedCellCopy.row = rowMapper.getNearestNotHiddenIndex(mergedCellCopy.row, 1);\n        // We just try to determine some values basing on the actual number of rendered indexes (some columns may be hidden).\n        mergedCellCopy.col = columnMapper.getNearestNotHiddenIndex(mergedCellCopy.col, 1);\n        // The `rowSpan` property for a `TD` element should be at most equal to number of rendered rows in the merge area.\n        mergedCellCopy.rowspan = Math.min(mergedCellCopy.rowspan, maxRowSpan);\n        // The `colSpan` property for a `TD` element should be at most equal to number of rendered columns in the merge area.\n        mergedCellCopy.colspan = Math.min(mergedCellCopy.colspan, maxColSpan);\n      }\n      applySpanProperties(TD, mergedCellCopy, row, col);\n    }\n\n    /**\n     * `beforeSetRangeStart` and `beforeSetRangeStartOnly` hook callback.\n     * A selection within merge area should be rewritten to the start of merge area.\n     *\n     * @private\n     * @param {object} coords Cell coords.\n     */\n  }, {\n    key: \"onBeforeSetRangeStart\",\n    value: function onBeforeSetRangeStart(coords) {\n      // TODO: It is a workaround, but probably this hook may be needed. Every selection on the merge area\n      // could set start point of the selection to the start of the merge area. However, logic inside `expandByRange` need\n      // an initial start point. Click on the merge cell when there are some hidden indexes break the logic in some cases.\n      // Please take a look at #7010 for more information. I'm not sure if selection directions are calculated properly\n      // and what was idea for flipping direction inside `expandByRange` method.\n      if (this.mergedCellsCollection.isFirstRenderableMergedCell(coords.row, coords.col)) {\n        var mergeParent = this.mergedCellsCollection.get(coords.row, coords.col);\n        var _ref = [mergeParent.row, mergeParent.col];\n        coords.row = _ref[0];\n        coords.col = _ref[1];\n      }\n    }\n\n    /**\n     * `beforeSetRangeEnd` hook callback.\n     * While selecting cells with keyboard or mouse, make sure that rectangular area is expanded to the extent of the\n     * merged cell.\n     *\n     * Note: Please keep in mind that callback may modify both start and end range coordinates by the reference.\n     *\n     * @private\n     * @param {object} coords Cell coords.\n     */\n  }, {\n    key: \"onBeforeSetRangeEnd\",\n    value: function onBeforeSetRangeEnd(coords) {\n      var selRange = this.hot.getSelectedRangeLast();\n      selRange.highlight = this.hot._createCellCoords(selRange.highlight.row, selRange.highlight.col); // clone in case we will modify its reference\n      selRange.to = coords;\n      var rangeExpanded = false;\n      if (this.hot.selection.isSelectedByColumnHeader() || this.hot.selection.isSelectedByRowHeader()) {\n        return;\n      }\n      do {\n        rangeExpanded = false;\n        for (var i = 0; i < this.mergedCellsCollection.mergedCells.length; i += 1) {\n          var cellInfo = this.mergedCellsCollection.mergedCells[i];\n          var mergedCellRange = cellInfo.getRange();\n          if (selRange.expandByRange(mergedCellRange)) {\n            coords.row = selRange.to.row;\n            coords.col = selRange.to.col;\n            rangeExpanded = true;\n          }\n        }\n      } while (rangeExpanded);\n    }\n\n    /**\n     * The `afterGetCellMeta` hook callback.\n     *\n     * @private\n     * @param {number} row Row index.\n     * @param {number} col Column index.\n     * @param {object} cellProperties The cell properties object.\n     */\n  }, {\n    key: \"onAfterGetCellMeta\",\n    value: function onAfterGetCellMeta(row, col, cellProperties) {\n      var mergeParent = this.mergedCellsCollection.get(row, col);\n      if (mergeParent) {\n        if (mergeParent.row !== row || mergeParent.col !== col) {\n          cellProperties.copyable = false;\n        } else {\n          cellProperties.rowspan = mergeParent.rowspan;\n          cellProperties.colspan = mergeParent.colspan;\n        }\n      }\n    }\n\n    /**\n     * `afterViewportRowCalculatorOverride` hook callback.\n     *\n     * @private\n     * @param {object} calc The row calculator object.\n     */\n  }, {\n    key: \"onAfterViewportRowCalculatorOverride\",\n    value: function onAfterViewportRowCalculatorOverride(calc) {\n      var nrOfColumns = this.hot.countCols();\n      this.modifyViewportRowStart(calc, nrOfColumns);\n      this.modifyViewportRowEnd(calc, nrOfColumns);\n    }\n\n    /**\n     * Modify viewport start when needed. We extend viewport when merged cells aren't fully visible.\n     *\n     * @private\n     * @param {object} calc The row calculator object.\n     * @param {number} nrOfColumns Number of visual columns.\n     */\n  }, {\n    key: \"modifyViewportRowStart\",\n    value: function modifyViewportRowStart(calc, nrOfColumns) {\n      var rowMapper = this.hot.rowIndexMapper;\n      var visualStartRow = rowMapper.getVisualFromRenderableIndex(calc.startRow);\n      for (var visualColumnIndex = 0; visualColumnIndex < nrOfColumns; visualColumnIndex += 1) {\n        var mergeParentForViewportStart = this.mergedCellsCollection.get(visualStartRow, visualColumnIndex);\n        if (isObject(mergeParentForViewportStart)) {\n          var renderableIndexAtMergeStart = rowMapper.getRenderableFromVisualIndex(rowMapper.getNearestNotHiddenIndex(mergeParentForViewportStart.row, 1));\n\n          // Merge start is out of the viewport (i.e. when we scrolled to the bottom and we can see just part of a merge).\n          if (renderableIndexAtMergeStart < calc.startRow) {\n            // We extend viewport when some rows have been merged.\n            calc.startRow = renderableIndexAtMergeStart;\n            // We are looking for next merges inside already extended viewport (starting again from row equal to 0).\n            this.modifyViewportRowStart(calc, nrOfColumns); // recursively search upwards\n\n            return; // Finish the current loop. Everything will be checked from the beginning by above recursion.\n          }\n        }\n      }\n    }\n\n    /**\n     *  Modify viewport end when needed. We extend viewport when merged cells aren't fully visible.\n     *\n     * @private\n     * @param {object} calc The row calculator object.\n     * @param {number} nrOfColumns Number of visual columns.\n     */\n  }, {\n    key: \"modifyViewportRowEnd\",\n    value: function modifyViewportRowEnd(calc, nrOfColumns) {\n      var rowMapper = this.hot.rowIndexMapper;\n      var visualEndRow = rowMapper.getVisualFromRenderableIndex(calc.endRow);\n      for (var visualColumnIndex = 0; visualColumnIndex < nrOfColumns; visualColumnIndex += 1) {\n        var mergeParentForViewportEnd = this.mergedCellsCollection.get(visualEndRow, visualColumnIndex);\n        if (isObject(mergeParentForViewportEnd)) {\n          var mergeEnd = mergeParentForViewportEnd.row + mergeParentForViewportEnd.rowspan - 1;\n          var renderableIndexAtMergeEnd = rowMapper.getRenderableFromVisualIndex(rowMapper.getNearestNotHiddenIndex(mergeEnd, -1));\n\n          // Merge end is out of the viewport.\n          if (renderableIndexAtMergeEnd > calc.endRow) {\n            // We extend the viewport when some rows have been merged.\n            calc.endRow = renderableIndexAtMergeEnd;\n            // We are looking for next merges inside already extended viewport (starting again from row equal to 0).\n            this.modifyViewportRowEnd(calc, nrOfColumns); // recursively search upwards\n\n            return; // Finish the current loop. Everything will be checked from the beginning by above recursion.\n          }\n        }\n      }\n    }\n\n    /**\n     * `afterViewportColumnCalculatorOverride` hook callback.\n     *\n     * @private\n     * @param {object} calc The column calculator object.\n     */\n  }, {\n    key: \"onAfterViewportColumnCalculatorOverride\",\n    value: function onAfterViewportColumnCalculatorOverride(calc) {\n      var nrOfRows = this.hot.countRows();\n      this.modifyViewportColumnStart(calc, nrOfRows);\n      this.modifyViewportColumnEnd(calc, nrOfRows);\n    }\n\n    /**\n     * Modify viewport start when needed. We extend viewport when merged cells aren't fully visible.\n     *\n     * @private\n     * @param {object} calc The column calculator object.\n     * @param {number} nrOfRows Number of visual rows.\n     */\n  }, {\n    key: \"modifyViewportColumnStart\",\n    value: function modifyViewportColumnStart(calc, nrOfRows) {\n      var columnMapper = this.hot.columnIndexMapper;\n      var visualStartCol = columnMapper.getVisualFromRenderableIndex(calc.startColumn);\n      for (var visualRowIndex = 0; visualRowIndex < nrOfRows; visualRowIndex += 1) {\n        var mergeParentForViewportStart = this.mergedCellsCollection.get(visualRowIndex, visualStartCol);\n        if (isObject(mergeParentForViewportStart)) {\n          var renderableIndexAtMergeStart = columnMapper.getRenderableFromVisualIndex(columnMapper.getNearestNotHiddenIndex(mergeParentForViewportStart.col, 1));\n\n          // Merge start is out of the viewport (i.e. when we scrolled to the right and we can see just part of a merge).\n          if (renderableIndexAtMergeStart < calc.startColumn) {\n            // We extend viewport when some columns have been merged.\n            calc.startColumn = renderableIndexAtMergeStart;\n            // We are looking for next merges inside already extended viewport (starting again from column equal to 0).\n            this.modifyViewportColumnStart(calc, nrOfRows); // recursively search upwards\n\n            return; // Finish the current loop. Everything will be checked from the beginning by above recursion.\n          }\n        }\n      }\n    }\n\n    /**\n     *  Modify viewport end when needed. We extend viewport when merged cells aren't fully visible.\n     *\n     * @private\n     * @param {object} calc The column calculator object.\n     * @param {number} nrOfRows Number of visual rows.\n     */\n  }, {\n    key: \"modifyViewportColumnEnd\",\n    value: function modifyViewportColumnEnd(calc, nrOfRows) {\n      var columnMapper = this.hot.columnIndexMapper;\n      var visualEndCol = columnMapper.getVisualFromRenderableIndex(calc.endColumn);\n      for (var visualRowIndex = 0; visualRowIndex < nrOfRows; visualRowIndex += 1) {\n        var mergeParentForViewportEnd = this.mergedCellsCollection.get(visualRowIndex, visualEndCol);\n        if (isObject(mergeParentForViewportEnd)) {\n          var mergeEnd = mergeParentForViewportEnd.col + mergeParentForViewportEnd.colspan - 1;\n          var renderableIndexAtMergeEnd = columnMapper.getRenderableFromVisualIndex(columnMapper.getNearestNotHiddenIndex(mergeEnd, -1));\n\n          // Merge end is out of the viewport.\n          if (renderableIndexAtMergeEnd > calc.endColumn) {\n            // We extend the viewport when some columns have been merged.\n            calc.endColumn = renderableIndexAtMergeEnd;\n            // We are looking for next merges inside already extended viewport (starting again from column equal to 0).\n            this.modifyViewportColumnEnd(calc, nrOfRows); // recursively search upwards\n\n            return; // Finish the current loop. Everything will be checked from the beginning by above recursion.\n          }\n        }\n      }\n    }\n\n    /**\n     * Translates merged cell coordinates to renderable indexes.\n     *\n     * @private\n     * @param {number} parentRow Visual row index.\n     * @param {number} rowspan Rowspan which describes shift which will be applied to parent row\n     *                         to calculate renderable index which points to the most bottom\n     *                         index position. Pass rowspan as `0` to calculate the most top\n     *                         index position.\n     * @param {number} parentColumn Visual column index.\n     * @param {number} colspan Colspan which describes shift which will be applied to parent column\n     *                         to calculate renderable index which points to the most right\n     *                         index position. Pass colspan as `0` to calculate the most left\n     *                         index position.\n     * @returns {number[]}\n     */\n  }, {\n    key: \"translateMergedCellToRenderable\",\n    value: function translateMergedCellToRenderable(parentRow, rowspan, parentColumn, colspan) {\n      var _this$hot2 = this.hot,\n        rowMapper = _this$hot2.rowIndexMapper,\n        columnMapper = _this$hot2.columnIndexMapper;\n      var firstNonHiddenRow;\n      var firstNonHiddenColumn;\n      if (rowspan === 0) {\n        firstNonHiddenRow = rowMapper.getNearestNotHiddenIndex(parentRow, 1);\n      } else {\n        firstNonHiddenRow = rowMapper.getNearestNotHiddenIndex(parentRow + rowspan - 1, -1);\n      }\n      if (colspan === 0) {\n        firstNonHiddenColumn = columnMapper.getNearestNotHiddenIndex(parentColumn, 1);\n      } else {\n        firstNonHiddenColumn = columnMapper.getNearestNotHiddenIndex(parentColumn + colspan - 1, -1);\n      }\n      var renderableRow = parentRow >= 0 ? rowMapper.getRenderableFromVisualIndex(firstNonHiddenRow) : parentRow;\n      var renderableColumn = parentColumn >= 0 ? columnMapper.getRenderableFromVisualIndex(firstNonHiddenColumn) : parentColumn;\n      return [renderableRow, renderableColumn];\n    }\n\n    /**\n     * The `modifyAutofillRange` hook callback.\n     *\n     * @private\n     * @param {Array} drag The drag area coordinates.\n     * @param {Array} select The selection information.\n     * @returns {Array} The new drag area.\n     */\n  }, {\n    key: \"onModifyAutofillRange\",\n    value: function onModifyAutofillRange(drag, select) {\n      this.autofillCalculations.correctSelectionAreaSize(select);\n      var dragDirection = this.autofillCalculations.getDirection(select, drag);\n      var dragArea = drag;\n      if (this.autofillCalculations.dragAreaOverlapsCollections(select, dragArea, dragDirection)) {\n        dragArea = select;\n        return dragArea;\n      }\n      var mergedCellsWithinSelectionArea = this.mergedCellsCollection.getWithinRange({\n        from: {\n          row: select[0],\n          col: select[1]\n        },\n        to: {\n          row: select[2],\n          col: select[3]\n        }\n      });\n      if (!mergedCellsWithinSelectionArea) {\n        return dragArea;\n      }\n      dragArea = this.autofillCalculations.snapDragArea(select, dragArea, dragDirection, mergedCellsWithinSelectionArea);\n      return dragArea;\n    }\n\n    /**\n     * `afterCreateCol` hook callback.\n     *\n     * @private\n     * @param {number} column Column index.\n     * @param {number} count Number of created columns.\n     */\n  }, {\n    key: \"onAfterCreateCol\",\n    value: function onAfterCreateCol(column, count) {\n      this.mergedCellsCollection.shiftCollections('right', column, count);\n    }\n\n    /**\n     * `afterRemoveCol` hook callback.\n     *\n     * @private\n     * @param {number} column Column index.\n     * @param {number} count Number of removed columns.\n     */\n  }, {\n    key: \"onAfterRemoveCol\",\n    value: function onAfterRemoveCol(column, count) {\n      this.mergedCellsCollection.shiftCollections('left', column, count);\n    }\n\n    /**\n     * `afterCreateRow` hook callback.\n     *\n     * @private\n     * @param {number} row Row index.\n     * @param {number} count Number of created rows.\n     * @param {string} source Source of change.\n     */\n  }, {\n    key: \"onAfterCreateRow\",\n    value: function onAfterCreateRow(row, count, source) {\n      if (source === 'auto') {\n        return;\n      }\n      this.mergedCellsCollection.shiftCollections('down', row, count);\n    }\n\n    /**\n     * `afterRemoveRow` hook callback.\n     *\n     * @private\n     * @param {number} row Row index.\n     * @param {number} count Number of removed rows.\n     */\n  }, {\n    key: \"onAfterRemoveRow\",\n    value: function onAfterRemoveRow(row, count) {\n      this.mergedCellsCollection.shiftCollections('up', row, count);\n    }\n\n    /**\n     * `afterChange` hook callback. Used to propagate merged cells after using Autofill.\n     *\n     * @private\n     * @param {Array} changes The changes array.\n     * @param {string} source Determines the source of the change.\n     */\n  }, {\n    key: \"onAfterChange\",\n    value: function onAfterChange(changes, source) {\n      if (source !== 'Autofill.fill') {\n        return;\n      }\n      this.autofillCalculations.recreateAfterDataPopulation(changes);\n    }\n\n    /**\n     * `beforeDrawAreaBorders` hook callback.\n     *\n     * @private\n     * @param {Array} corners Visual coordinates of the area corners.\n     * @param {string} className Class name for the area.\n     */\n  }, {\n    key: \"onBeforeDrawAreaBorders\",\n    value: function onBeforeDrawAreaBorders(corners, className) {\n      if (className && className === 'area') {\n        var selectedRange = this.hot.getSelectedRangeLast();\n        var mergedCellsWithinRange = this.mergedCellsCollection.getWithinRange(selectedRange);\n        arrayEach(mergedCellsWithinRange, function (mergedCell) {\n          if (selectedRange.getBottomEndCorner().row === mergedCell.getLastRow() && selectedRange.getBottomEndCorner().col === mergedCell.getLastColumn()) {\n            corners[2] = mergedCell.row;\n            corners[3] = mergedCell.col;\n          }\n        });\n      }\n    }\n\n    /**\n     * `afterModifyTransformStart` hook callback. Fixes a problem with navigating through merged cells at the edges of\n     * the table with the ENTER/SHIFT+ENTER/TAB/SHIFT+TAB keys.\n     *\n     * @private\n     * @param {CellCoords} coords Coordinates of the to-be-selected cell.\n     * @param {number} rowTransformDir Row transformation direction (negative value = up, 0 = none, positive value =\n     *   down).\n     * @param {number} colTransformDir Column transformation direction (negative value = up, 0 = none, positive value =\n     *   down).\n     */\n  }, {\n    key: \"onAfterModifyTransformStart\",\n    value: function onAfterModifyTransformStart(coords, rowTransformDir, colTransformDir) {\n      if (!this.enabled) {\n        return;\n      }\n      var mergedCellAtCoords = this.mergedCellsCollection.get(coords.row, coords.col);\n      if (!mergedCellAtCoords) {\n        return;\n      }\n      var goingDown = rowTransformDir > 0;\n      var goingUp = rowTransformDir < 0;\n      var goingLeft = colTransformDir < 0;\n      var goingRight = colTransformDir > 0;\n      var mergedCellOnBottomEdge = mergedCellAtCoords.row + mergedCellAtCoords.rowspan - 1 === this.hot.countRows() - 1;\n      var mergedCellOnTopEdge = mergedCellAtCoords.row === 0;\n      var mergedCellOnRightEdge = mergedCellAtCoords.col + mergedCellAtCoords.colspan - 1 === this.hot.countCols() - 1;\n      var mergedCellOnLeftEdge = mergedCellAtCoords.col === 0;\n      if (goingDown && mergedCellOnBottomEdge || goingUp && mergedCellOnTopEdge || goingRight && mergedCellOnRightEdge || goingLeft && mergedCellOnLeftEdge) {\n        coords.row = mergedCellAtCoords.row;\n        coords.col = mergedCellAtCoords.col;\n      }\n    }\n\n    /**\n     * `afterDrawSelection` hook callback. Used to add the additional class name for the entirely-selected merged cells.\n     *\n     * @private\n     * @param {number} currentRow Visual row index of the currently processed cell.\n     * @param {number} currentColumn Visual column index of the currently cell.\n     * @param {Array} cornersOfSelection Array of the current selection in a form of `[startRow, startColumn, endRow,\n     *   endColumn]`.\n     * @param {number|undefined} layerLevel Number indicating which layer of selection is currently processed.\n     * @returns {string|undefined} A `String`, which will act as an additional `className` to be added to the currently\n     *   processed cell.\n     */\n  }, {\n    key: \"onAfterDrawSelection\",\n    value: function onAfterDrawSelection(currentRow, currentColumn, cornersOfSelection, layerLevel) {\n      // Nothing's selected (hook might be triggered by the custom borders)\n      if (!cornersOfSelection) {\n        return;\n      }\n      return this.selectionCalculations.getSelectedMergedCellClassName(currentRow, currentColumn, cornersOfSelection, layerLevel);\n    }\n\n    /**\n     * `beforeRemoveCellClassNames` hook callback. Used to remove additional class name from all cells in the table.\n     *\n     * @private\n     * @returns {string[]} An `Array` of `String`s. Each of these strings will act like class names to be removed from\n     *   all the cells in the table.\n     */\n  }, {\n    key: \"onBeforeRemoveCellClassNames\",\n    value: function onBeforeRemoveCellClassNames() {\n      return this.selectionCalculations.getSelectedMergedCellClassNameToRemove();\n    }\n  }], [{\n    key: \"PLUGIN_KEY\",\n    get: function get() {\n      return PLUGIN_KEY;\n    }\n  }, {\n    key: \"PLUGIN_PRIORITY\",\n    get: function get() {\n      return PLUGIN_PRIORITY;\n    }\n  }]);\n  return MergeCells;\n}(BasePlugin);"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}