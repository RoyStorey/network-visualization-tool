{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nimport GlobalMeta from \"./metaLayers/globalMeta.mjs\";\nimport TableMeta from \"./metaLayers/tableMeta.mjs\";\nimport ColumnMeta from \"./metaLayers/columnMeta.mjs\";\nimport CellMeta from \"./metaLayers/cellMeta.mjs\";\nimport localHooks from \"../../mixins/localHooks.mjs\";\nimport { mixin } from \"../../helpers/object.mjs\";\n/**\n * With the Meta Manager class, it can be possible to manage with meta objects for different layers in\n * one place. All coordinates used to fetch, updating, removing, or creating rows or columns have to\n * be passed as physical values.\n *\n * The diagram of the meta layers:\n * +-------------+.\n * │ GlobalMeta  │\n * │ (prototype) │\n * +-------------+\\\n *       │         \\\n *       │          \\\n *      \\│/         _\\|\n * +-------------+    +-------------+.\n * │ TableMeta   │    │ ColumnMeta  │\n * │ (instance)  │    │ (prototype) │\n * +-------------+    +-------------+.\n *                         │\n *                         │\n *                        \\│/\n *                    +-------------+.\n *                    │  CellMeta   │\n *                    │ (instance)  │\n *                    +-------------+.\n *\n * A more detailed description of the specific layers can be found in the \"metaLayers/\" modules description.\n */\nvar MetaManager = /*#__PURE__*/function () {\n  function MetaManager(hot) {\n    var _this = this;\n    var customSettings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var metaMods = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    _classCallCheck(this, MetaManager);\n    /**\n     * @type {Handsontable}\n     */\n    this.hot = hot;\n    /**\n     * @type {GlobalMeta}\n     */\n    this.globalMeta = new GlobalMeta(hot);\n    /**\n     * @type {TableMeta}\n     */\n    this.tableMeta = new TableMeta(this.globalMeta);\n    /**\n     * @type {ColumnMeta}\n     */\n    this.columnMeta = new ColumnMeta(this.globalMeta);\n    /**\n     * @type {CellMeta}\n     */\n    this.cellMeta = new CellMeta(this.columnMeta);\n    metaMods.forEach(function (ModifierClass) {\n      return new ModifierClass(_this);\n    });\n    this.globalMeta.updateMeta(customSettings);\n  }\n\n  /**\n   * Gets the global meta object that is a root of all default settings, which are recognizable by Handsontable.\n   * Other layers inherites all properties from this. Adding, removing, or changing property in that\n   * object has a direct reflection to all layers.\n   *\n   * @returns {object}\n   */\n  _createClass(MetaManager, [{\n    key: \"getGlobalMeta\",\n    value: function getGlobalMeta() {\n      return this.globalMeta.getMeta();\n    }\n\n    /**\n     * Updates global settings object by merging settings with the current state.\n     *\n     * @param {object} settings An object to merge with.\n     */\n  }, {\n    key: \"updateGlobalMeta\",\n    value: function updateGlobalMeta(settings) {\n      this.globalMeta.updateMeta(settings);\n    }\n\n    /**\n     * Gets settings object that was passed in the Handsontable constructor. That layer contains all\n     * default settings inherited from the GlobalMeta layer merged with settings passed by the developer.\n     * Adding, removing, or changing property in that object has no direct reflection on any other layers.\n     *\n     * @returns {TableMeta}\n     */\n  }, {\n    key: \"getTableMeta\",\n    value: function getTableMeta() {\n      return this.tableMeta.getMeta();\n    }\n\n    /**\n     * Updates table settings object by merging settings with the current state.\n     *\n     * @param {object} settings An object to merge with.\n     */\n  }, {\n    key: \"updateTableMeta\",\n    value: function updateTableMeta(settings) {\n      this.tableMeta.updateMeta(settings);\n    }\n\n    /**\n     * Gets column meta object that is a root of all settings defined in the column property of the Handsontable\n     * settings. Each column in the Handsontable is associated with a unique meta object which identified by\n     * the physical column index. Adding, removing, or changing property in that object has a direct reflection\n     * only for the CellMeta layer. The reflection will be visible only if the property doesn't exist in the lower\n     * layers (prototype lookup).\n     *\n     * @param {number} physicalColumn The physical column index.\n     * @returns {object}\n     */\n  }, {\n    key: \"getColumnMeta\",\n    value: function getColumnMeta(physicalColumn) {\n      return this.columnMeta.getMeta(physicalColumn);\n    }\n\n    /**\n     * Updates column meta object by merging settings with the current state.\n     *\n     * @param {number} physicalColumn The physical column index which points what column meta object is updated.\n     * @param {object} settings An object to merge with.\n     */\n  }, {\n    key: \"updateColumnMeta\",\n    value: function updateColumnMeta(physicalColumn, settings) {\n      this.columnMeta.updateMeta(physicalColumn, settings);\n    }\n\n    /**\n     * Gets the cell meta object that is a root of all settings defined for the specific cell rendered by\n     * the Handsontable. Each cell meta inherits settings from higher layers. When a property doesn't\n     * exist in that layer, it is looked up through a prototype to the highest layer. Starting\n     * from CellMeta -> ColumnMeta and ending to GlobalMeta, which stores default settings. Adding,\n     * removing, or changing property in that object has no direct reflection on any other layers.\n     *\n     * @param {number} physicalRow The physical row index.\n     * @param {number} physicalColumn The physical column index.\n     * @param {object} options Additional options that are used to extend the cell meta object.\n     * @param {number} options.visualRow The visual row index of the currently requested cell meta object.\n     * @param {number} options.visualColumn The visual column index of the currently requested cell meta object.\n     * @returns {object}\n     */\n  }, {\n    key: \"getCellMeta\",\n    value: function getCellMeta(physicalRow, physicalColumn, _ref) {\n      var visualRow = _ref.visualRow,\n        visualColumn = _ref.visualColumn;\n      var cellMeta = this.cellMeta.getMeta(physicalRow, physicalColumn);\n      cellMeta.visualRow = visualRow;\n      cellMeta.visualCol = visualColumn;\n      cellMeta.row = physicalRow;\n      cellMeta.col = physicalColumn;\n      this.runLocalHooks('afterGetCellMeta', cellMeta);\n      return cellMeta;\n    }\n\n    /**\n     * Gets a value (defined by the `key` property) from the cell meta object.\n     *\n     * @param {number} physicalRow The physical row index.\n     * @param {number} physicalColumn The physical column index.\n     * @param {string} key Defines the value that will be returned from the cell meta object.\n     * @returns {*}\n     */\n  }, {\n    key: \"getCellMetaKeyValue\",\n    value: function getCellMetaKeyValue(physicalRow, physicalColumn, key) {\n      if (typeof key !== 'string') {\n        throw new Error('The passed cell meta object key is not a string');\n      }\n      return this.cellMeta.getMeta(physicalRow, physicalColumn, key);\n    }\n\n    /**\n     * Sets settings object for cell meta object defined by \"key\" property.\n     *\n     * @param {number} physicalRow The physical row index.\n     * @param {number} physicalColumn The physical column index.\n     * @param {string} key The property name to set.\n     * @param {*} value Value to save.\n     */\n  }, {\n    key: \"setCellMeta\",\n    value: function setCellMeta(physicalRow, physicalColumn, key, value) {\n      this.cellMeta.setMeta(physicalRow, physicalColumn, key, value);\n    }\n\n    /**\n     * Updates cell meta object by merging settings with the current state.\n     *\n     * @param {number} physicalRow The physical row index which points what cell meta object is updated.\n     * @param {number} physicalColumn The physical column index which points what cell meta object is updated.\n     * @param {object} settings An object to merge with.\n     */\n  }, {\n    key: \"updateCellMeta\",\n    value: function updateCellMeta(physicalRow, physicalColumn, settings) {\n      this.cellMeta.updateMeta(physicalRow, physicalColumn, settings);\n    }\n\n    /**\n     * Removes a property defined by the \"key\" argument from the cell meta object.\n     *\n     * @param {number} physicalRow The physical row index.\n     * @param {number} physicalColumn The physical column index.\n     * @param {string} key The property name to remove.\n     */\n  }, {\n    key: \"removeCellMeta\",\n    value: function removeCellMeta(physicalRow, physicalColumn, key) {\n      this.cellMeta.removeMeta(physicalRow, physicalColumn, key);\n    }\n\n    /**\n     * Returns all cell meta objects that were created during the Handsontable operation. As cell meta\n     * objects are created lazy, the length of the returned collection depends on how and when the\n     * table has asked for access to that meta objects.\n     *\n     * @returns {object[]}\n     */\n  }, {\n    key: \"getCellsMeta\",\n    value: function getCellsMeta() {\n      return this.cellMeta.getMetas();\n    }\n\n    /**\n     * Returns all cell meta objects that were created during the Handsontable operation but for\n     * specyfic row index.\n     *\n     * @param {number} physicalRow The physical row index.\n     * @returns {object[]}\n     */\n  }, {\n    key: \"getCellsMetaAtRow\",\n    value: function getCellsMetaAtRow(physicalRow) {\n      return this.cellMeta.getMetasAtRow(physicalRow);\n    }\n\n    /**\n     * Creates one or more rows at specific position.\n     *\n     * @param {number} physicalRow The physical row index which points from what position the row is added.\n     * @param {number} [amount=1] An amount of rows to add.\n     */\n  }, {\n    key: \"createRow\",\n    value: function createRow(physicalRow) {\n      var amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      this.cellMeta.createRow(physicalRow, amount);\n    }\n\n    /**\n     * Removes one or more rows from the collection.\n     *\n     * @param {number} physicalRow The physical row index which points from what position the row is removed.\n     * @param {number} [amount=1] An amount rows to remove.\n     */\n  }, {\n    key: \"removeRow\",\n    value: function removeRow(physicalRow) {\n      var amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      this.cellMeta.removeRow(physicalRow, amount);\n    }\n\n    /**\n     * Creates one or more columns at specific position.\n     *\n     * @param {number} physicalColumn The physical column index which points from what position the column is added.\n     * @param {number} [amount=1] An amount of columns to add.\n     */\n  }, {\n    key: \"createColumn\",\n    value: function createColumn(physicalColumn) {\n      var amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      this.cellMeta.createColumn(physicalColumn, amount);\n      this.columnMeta.createColumn(physicalColumn, amount);\n    }\n\n    /**\n     * Removes one or more columns from the collection.\n     *\n     * @param {number} physicalColumn The physical column index which points from what position the column is removed.\n     * @param {number} [amount=1] An amount of columns to remove.\n     */\n  }, {\n    key: \"removeColumn\",\n    value: function removeColumn(physicalColumn) {\n      var amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      this.cellMeta.removeColumn(physicalColumn, amount);\n      this.columnMeta.removeColumn(physicalColumn, amount);\n    }\n\n    /**\n     * Clears all saved cell meta objects. It keeps column meta, table meta, and global meta intact.\n     */\n  }, {\n    key: \"clearCellsCache\",\n    value: function clearCellsCache() {\n      this.cellMeta.clearCache();\n    }\n\n    /**\n     * Clears all saved cell and columns meta objects.\n     */\n  }, {\n    key: \"clearCache\",\n    value: function clearCache() {\n      this.cellMeta.clearCache();\n      this.columnMeta.clearCache();\n    }\n  }]);\n  return MetaManager;\n}();\nexport { MetaManager as default };\nmixin(MetaManager, localHooks);","map":{"version":3,"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","_toPropertyKey","key","_createClass","protoProps","staticProps","arg","_toPrimitive","String","input","hint","prim","toPrimitive","undefined","res","call","Number","GlobalMeta","TableMeta","ColumnMeta","CellMeta","localHooks","mixin","MetaManager","hot","_this","customSettings","arguments","metaMods","globalMeta","tableMeta","columnMeta","cellMeta","forEach","ModifierClass","updateMeta","value","getGlobalMeta","getMeta","updateGlobalMeta","settings","getTableMeta","updateTableMeta","getColumnMeta","physicalColumn","updateColumnMeta","getCellMeta","physicalRow","_ref","visualRow","visualColumn","visualCol","row","col","runLocalHooks","getCellMetaKeyValue","Error","setCellMeta","setMeta","updateCellMeta","removeCellMeta","removeMeta","getCellsMeta","getMetas","getCellsMetaAtRow","getMetasAtRow","createRow","amount","removeRow","createColumn","removeColumn","clearCellsCache","clearCache","default"],"sources":["/home/rstorey/wwwdev/Blucktool/node_modules/handsontable/dataMap/metaManager/index.mjs"],"sourcesContent":["function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.symbol.to-primitive.js\";\nimport \"core-js/modules/es.date.to-primitive.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport GlobalMeta from \"./metaLayers/globalMeta.mjs\";\nimport TableMeta from \"./metaLayers/tableMeta.mjs\";\nimport ColumnMeta from \"./metaLayers/columnMeta.mjs\";\nimport CellMeta from \"./metaLayers/cellMeta.mjs\";\nimport localHooks from \"../../mixins/localHooks.mjs\";\nimport { mixin } from \"../../helpers/object.mjs\";\n/**\n * With the Meta Manager class, it can be possible to manage with meta objects for different layers in\n * one place. All coordinates used to fetch, updating, removing, or creating rows or columns have to\n * be passed as physical values.\n *\n * The diagram of the meta layers:\n * +-------------+.\n * │ GlobalMeta  │\n * │ (prototype) │\n * +-------------+\\\n *       │         \\\n *       │          \\\n *      \\│/         _\\|\n * +-------------+    +-------------+.\n * │ TableMeta   │    │ ColumnMeta  │\n * │ (instance)  │    │ (prototype) │\n * +-------------+    +-------------+.\n *                         │\n *                         │\n *                        \\│/\n *                    +-------------+.\n *                    │  CellMeta   │\n *                    │ (instance)  │\n *                    +-------------+.\n *\n * A more detailed description of the specific layers can be found in the \"metaLayers/\" modules description.\n */\nvar MetaManager = /*#__PURE__*/function () {\n  function MetaManager(hot) {\n    var _this = this;\n    var customSettings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var metaMods = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    _classCallCheck(this, MetaManager);\n    /**\n     * @type {Handsontable}\n     */\n    this.hot = hot;\n    /**\n     * @type {GlobalMeta}\n     */\n    this.globalMeta = new GlobalMeta(hot);\n    /**\n     * @type {TableMeta}\n     */\n    this.tableMeta = new TableMeta(this.globalMeta);\n    /**\n     * @type {ColumnMeta}\n     */\n    this.columnMeta = new ColumnMeta(this.globalMeta);\n    /**\n     * @type {CellMeta}\n     */\n    this.cellMeta = new CellMeta(this.columnMeta);\n    metaMods.forEach(function (ModifierClass) {\n      return new ModifierClass(_this);\n    });\n    this.globalMeta.updateMeta(customSettings);\n  }\n\n  /**\n   * Gets the global meta object that is a root of all default settings, which are recognizable by Handsontable.\n   * Other layers inherites all properties from this. Adding, removing, or changing property in that\n   * object has a direct reflection to all layers.\n   *\n   * @returns {object}\n   */\n  _createClass(MetaManager, [{\n    key: \"getGlobalMeta\",\n    value: function getGlobalMeta() {\n      return this.globalMeta.getMeta();\n    }\n\n    /**\n     * Updates global settings object by merging settings with the current state.\n     *\n     * @param {object} settings An object to merge with.\n     */\n  }, {\n    key: \"updateGlobalMeta\",\n    value: function updateGlobalMeta(settings) {\n      this.globalMeta.updateMeta(settings);\n    }\n\n    /**\n     * Gets settings object that was passed in the Handsontable constructor. That layer contains all\n     * default settings inherited from the GlobalMeta layer merged with settings passed by the developer.\n     * Adding, removing, or changing property in that object has no direct reflection on any other layers.\n     *\n     * @returns {TableMeta}\n     */\n  }, {\n    key: \"getTableMeta\",\n    value: function getTableMeta() {\n      return this.tableMeta.getMeta();\n    }\n\n    /**\n     * Updates table settings object by merging settings with the current state.\n     *\n     * @param {object} settings An object to merge with.\n     */\n  }, {\n    key: \"updateTableMeta\",\n    value: function updateTableMeta(settings) {\n      this.tableMeta.updateMeta(settings);\n    }\n\n    /**\n     * Gets column meta object that is a root of all settings defined in the column property of the Handsontable\n     * settings. Each column in the Handsontable is associated with a unique meta object which identified by\n     * the physical column index. Adding, removing, or changing property in that object has a direct reflection\n     * only for the CellMeta layer. The reflection will be visible only if the property doesn't exist in the lower\n     * layers (prototype lookup).\n     *\n     * @param {number} physicalColumn The physical column index.\n     * @returns {object}\n     */\n  }, {\n    key: \"getColumnMeta\",\n    value: function getColumnMeta(physicalColumn) {\n      return this.columnMeta.getMeta(physicalColumn);\n    }\n\n    /**\n     * Updates column meta object by merging settings with the current state.\n     *\n     * @param {number} physicalColumn The physical column index which points what column meta object is updated.\n     * @param {object} settings An object to merge with.\n     */\n  }, {\n    key: \"updateColumnMeta\",\n    value: function updateColumnMeta(physicalColumn, settings) {\n      this.columnMeta.updateMeta(physicalColumn, settings);\n    }\n\n    /**\n     * Gets the cell meta object that is a root of all settings defined for the specific cell rendered by\n     * the Handsontable. Each cell meta inherits settings from higher layers. When a property doesn't\n     * exist in that layer, it is looked up through a prototype to the highest layer. Starting\n     * from CellMeta -> ColumnMeta and ending to GlobalMeta, which stores default settings. Adding,\n     * removing, or changing property in that object has no direct reflection on any other layers.\n     *\n     * @param {number} physicalRow The physical row index.\n     * @param {number} physicalColumn The physical column index.\n     * @param {object} options Additional options that are used to extend the cell meta object.\n     * @param {number} options.visualRow The visual row index of the currently requested cell meta object.\n     * @param {number} options.visualColumn The visual column index of the currently requested cell meta object.\n     * @returns {object}\n     */\n  }, {\n    key: \"getCellMeta\",\n    value: function getCellMeta(physicalRow, physicalColumn, _ref) {\n      var visualRow = _ref.visualRow,\n        visualColumn = _ref.visualColumn;\n      var cellMeta = this.cellMeta.getMeta(physicalRow, physicalColumn);\n      cellMeta.visualRow = visualRow;\n      cellMeta.visualCol = visualColumn;\n      cellMeta.row = physicalRow;\n      cellMeta.col = physicalColumn;\n      this.runLocalHooks('afterGetCellMeta', cellMeta);\n      return cellMeta;\n    }\n\n    /**\n     * Gets a value (defined by the `key` property) from the cell meta object.\n     *\n     * @param {number} physicalRow The physical row index.\n     * @param {number} physicalColumn The physical column index.\n     * @param {string} key Defines the value that will be returned from the cell meta object.\n     * @returns {*}\n     */\n  }, {\n    key: \"getCellMetaKeyValue\",\n    value: function getCellMetaKeyValue(physicalRow, physicalColumn, key) {\n      if (typeof key !== 'string') {\n        throw new Error('The passed cell meta object key is not a string');\n      }\n      return this.cellMeta.getMeta(physicalRow, physicalColumn, key);\n    }\n\n    /**\n     * Sets settings object for cell meta object defined by \"key\" property.\n     *\n     * @param {number} physicalRow The physical row index.\n     * @param {number} physicalColumn The physical column index.\n     * @param {string} key The property name to set.\n     * @param {*} value Value to save.\n     */\n  }, {\n    key: \"setCellMeta\",\n    value: function setCellMeta(physicalRow, physicalColumn, key, value) {\n      this.cellMeta.setMeta(physicalRow, physicalColumn, key, value);\n    }\n\n    /**\n     * Updates cell meta object by merging settings with the current state.\n     *\n     * @param {number} physicalRow The physical row index which points what cell meta object is updated.\n     * @param {number} physicalColumn The physical column index which points what cell meta object is updated.\n     * @param {object} settings An object to merge with.\n     */\n  }, {\n    key: \"updateCellMeta\",\n    value: function updateCellMeta(physicalRow, physicalColumn, settings) {\n      this.cellMeta.updateMeta(physicalRow, physicalColumn, settings);\n    }\n\n    /**\n     * Removes a property defined by the \"key\" argument from the cell meta object.\n     *\n     * @param {number} physicalRow The physical row index.\n     * @param {number} physicalColumn The physical column index.\n     * @param {string} key The property name to remove.\n     */\n  }, {\n    key: \"removeCellMeta\",\n    value: function removeCellMeta(physicalRow, physicalColumn, key) {\n      this.cellMeta.removeMeta(physicalRow, physicalColumn, key);\n    }\n\n    /**\n     * Returns all cell meta objects that were created during the Handsontable operation. As cell meta\n     * objects are created lazy, the length of the returned collection depends on how and when the\n     * table has asked for access to that meta objects.\n     *\n     * @returns {object[]}\n     */\n  }, {\n    key: \"getCellsMeta\",\n    value: function getCellsMeta() {\n      return this.cellMeta.getMetas();\n    }\n\n    /**\n     * Returns all cell meta objects that were created during the Handsontable operation but for\n     * specyfic row index.\n     *\n     * @param {number} physicalRow The physical row index.\n     * @returns {object[]}\n     */\n  }, {\n    key: \"getCellsMetaAtRow\",\n    value: function getCellsMetaAtRow(physicalRow) {\n      return this.cellMeta.getMetasAtRow(physicalRow);\n    }\n\n    /**\n     * Creates one or more rows at specific position.\n     *\n     * @param {number} physicalRow The physical row index which points from what position the row is added.\n     * @param {number} [amount=1] An amount of rows to add.\n     */\n  }, {\n    key: \"createRow\",\n    value: function createRow(physicalRow) {\n      var amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      this.cellMeta.createRow(physicalRow, amount);\n    }\n\n    /**\n     * Removes one or more rows from the collection.\n     *\n     * @param {number} physicalRow The physical row index which points from what position the row is removed.\n     * @param {number} [amount=1] An amount rows to remove.\n     */\n  }, {\n    key: \"removeRow\",\n    value: function removeRow(physicalRow) {\n      var amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      this.cellMeta.removeRow(physicalRow, amount);\n    }\n\n    /**\n     * Creates one or more columns at specific position.\n     *\n     * @param {number} physicalColumn The physical column index which points from what position the column is added.\n     * @param {number} [amount=1] An amount of columns to add.\n     */\n  }, {\n    key: \"createColumn\",\n    value: function createColumn(physicalColumn) {\n      var amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      this.cellMeta.createColumn(physicalColumn, amount);\n      this.columnMeta.createColumn(physicalColumn, amount);\n    }\n\n    /**\n     * Removes one or more columns from the collection.\n     *\n     * @param {number} physicalColumn The physical column index which points from what position the column is removed.\n     * @param {number} [amount=1] An amount of columns to remove.\n     */\n  }, {\n    key: \"removeColumn\",\n    value: function removeColumn(physicalColumn) {\n      var amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      this.cellMeta.removeColumn(physicalColumn, amount);\n      this.columnMeta.removeColumn(physicalColumn, amount);\n    }\n\n    /**\n     * Clears all saved cell meta objects. It keeps column meta, table meta, and global meta intact.\n     */\n  }, {\n    key: \"clearCellsCache\",\n    value: function clearCellsCache() {\n      this.cellMeta.clearCache();\n    }\n\n    /**\n     * Clears all saved cell and columns meta objects.\n     */\n  }, {\n    key: \"clearCache\",\n    value: function clearCache() {\n      this.cellMeta.clearCache();\n      this.columnMeta.clearCache();\n    }\n  }]);\n  return MetaManager;\n}();\nexport { MetaManager as default };\nmixin(MetaManager, localHooks);"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}