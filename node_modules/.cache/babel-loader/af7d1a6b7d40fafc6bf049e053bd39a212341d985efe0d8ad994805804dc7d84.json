{"ast":null,"code":"import staticRegister from \"../utils/staticRegister.mjs\";\nimport { registerEditor } from \"../editors/registry.mjs\";\nimport { registerRenderer } from \"../renderers/registry.mjs\";\nimport { registerValidator } from \"../validators/registry.mjs\";\nvar _staticRegister = staticRegister('cellTypes'),\n  register = _staticRegister.register,\n  getItem = _staticRegister.getItem,\n  hasItem = _staticRegister.hasItem,\n  getNames = _staticRegister.getNames,\n  getValues = _staticRegister.getValues;\n\n/**\n * Retrieve cell type object.\n *\n * @param {string} name Cell type identification.\n * @returns {object} Returns cell type object.\n */\nfunction _getItem(name) {\n  if (!hasItem(name)) {\n    throw Error(\"You declared cell type \\\"\".concat(name, \"\\\" as a string that is not mapped to a known object.\\n                 Cell type must be an object or a string mapped to an object registered by\\n                 \\\"Handsontable.cellTypes.registerCellType\\\" method\"));\n  }\n  return getItem(name);\n}\n\n/**\n * Register cell type under specified name.\n *\n * @param {string} name Cell type identification.\n * @param {object} type An object with contains keys (eq: `editor`, `renderer`, `validator`) which describes specified behaviour of the cell.\n */\nfunction _register(name, type) {\n  if (typeof name !== 'string') {\n    type = name;\n    name = type.CELL_TYPE;\n  }\n  var _type = type,\n    editor = _type.editor,\n    renderer = _type.renderer,\n    validator = _type.validator;\n  if (editor) {\n    registerEditor(name, editor);\n  }\n  if (renderer) {\n    registerRenderer(name, renderer);\n  }\n  if (validator) {\n    registerValidator(name, validator);\n  }\n  register(name, type);\n}\nexport { _register as registerCellType, _getItem as getCellType, hasItem as hasCellType, getNames as getRegisteredCellTypeNames, getValues as getRegisteredCellTypes };","map":{"version":3,"names":["staticRegister","registerEditor","registerRenderer","registerValidator","_staticRegister","register","getItem","hasItem","getNames","getValues","_getItem","name","Error","concat","_register","type","CELL_TYPE","_type","editor","renderer","validator","registerCellType","getCellType","hasCellType","getRegisteredCellTypeNames","getRegisteredCellTypes"],"sources":["/home/rstorey/wwwdev/Blucktool/node_modules/handsontable/cellTypes/registry.mjs"],"sourcesContent":["import staticRegister from \"../utils/staticRegister.mjs\";\nimport { registerEditor } from \"../editors/registry.mjs\";\nimport { registerRenderer } from \"../renderers/registry.mjs\";\nimport { registerValidator } from \"../validators/registry.mjs\";\nvar _staticRegister = staticRegister('cellTypes'),\n  register = _staticRegister.register,\n  getItem = _staticRegister.getItem,\n  hasItem = _staticRegister.hasItem,\n  getNames = _staticRegister.getNames,\n  getValues = _staticRegister.getValues;\n\n/**\n * Retrieve cell type object.\n *\n * @param {string} name Cell type identification.\n * @returns {object} Returns cell type object.\n */\nfunction _getItem(name) {\n  if (!hasItem(name)) {\n    throw Error(\"You declared cell type \\\"\".concat(name, \"\\\" as a string that is not mapped to a known object.\\n                 Cell type must be an object or a string mapped to an object registered by\\n                 \\\"Handsontable.cellTypes.registerCellType\\\" method\"));\n  }\n  return getItem(name);\n}\n\n/**\n * Register cell type under specified name.\n *\n * @param {string} name Cell type identification.\n * @param {object} type An object with contains keys (eq: `editor`, `renderer`, `validator`) which describes specified behaviour of the cell.\n */\nfunction _register(name, type) {\n  if (typeof name !== 'string') {\n    type = name;\n    name = type.CELL_TYPE;\n  }\n  var _type = type,\n    editor = _type.editor,\n    renderer = _type.renderer,\n    validator = _type.validator;\n  if (editor) {\n    registerEditor(name, editor);\n  }\n  if (renderer) {\n    registerRenderer(name, renderer);\n  }\n  if (validator) {\n    registerValidator(name, validator);\n  }\n  register(name, type);\n}\nexport { _register as registerCellType, _getItem as getCellType, hasItem as hasCellType, getNames as getRegisteredCellTypeNames, getValues as getRegisteredCellTypes };"],"mappings":"AAAA,OAAOA,cAAc,MAAM,6BAA6B;AACxD,SAASC,cAAc,QAAQ,yBAAyB;AACxD,SAASC,gBAAgB,QAAQ,2BAA2B;AAC5D,SAASC,iBAAiB,QAAQ,4BAA4B;AAC9D,IAAIC,eAAe,GAAGJ,cAAc,CAAC,WAAW,CAAC;EAC/CK,QAAQ,GAAGD,eAAe,CAACC,QAAQ;EACnCC,OAAO,GAAGF,eAAe,CAACE,OAAO;EACjCC,OAAO,GAAGH,eAAe,CAACG,OAAO;EACjCC,QAAQ,GAAGJ,eAAe,CAACI,QAAQ;EACnCC,SAAS,GAAGL,eAAe,CAACK,SAAS;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,QAAQA,CAACC,IAAI,EAAE;EACtB,IAAI,CAACJ,OAAO,CAACI,IAAI,CAAC,EAAE;IAClB,MAAMC,KAAK,CAAC,2BAA2B,CAACC,MAAM,CAACF,IAAI,EAAE,uNAAuN,CAAC,CAAC;EAChR;EACA,OAAOL,OAAO,CAACK,IAAI,CAAC;AACtB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,SAASA,CAACH,IAAI,EAAEI,IAAI,EAAE;EAC7B,IAAI,OAAOJ,IAAI,KAAK,QAAQ,EAAE;IAC5BI,IAAI,GAAGJ,IAAI;IACXA,IAAI,GAAGI,IAAI,CAACC,SAAS;EACvB;EACA,IAAIC,KAAK,GAAGF,IAAI;IACdG,MAAM,GAAGD,KAAK,CAACC,MAAM;IACrBC,QAAQ,GAAGF,KAAK,CAACE,QAAQ;IACzBC,SAAS,GAAGH,KAAK,CAACG,SAAS;EAC7B,IAAIF,MAAM,EAAE;IACVjB,cAAc,CAACU,IAAI,EAAEO,MAAM,CAAC;EAC9B;EACA,IAAIC,QAAQ,EAAE;IACZjB,gBAAgB,CAACS,IAAI,EAAEQ,QAAQ,CAAC;EAClC;EACA,IAAIC,SAAS,EAAE;IACbjB,iBAAiB,CAACQ,IAAI,EAAES,SAAS,CAAC;EACpC;EACAf,QAAQ,CAACM,IAAI,EAAEI,IAAI,CAAC;AACtB;AACA,SAASD,SAAS,IAAIO,gBAAgB,EAAEX,QAAQ,IAAIY,WAAW,EAAEf,OAAO,IAAIgB,WAAW,EAAEf,QAAQ,IAAIgB,0BAA0B,EAAEf,SAAS,IAAIgB,sBAAsB"},"metadata":{},"sourceType":"module","externalDependencies":[]}