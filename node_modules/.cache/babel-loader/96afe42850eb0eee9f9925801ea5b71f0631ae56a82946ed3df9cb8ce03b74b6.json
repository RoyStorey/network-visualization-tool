{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (null != _i) {\n    var _s,\n      _e,\n      _x,\n      _r,\n      _arr = [],\n      _n = !0,\n      _d = !1;\n    try {\n      if (_x = (_i = _i.call(arr)).next, 0 === i) {\n        if (Object(_i) !== _i) return;\n        _n = !1;\n      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);\n    } catch (err) {\n      _d = !0, _e = err;\n    } finally {\n      try {\n        if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return;\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) {\n  _checkPrivateRedeclaration(obj, privateMap);\n  privateMap.set(obj, value);\n}\nfunction _checkPrivateRedeclaration(obj, privateCollection) {\n  if (privateCollection.has(obj)) {\n    throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n  }\n}\nfunction _classPrivateFieldGet(receiver, privateMap) {\n  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\");\n  return _classApplyDescriptorGet(receiver, descriptor);\n}\nfunction _classApplyDescriptorGet(receiver, descriptor) {\n  if (descriptor.get) {\n    return descriptor.get.call(receiver);\n  }\n  return descriptor.value;\n}\nfunction _classPrivateFieldSet(receiver, privateMap, value) {\n  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\");\n  _classApplyDescriptorSet(receiver, descriptor, value);\n  return value;\n}\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to \" + action + \" private field on non-instance\");\n  }\n  return privateMap.get(receiver);\n}\nfunction _classApplyDescriptorSet(receiver, descriptor, value) {\n  if (descriptor.set) {\n    descriptor.set.call(receiver, value);\n  } else {\n    if (!descriptor.writable) {\n      throw new TypeError(\"attempted to set read only private field\");\n    }\n    descriptor.value = value;\n  }\n}\nimport { arrayEach } from \"../../../helpers/array.mjs\";\nimport TreeNode from \"../../../utils/dataStructures/tree.mjs\";\n/* eslint-disable jsdoc/require-description-complete-sentence */\n/**\n * @private\n * @class HeadersTree\n *\n * The header tree class keeps nested header settings in the tree\n * structure for easier node manipulation (e.q collapse or expand column).\n * That trees represent the current state of the nested headers. From the\n * trees, the matrix is generated for nested header renderers.\n *\n * The second role of the module is validation. While building the tree,\n * there is check whether the configuration contains overlapping\n * headers. If true, then the exception is thrown.\n *\n * The tree is static; it means that its column indexing never changes\n * even when a collapsing header is performed. The structure is based\n * on visual column indexes.\n *\n * For example, for that header configuration:\n *   +----+----+----+----+----+\n *   │ A1                │ A2 │\n *   +----+----+----+----+----+\n *   │ B1           │ B2 │ B3 │\n *   +----+----+----+----+----+\n *   │ C1      │ C2 │ C3 │ C4 │\n *   +----+----+----+----+----+\n *\n * The tree structures look like:\n *                (0)                      (4)           // a visual column index\n *                 │                        │\n *        .------(A1)------.              (A2)--.\n *   .--(B1)--.           (B2)--.              (B3)--.\n *  (C1)     (C2)              (C3)                 (C4)\n *\n */\n/* eslint-enable jsdoc/require-description-complete-sentence */\nvar _rootNodes = /*#__PURE__*/new WeakMap();\nvar _rootsIndex = /*#__PURE__*/new WeakMap();\nvar _sourceSettings = /*#__PURE__*/new WeakMap();\nvar HeadersTree = /*#__PURE__*/function () {\n  /**\n   * The collection of nested headers settings structured into trees. The root trees are stored\n   * under the visual column index.\n   *\n   * @private\n   * @type {Map<number, TreeNode>}\n   */\n\n  /**\n   * A map that translates the visual column indexes that intersect the range\n   * defined by the header colspan width to the root index.\n   *\n   * @private\n   * @type {Map<number, number>}\n   */\n\n  /**\n   * The instance of the SourceSettings class.\n   *\n   * @private\n   * @type {SourceSettings}\n   */\n\n  function HeadersTree(sourceSettings) {\n    _classCallCheck(this, HeadersTree);\n    _classPrivateFieldInitSpec(this, _rootNodes, {\n      writable: true,\n      value: new Map()\n    });\n    _classPrivateFieldInitSpec(this, _rootsIndex, {\n      writable: true,\n      value: new Map()\n    });\n    _classPrivateFieldInitSpec(this, _sourceSettings, {\n      writable: true,\n      value: null\n    });\n    _classPrivateFieldSet(this, _sourceSettings, sourceSettings);\n  }\n\n  /**\n   * Gets an array of the all root nodes.\n   *\n   * @returns {TreeNode[]}\n   */\n  _createClass(HeadersTree, [{\n    key: \"getRoots\",\n    value: function getRoots() {\n      return Array.from(_classPrivateFieldGet(this, _rootNodes).values());\n    }\n\n    /**\n     * Gets a root node by specified visual column index.\n     *\n     * @param {number} columnIndex A visual column index.\n     * @returns {TreeNode|undefined}\n     */\n  }, {\n    key: \"getRootByColumn\",\n    value: function getRootByColumn(columnIndex) {\n      var node;\n      if (_classPrivateFieldGet(this, _rootsIndex).has(columnIndex)) {\n        node = _classPrivateFieldGet(this, _rootNodes).get(_classPrivateFieldGet(this, _rootsIndex).get(columnIndex));\n      }\n      return node;\n    }\n\n    /**\n     * Gets a tree node by its position in the grid settings.\n     *\n     * @param {number} headerLevel Header level index (there is support only for positive values).\n     * @param {number} columnIndex A visual column index.\n     * @returns {TreeNode|undefined}\n     */\n  }, {\n    key: \"getNode\",\n    value: function getNode(headerLevel, columnIndex) {\n      var rootNode = this.getRootByColumn(columnIndex);\n      if (!rootNode) {\n        return;\n      }\n\n      // Normalize the visual column index to a 0-based system for a specific \"box\" defined\n      // by root node colspan width.\n      var normColumnIndex = columnIndex - _classPrivateFieldGet(this, _rootsIndex).get(columnIndex);\n      var columnCursor = 0;\n      var treeNode;\n\n      // Collect all parent nodes that depend on the collapsed node.\n      rootNode.walkDown(function (node) {\n        var _node$data = node.data,\n          origColspan = _node$data.origColspan,\n          nodeHeaderLevel = _node$data.headerLevel;\n        if (headerLevel === nodeHeaderLevel) {\n          if (normColumnIndex >= columnCursor && normColumnIndex <= columnCursor + origColspan - 1) {\n            treeNode = node;\n            treeNode.data.isRoot = columnIndex === treeNode.data.columnIndex;\n            return false; // Cancel tree traversing.\n          }\n\n          columnCursor += origColspan;\n        }\n      });\n      return treeNode;\n    }\n\n    /**\n     * Builds (or rebuilds if called again) root nodes indexes.\n     */\n  }, {\n    key: \"rebuildTreeIndex\",\n    value: function rebuildTreeIndex() {\n      var _this = this;\n      var columnIndex = 0;\n      _classPrivateFieldGet(this, _rootsIndex).clear();\n      arrayEach(_classPrivateFieldGet(this, _rootNodes), function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n          colspan = _ref2[1].data.colspan;\n        // Map tree range (colspan range/width) into visual column index of the root node.\n        for (var i = columnIndex; i < columnIndex + colspan; i++) {\n          _classPrivateFieldGet(_this, _rootsIndex).set(i, columnIndex);\n        }\n        columnIndex += colspan;\n      });\n    }\n\n    /**\n     * Builds trees based on SourceSettings class. Calling a method causes clearing the tree state built\n     * from the previous call.\n     */\n  }, {\n    key: \"buildTree\",\n    value: function buildTree() {\n      this.clear();\n      var columnsCount = _classPrivateFieldGet(this, _sourceSettings).getColumnsCount();\n      var columnIndex = 0;\n      while (columnIndex < columnsCount) {\n        var columnSettings = _classPrivateFieldGet(this, _sourceSettings).getHeaderSettings(0, columnIndex);\n        var rootNode = new TreeNode();\n        _classPrivateFieldGet(this, _rootNodes).set(columnIndex, rootNode);\n        this.buildLeaves(rootNode, columnIndex, 0, columnSettings.origColspan);\n        columnIndex += columnSettings.origColspan;\n      }\n      this.rebuildTreeIndex();\n    }\n\n    /**\n     * Builds leaves for specified tree node.\n     *\n     * @param {TreeNode} parentNode A node to which the leaves applies.\n     * @param {number} columnIndex A visual column index.\n     * @param {number} headerLevel Currently processed header level.\n     * @param {number} [extractionLength=1] Determines column extraction length for node children.\n     */\n  }, {\n    key: \"buildLeaves\",\n    value: function buildLeaves(parentNode, columnIndex, headerLevel) {\n      var _this2 = this;\n      var extractionLength = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n      var columnsSettings = _classPrivateFieldGet(this, _sourceSettings).getHeadersSettings(headerLevel, columnIndex, extractionLength);\n      headerLevel += 1;\n      arrayEach(columnsSettings, function (columnSettings) {\n        var nodeData = _objectSpread(_objectSpread({}, columnSettings), {}, {\n          /**\n           * The header level (tree node depth level).\n           *\n           * @type {number}\n           */\n          headerLevel: headerLevel - 1,\n          /**\n           * A visual column index.\n           *\n           * @type {number}\n           */\n          columnIndex: columnIndex\n        });\n        var node;\n        if (headerLevel === 1) {\n          // fill the root node\n          parentNode.data = nodeData;\n          node = parentNode;\n        } else {\n          node = new TreeNode(nodeData);\n          parentNode.addChild(node);\n        }\n        if (headerLevel < _classPrivateFieldGet(_this2, _sourceSettings).getLayersCount()) {\n          _this2.buildLeaves(node, columnIndex, headerLevel, columnSettings.origColspan);\n        }\n        columnIndex += columnSettings.origColspan;\n      });\n    }\n\n    /**\n     * Clears the tree to the initial state.\n     */\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      _classPrivateFieldGet(this, _rootNodes).clear();\n      _classPrivateFieldGet(this, _rootsIndex).clear();\n    }\n  }]);\n  return HeadersTree;\n}();\nexport { HeadersTree as default };","map":{"version":3,"names":["_typeof","obj","Symbol","iterator","constructor","prototype","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","value","_toPropertyKey","configurable","writable","_slicedToArray","arr","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","o","minLen","_arrayLikeToArray","n","toString","call","slice","name","Array","from","test","len","arr2","_i","_s","_e","_x","_r","_arr","_n","_d","next","done","err","return","isArray","_classCallCheck","instance","Constructor","_defineProperties","props","descriptor","_createClass","protoProps","staticProps","arg","_toPrimitive","String","input","hint","prim","toPrimitive","undefined","res","Number","_classPrivateFieldInitSpec","privateMap","_checkPrivateRedeclaration","set","privateCollection","has","_classPrivateFieldGet","receiver","_classExtractFieldDescriptor","_classApplyDescriptorGet","get","_classPrivateFieldSet","_classApplyDescriptorSet","action","arrayEach","TreeNode","_rootNodes","WeakMap","_rootsIndex","_sourceSettings","HeadersTree","sourceSettings","Map","getRoots","values","getRootByColumn","columnIndex","node","getNode","headerLevel","rootNode","normColumnIndex","columnCursor","treeNode","walkDown","_node$data","data","origColspan","nodeHeaderLevel","isRoot","rebuildTreeIndex","_this","clear","_ref","_ref2","colspan","buildTree","columnsCount","getColumnsCount","columnSettings","getHeaderSettings","buildLeaves","parentNode","_this2","extractionLength","columnsSettings","getHeadersSettings","nodeData","addChild","getLayersCount","default"],"sources":["/home/rstorey/wwwdev/Blucktool/node_modules/handsontable/plugins/nestedHeaders/stateManager/headersTree.mjs"],"sourcesContent":["function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.weak-map.js\";\nimport \"core-js/modules/es.symbol.to-primitive.js\";\nimport \"core-js/modules/es.date.to-primitive.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\nimport { arrayEach } from \"../../../helpers/array.mjs\";\nimport TreeNode from \"../../../utils/dataStructures/tree.mjs\";\n/* eslint-disable jsdoc/require-description-complete-sentence */\n/**\n * @private\n * @class HeadersTree\n *\n * The header tree class keeps nested header settings in the tree\n * structure for easier node manipulation (e.q collapse or expand column).\n * That trees represent the current state of the nested headers. From the\n * trees, the matrix is generated for nested header renderers.\n *\n * The second role of the module is validation. While building the tree,\n * there is check whether the configuration contains overlapping\n * headers. If true, then the exception is thrown.\n *\n * The tree is static; it means that its column indexing never changes\n * even when a collapsing header is performed. The structure is based\n * on visual column indexes.\n *\n * For example, for that header configuration:\n *   +----+----+----+----+----+\n *   │ A1                │ A2 │\n *   +----+----+----+----+----+\n *   │ B1           │ B2 │ B3 │\n *   +----+----+----+----+----+\n *   │ C1      │ C2 │ C3 │ C4 │\n *   +----+----+----+----+----+\n *\n * The tree structures look like:\n *                (0)                      (4)           // a visual column index\n *                 │                        │\n *        .------(A1)------.              (A2)--.\n *   .--(B1)--.           (B2)--.              (B3)--.\n *  (C1)     (C2)              (C3)                 (C4)\n *\n */\n/* eslint-enable jsdoc/require-description-complete-sentence */\nvar _rootNodes = /*#__PURE__*/new WeakMap();\nvar _rootsIndex = /*#__PURE__*/new WeakMap();\nvar _sourceSettings = /*#__PURE__*/new WeakMap();\nvar HeadersTree = /*#__PURE__*/function () {\n  /**\n   * The collection of nested headers settings structured into trees. The root trees are stored\n   * under the visual column index.\n   *\n   * @private\n   * @type {Map<number, TreeNode>}\n   */\n\n  /**\n   * A map that translates the visual column indexes that intersect the range\n   * defined by the header colspan width to the root index.\n   *\n   * @private\n   * @type {Map<number, number>}\n   */\n\n  /**\n   * The instance of the SourceSettings class.\n   *\n   * @private\n   * @type {SourceSettings}\n   */\n\n  function HeadersTree(sourceSettings) {\n    _classCallCheck(this, HeadersTree);\n    _classPrivateFieldInitSpec(this, _rootNodes, {\n      writable: true,\n      value: new Map()\n    });\n    _classPrivateFieldInitSpec(this, _rootsIndex, {\n      writable: true,\n      value: new Map()\n    });\n    _classPrivateFieldInitSpec(this, _sourceSettings, {\n      writable: true,\n      value: null\n    });\n    _classPrivateFieldSet(this, _sourceSettings, sourceSettings);\n  }\n\n  /**\n   * Gets an array of the all root nodes.\n   *\n   * @returns {TreeNode[]}\n   */\n  _createClass(HeadersTree, [{\n    key: \"getRoots\",\n    value: function getRoots() {\n      return Array.from(_classPrivateFieldGet(this, _rootNodes).values());\n    }\n\n    /**\n     * Gets a root node by specified visual column index.\n     *\n     * @param {number} columnIndex A visual column index.\n     * @returns {TreeNode|undefined}\n     */\n  }, {\n    key: \"getRootByColumn\",\n    value: function getRootByColumn(columnIndex) {\n      var node;\n      if (_classPrivateFieldGet(this, _rootsIndex).has(columnIndex)) {\n        node = _classPrivateFieldGet(this, _rootNodes).get(_classPrivateFieldGet(this, _rootsIndex).get(columnIndex));\n      }\n      return node;\n    }\n\n    /**\n     * Gets a tree node by its position in the grid settings.\n     *\n     * @param {number} headerLevel Header level index (there is support only for positive values).\n     * @param {number} columnIndex A visual column index.\n     * @returns {TreeNode|undefined}\n     */\n  }, {\n    key: \"getNode\",\n    value: function getNode(headerLevel, columnIndex) {\n      var rootNode = this.getRootByColumn(columnIndex);\n      if (!rootNode) {\n        return;\n      }\n\n      // Normalize the visual column index to a 0-based system for a specific \"box\" defined\n      // by root node colspan width.\n      var normColumnIndex = columnIndex - _classPrivateFieldGet(this, _rootsIndex).get(columnIndex);\n      var columnCursor = 0;\n      var treeNode;\n\n      // Collect all parent nodes that depend on the collapsed node.\n      rootNode.walkDown(function (node) {\n        var _node$data = node.data,\n          origColspan = _node$data.origColspan,\n          nodeHeaderLevel = _node$data.headerLevel;\n        if (headerLevel === nodeHeaderLevel) {\n          if (normColumnIndex >= columnCursor && normColumnIndex <= columnCursor + origColspan - 1) {\n            treeNode = node;\n            treeNode.data.isRoot = columnIndex === treeNode.data.columnIndex;\n            return false; // Cancel tree traversing.\n          }\n\n          columnCursor += origColspan;\n        }\n      });\n      return treeNode;\n    }\n\n    /**\n     * Builds (or rebuilds if called again) root nodes indexes.\n     */\n  }, {\n    key: \"rebuildTreeIndex\",\n    value: function rebuildTreeIndex() {\n      var _this = this;\n      var columnIndex = 0;\n      _classPrivateFieldGet(this, _rootsIndex).clear();\n      arrayEach(_classPrivateFieldGet(this, _rootNodes), function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n          colspan = _ref2[1].data.colspan;\n        // Map tree range (colspan range/width) into visual column index of the root node.\n        for (var i = columnIndex; i < columnIndex + colspan; i++) {\n          _classPrivateFieldGet(_this, _rootsIndex).set(i, columnIndex);\n        }\n        columnIndex += colspan;\n      });\n    }\n\n    /**\n     * Builds trees based on SourceSettings class. Calling a method causes clearing the tree state built\n     * from the previous call.\n     */\n  }, {\n    key: \"buildTree\",\n    value: function buildTree() {\n      this.clear();\n      var columnsCount = _classPrivateFieldGet(this, _sourceSettings).getColumnsCount();\n      var columnIndex = 0;\n      while (columnIndex < columnsCount) {\n        var columnSettings = _classPrivateFieldGet(this, _sourceSettings).getHeaderSettings(0, columnIndex);\n        var rootNode = new TreeNode();\n        _classPrivateFieldGet(this, _rootNodes).set(columnIndex, rootNode);\n        this.buildLeaves(rootNode, columnIndex, 0, columnSettings.origColspan);\n        columnIndex += columnSettings.origColspan;\n      }\n      this.rebuildTreeIndex();\n    }\n\n    /**\n     * Builds leaves for specified tree node.\n     *\n     * @param {TreeNode} parentNode A node to which the leaves applies.\n     * @param {number} columnIndex A visual column index.\n     * @param {number} headerLevel Currently processed header level.\n     * @param {number} [extractionLength=1] Determines column extraction length for node children.\n     */\n  }, {\n    key: \"buildLeaves\",\n    value: function buildLeaves(parentNode, columnIndex, headerLevel) {\n      var _this2 = this;\n      var extractionLength = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n      var columnsSettings = _classPrivateFieldGet(this, _sourceSettings).getHeadersSettings(headerLevel, columnIndex, extractionLength);\n      headerLevel += 1;\n      arrayEach(columnsSettings, function (columnSettings) {\n        var nodeData = _objectSpread(_objectSpread({}, columnSettings), {}, {\n          /**\n           * The header level (tree node depth level).\n           *\n           * @type {number}\n           */\n          headerLevel: headerLevel - 1,\n          /**\n           * A visual column index.\n           *\n           * @type {number}\n           */\n          columnIndex: columnIndex\n        });\n        var node;\n        if (headerLevel === 1) {\n          // fill the root node\n          parentNode.data = nodeData;\n          node = parentNode;\n        } else {\n          node = new TreeNode(nodeData);\n          parentNode.addChild(node);\n        }\n        if (headerLevel < _classPrivateFieldGet(_this2, _sourceSettings).getLayersCount()) {\n          _this2.buildLeaves(node, columnIndex, headerLevel, columnSettings.origColspan);\n        }\n        columnIndex += columnSettings.origColspan;\n      });\n    }\n\n    /**\n     * Clears the tree to the initial state.\n     */\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      _classPrivateFieldGet(this, _rootNodes).clear();\n      _classPrivateFieldGet(this, _rootsIndex).clear();\n    }\n  }]);\n  return HeadersTree;\n}();\nexport { HeadersTree as default };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}