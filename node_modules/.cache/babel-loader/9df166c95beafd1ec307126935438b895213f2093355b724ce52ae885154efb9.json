{"ast":null,"code":"import { baseRenderer } from \"../baseRenderer/index.mjs\";\nimport EventManager from \"../../eventManager.mjs\";\nimport { empty, addClass } from \"../../helpers/dom/element.mjs\";\nimport { isEmpty, stringify } from \"../../helpers/mixed.mjs\";\nimport { SHORTCUTS_GROUP_EDITOR } from \"../../editorManager.mjs\";\nimport Hooks from \"../../pluginHooks.mjs\";\nvar isListeningKeyDownEvent = new WeakMap();\nvar isCheckboxListenerAdded = new WeakMap();\nvar BAD_VALUE_CLASS = 'htBadValue';\nvar ATTR_ROW = 'data-row';\nvar ATTR_COLUMN = 'data-col';\nvar SHORTCUTS_GROUP = 'checkboxRenderer';\nexport var RENDERER_TYPE = 'checkbox';\nHooks.getSingleton().add('modifyAutoColumnSizeSeed', function (bundleSeed, cellMeta, cellValue) {\n  var label = cellMeta.label,\n    type = cellMeta.type,\n    row = cellMeta.row,\n    column = cellMeta.column,\n    prop = cellMeta.prop;\n  if (type !== RENDERER_TYPE) {\n    return;\n  }\n  if (label) {\n    var labelValue = label.value,\n      labelProperty = label.property;\n    var labelText = cellValue;\n    if (labelValue) {\n      labelText = typeof labelValue === 'function' ? labelValue(row, column, prop, cellValue) : labelValue;\n    } else if (labelProperty) {\n      var labelData = this.getDataAtRowProp(row, labelProperty);\n      labelText = labelData !== null ? labelData : cellValue;\n    }\n    bundleSeed = labelText;\n  }\n  return bundleSeed;\n});\n/**\n * Checkbox renderer.\n *\n * @private\n * @param {Core} instance The Handsontable instance.\n * @param {HTMLTableCellElement} TD The rendered cell element.\n * @param {number} row The visual row index.\n * @param {number} col The visual column index.\n * @param {number|string} prop The column property (passed when datasource is an array of objects).\n * @param {*} value The rendered value.\n * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).\n */\nexport function checkboxRenderer(instance, TD, row, col, prop, value, cellProperties) {\n  var rootDocument = instance.rootDocument;\n  baseRenderer.apply(this, [instance, TD, row, col, prop, value, cellProperties]);\n  registerEvents(instance);\n  var input = createInput(rootDocument);\n  var labelOptions = cellProperties.label;\n  var badValue = false;\n  if (typeof cellProperties.checkedTemplate === 'undefined') {\n    cellProperties.checkedTemplate = true;\n  }\n  if (typeof cellProperties.uncheckedTemplate === 'undefined') {\n    cellProperties.uncheckedTemplate = false;\n  }\n  empty(TD); // TODO identify under what circumstances this line can be removed\n\n  if (value === cellProperties.checkedTemplate || stringify(value).toLocaleLowerCase(cellProperties.locale) === stringify(cellProperties.checkedTemplate).toLocaleLowerCase(cellProperties.locale)) {\n    input.checked = true;\n  } else if (value === cellProperties.uncheckedTemplate || stringify(value).toLocaleLowerCase(cellProperties.locale) === stringify(cellProperties.uncheckedTemplate).toLocaleLowerCase(cellProperties.locale)) {\n    input.checked = false;\n  } else if (isEmpty(value)) {\n    // default value\n    addClass(input, 'noValue');\n  } else {\n    input.style.display = 'none';\n    addClass(input, BAD_VALUE_CLASS);\n    badValue = true;\n  }\n  input.setAttribute(ATTR_ROW, row);\n  input.setAttribute(ATTR_COLUMN, col);\n  if (!badValue && labelOptions) {\n    var labelText = '';\n    if (labelOptions.value) {\n      labelText = typeof labelOptions.value === 'function' ? labelOptions.value.call(this, row, col, prop, value) : labelOptions.value;\n    } else if (labelOptions.property) {\n      var labelValue = instance.getDataAtRowProp(row, labelOptions.property);\n      labelText = labelValue !== null ? labelValue : '';\n    }\n    var label = createLabel(rootDocument, labelText, labelOptions.separated !== true);\n    if (labelOptions.position === 'before') {\n      if (labelOptions.separated) {\n        TD.appendChild(label);\n        TD.appendChild(input);\n      } else {\n        label.appendChild(input);\n        input = label;\n      }\n    } else if (!labelOptions.position || labelOptions.position === 'after') {\n      if (labelOptions.separated) {\n        TD.appendChild(input);\n        TD.appendChild(label);\n      } else {\n        label.insertBefore(input, label.firstChild);\n        input = label;\n      }\n    }\n  }\n  if (!labelOptions || labelOptions && !labelOptions.separated) {\n    TD.appendChild(input);\n  }\n  if (badValue) {\n    TD.appendChild(rootDocument.createTextNode('#bad-value#'));\n  }\n  if (!isListeningKeyDownEvent.has(instance)) {\n    isListeningKeyDownEvent.set(instance, true);\n    registerShortcuts();\n  }\n\n  /**\n   * Register shortcuts responsible for toggling checkbox state.\n   *\n   * @private\n   */\n  function registerShortcuts() {\n    var shortcutManager = instance.getShortcutManager();\n    var gridContext = shortcutManager.getContext('grid');\n    var config = {\n      group: SHORTCUTS_GROUP\n    };\n    gridContext.addShortcuts([{\n      keys: [['space']],\n      callback: function callback() {\n        changeSelectedCheckboxesState();\n        return !areSelectedCheckboxCells(); // False blocks next action associated with the keyboard shortcut.\n      }\n    }, {\n      keys: [['enter']],\n      callback: function callback() {\n        changeSelectedCheckboxesState();\n        return !areSelectedCheckboxCells(); // False blocks next action associated with the keyboard shortcut.\n      },\n\n      runOnlyIf: function runOnlyIf() {\n        return instance.getSettings().enterBeginsEditing;\n      }\n    }, {\n      keys: [['delete'], ['backspace']],\n      callback: function callback() {\n        changeSelectedCheckboxesState(true);\n        return !areSelectedCheckboxCells(); // False blocks next action associated with the keyboard shortcut.\n      },\n\n      relativeToGroup: SHORTCUTS_GROUP_EDITOR,\n      position: 'before'\n    }], config);\n  }\n\n  /**\n   * Change checkbox checked property.\n   *\n   * @private\n   * @param {boolean} [uncheckCheckbox=false] The new \"checked\" state for the checkbox elements.\n   */\n  function changeSelectedCheckboxesState() {\n    var uncheckCheckbox = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var selRange = instance.getSelectedRange();\n    if (!selRange) {\n      return;\n    }\n    for (var key = 0; key < selRange.length; key++) {\n      var _selRange$key$getTopS = selRange[key].getTopStartCorner(),\n        startRow = _selRange$key$getTopS.row,\n        startColumn = _selRange$key$getTopS.col;\n      var _selRange$key$getBott = selRange[key].getBottomEndCorner(),\n        endRow = _selRange$key$getBott.row,\n        endColumn = _selRange$key$getBott.col;\n      var changes = [];\n      for (var visualRow = startRow; visualRow <= endRow; visualRow += 1) {\n        for (var visualColumn = startColumn; visualColumn <= endColumn; visualColumn += 1) {\n          var cachedCellProperties = instance.getCellMeta(visualRow, visualColumn);\n          if (cachedCellProperties.type !== 'checkbox') {\n            return;\n          }\n\n          /* eslint-disable no-continue */\n          if (cachedCellProperties.readOnly === true) {\n            continue;\n          }\n          if (typeof cachedCellProperties.checkedTemplate === 'undefined') {\n            cachedCellProperties.checkedTemplate = true;\n          }\n          if (typeof cachedCellProperties.uncheckedTemplate === 'undefined') {\n            cachedCellProperties.uncheckedTemplate = false;\n          }\n          var dataAtCell = instance.getDataAtCell(visualRow, visualColumn);\n          if (uncheckCheckbox === false) {\n            if ([cachedCellProperties.checkedTemplate, cachedCellProperties.checkedTemplate.toString()].includes(dataAtCell)) {\n              // eslint-disable-line max-len\n              changes.push([visualRow, visualColumn, cachedCellProperties.uncheckedTemplate]);\n            } else if ([cachedCellProperties.uncheckedTemplate, cachedCellProperties.uncheckedTemplate.toString(), null, void 0].includes(dataAtCell)) {\n              // eslint-disable-line max-len\n              changes.push([visualRow, visualColumn, cachedCellProperties.checkedTemplate]);\n            }\n          } else {\n            changes.push([visualRow, visualColumn, cachedCellProperties.uncheckedTemplate]);\n          }\n        }\n      }\n      if (changes.length > 0) {\n        instance.setDataAtCell(changes);\n      }\n    }\n  }\n\n  /**\n   * Check whether all selected cells are with checkbox type.\n   *\n   * @returns {boolean}\n   * @private\n   */\n  function areSelectedCheckboxCells() {\n    var selRange = instance.getSelectedRange();\n    if (!selRange) {\n      return;\n    }\n    for (var key = 0; key < selRange.length; key++) {\n      var topLeft = selRange[key].getTopStartCorner();\n      var bottomRight = selRange[key].getBottomEndCorner();\n      for (var visualRow = topLeft.row; visualRow <= bottomRight.row; visualRow++) {\n        for (var visualColumn = topLeft.col; visualColumn <= bottomRight.col; visualColumn++) {\n          var cachedCellProperties = instance.getCellMeta(visualRow, visualColumn);\n          if (cachedCellProperties.type !== 'checkbox') {\n            return false;\n          }\n          var cell = instance.getCell(visualRow, visualColumn);\n          if (cell === null || cell === void 0) {\n            return true;\n          } else {\n            var checkboxes = cell.querySelectorAll('input[type=checkbox]');\n            if (checkboxes.length > 0 && !cachedCellProperties.readOnly) {\n              return true;\n            }\n          }\n        }\n      }\n    }\n    return false;\n  }\n}\ncheckboxRenderer.RENDERER_TYPE = RENDERER_TYPE;\n\n/**\n * Register checkbox listeners.\n *\n * @param {Core} instance The Handsontable instance.\n * @returns {EventManager}\n */\nfunction registerEvents(instance) {\n  var eventManager = isCheckboxListenerAdded.get(instance);\n  if (!eventManager) {\n    var rootElement = instance.rootElement;\n    eventManager = new EventManager(instance);\n    eventManager.addEventListener(rootElement, 'click', function (event) {\n      return onClick(event, instance);\n    });\n    eventManager.addEventListener(rootElement, 'mouseup', function (event) {\n      return onMouseUp(event, instance);\n    });\n    eventManager.addEventListener(rootElement, 'change', function (event) {\n      return onChange(event, instance);\n    });\n    isCheckboxListenerAdded.set(instance, eventManager);\n  }\n  return eventManager;\n}\n\n/**\n * Create input element.\n *\n * @param {Document} rootDocument The document owner.\n * @returns {Node}\n */\nfunction createInput(rootDocument) {\n  var input = rootDocument.createElement('input');\n  input.className = 'htCheckboxRendererInput';\n  input.type = 'checkbox';\n  input.setAttribute('autocomplete', 'off');\n  input.setAttribute('tabindex', '-1');\n  return input.cloneNode(false);\n}\n\n/**\n * Create label element.\n *\n * @param {Document} rootDocument The document owner.\n * @param {string} text The label text.\n * @param {boolean} fullWidth Determines whether label should have full width.\n * @returns {Node}\n */\nfunction createLabel(rootDocument, text, fullWidth) {\n  var label = rootDocument.createElement('label');\n  label.className = \"htCheckboxRendererLabel \".concat(fullWidth ? 'fullWidth' : '');\n  label.appendChild(rootDocument.createTextNode(text));\n  return label.cloneNode(true);\n}\n\n/**\n * `mouseup` callback.\n *\n * @private\n * @param {Event} event `mouseup` event.\n * @param {Core} instance The Handsontable instance.\n */\nfunction onMouseUp(event, instance) {\n  var target = event.target;\n  if (!isCheckboxInput(target)) {\n    return;\n  }\n  if (!target.hasAttribute(ATTR_ROW) || !target.hasAttribute(ATTR_COLUMN)) {\n    return;\n  }\n  setTimeout(instance.listen, 10);\n}\n\n/**\n * `click` callback.\n *\n * @private\n * @param {MouseEvent} event `click` event.\n * @param {Core} instance The Handsontable instance.\n */\nfunction onClick(event, instance) {\n  var target = event.target;\n  if (!isCheckboxInput(target)) {\n    return;\n  }\n  if (!target.hasAttribute(ATTR_ROW) || !target.hasAttribute(ATTR_COLUMN)) {\n    return;\n  }\n  var row = parseInt(target.getAttribute(ATTR_ROW), 10);\n  var col = parseInt(target.getAttribute(ATTR_COLUMN), 10);\n  var cellProperties = instance.getCellMeta(row, col);\n  if (cellProperties.readOnly) {\n    event.preventDefault();\n  }\n}\n\n/**\n * `change` callback.\n *\n * @param {Event} event `change` event.\n * @param {Core} instance The Handsontable instance.\n */\nfunction onChange(event, instance) {\n  var target = event.target;\n  if (!isCheckboxInput(target)) {\n    return;\n  }\n  if (!target.hasAttribute(ATTR_ROW) || !target.hasAttribute(ATTR_COLUMN)) {\n    return;\n  }\n  var row = parseInt(target.getAttribute(ATTR_ROW), 10);\n  var col = parseInt(target.getAttribute(ATTR_COLUMN), 10);\n  var cellProperties = instance.getCellMeta(row, col);\n  if (!cellProperties.readOnly) {\n    var newCheckboxValue = null;\n    if (event.target.checked) {\n      newCheckboxValue = cellProperties.uncheckedTemplate === void 0 ? true : cellProperties.checkedTemplate;\n    } else {\n      newCheckboxValue = cellProperties.uncheckedTemplate === void 0 ? false : cellProperties.uncheckedTemplate;\n    }\n    instance.setDataAtCell(row, col, newCheckboxValue);\n  }\n}\n\n/**\n * Check if the provided element is the checkbox input.\n *\n * @private\n * @param {HTMLElement} element The element in question.\n * @returns {boolean}\n */\nfunction isCheckboxInput(element) {\n  return element.tagName === 'INPUT' && element.getAttribute('type') === 'checkbox';\n}","map":{"version":3,"names":["baseRenderer","EventManager","empty","addClass","isEmpty","stringify","SHORTCUTS_GROUP_EDITOR","Hooks","isListeningKeyDownEvent","WeakMap","isCheckboxListenerAdded","BAD_VALUE_CLASS","ATTR_ROW","ATTR_COLUMN","SHORTCUTS_GROUP","RENDERER_TYPE","getSingleton","add","bundleSeed","cellMeta","cellValue","label","type","row","column","prop","labelValue","value","labelProperty","property","labelText","labelData","getDataAtRowProp","checkboxRenderer","instance","TD","col","cellProperties","rootDocument","apply","registerEvents","input","createInput","labelOptions","badValue","checkedTemplate","uncheckedTemplate","toLocaleLowerCase","locale","checked","style","display","setAttribute","call","createLabel","separated","position","appendChild","insertBefore","firstChild","createTextNode","has","set","registerShortcuts","shortcutManager","getShortcutManager","gridContext","getContext","config","group","addShortcuts","keys","callback","changeSelectedCheckboxesState","areSelectedCheckboxCells","runOnlyIf","getSettings","enterBeginsEditing","relativeToGroup","uncheckCheckbox","arguments","length","undefined","selRange","getSelectedRange","key","_selRange$key$getTopS","getTopStartCorner","startRow","startColumn","_selRange$key$getBott","getBottomEndCorner","endRow","endColumn","changes","visualRow","visualColumn","cachedCellProperties","getCellMeta","readOnly","dataAtCell","getDataAtCell","toString","includes","push","setDataAtCell","topLeft","bottomRight","cell","getCell","checkboxes","querySelectorAll","eventManager","get","rootElement","addEventListener","event","onClick","onMouseUp","onChange","createElement","className","cloneNode","text","fullWidth","concat","target","isCheckboxInput","hasAttribute","setTimeout","listen","parseInt","getAttribute","preventDefault","newCheckboxValue","element","tagName"],"sources":["/home/rstorey/wwwdev/Blucktool/node_modules/handsontable/renderers/checkboxRenderer/checkboxRenderer.mjs"],"sourcesContent":["import \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.weak-map.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/web.timers.js\";\nimport { baseRenderer } from \"../baseRenderer/index.mjs\";\nimport EventManager from \"../../eventManager.mjs\";\nimport { empty, addClass } from \"../../helpers/dom/element.mjs\";\nimport { isEmpty, stringify } from \"../../helpers/mixed.mjs\";\nimport { SHORTCUTS_GROUP_EDITOR } from \"../../editorManager.mjs\";\nimport Hooks from \"../../pluginHooks.mjs\";\nvar isListeningKeyDownEvent = new WeakMap();\nvar isCheckboxListenerAdded = new WeakMap();\nvar BAD_VALUE_CLASS = 'htBadValue';\nvar ATTR_ROW = 'data-row';\nvar ATTR_COLUMN = 'data-col';\nvar SHORTCUTS_GROUP = 'checkboxRenderer';\nexport var RENDERER_TYPE = 'checkbox';\nHooks.getSingleton().add('modifyAutoColumnSizeSeed', function (bundleSeed, cellMeta, cellValue) {\n  var label = cellMeta.label,\n    type = cellMeta.type,\n    row = cellMeta.row,\n    column = cellMeta.column,\n    prop = cellMeta.prop;\n  if (type !== RENDERER_TYPE) {\n    return;\n  }\n  if (label) {\n    var labelValue = label.value,\n      labelProperty = label.property;\n    var labelText = cellValue;\n    if (labelValue) {\n      labelText = typeof labelValue === 'function' ? labelValue(row, column, prop, cellValue) : labelValue;\n    } else if (labelProperty) {\n      var labelData = this.getDataAtRowProp(row, labelProperty);\n      labelText = labelData !== null ? labelData : cellValue;\n    }\n    bundleSeed = labelText;\n  }\n  return bundleSeed;\n});\n/**\n * Checkbox renderer.\n *\n * @private\n * @param {Core} instance The Handsontable instance.\n * @param {HTMLTableCellElement} TD The rendered cell element.\n * @param {number} row The visual row index.\n * @param {number} col The visual column index.\n * @param {number|string} prop The column property (passed when datasource is an array of objects).\n * @param {*} value The rendered value.\n * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).\n */\nexport function checkboxRenderer(instance, TD, row, col, prop, value, cellProperties) {\n  var rootDocument = instance.rootDocument;\n  baseRenderer.apply(this, [instance, TD, row, col, prop, value, cellProperties]);\n  registerEvents(instance);\n  var input = createInput(rootDocument);\n  var labelOptions = cellProperties.label;\n  var badValue = false;\n  if (typeof cellProperties.checkedTemplate === 'undefined') {\n    cellProperties.checkedTemplate = true;\n  }\n  if (typeof cellProperties.uncheckedTemplate === 'undefined') {\n    cellProperties.uncheckedTemplate = false;\n  }\n  empty(TD); // TODO identify under what circumstances this line can be removed\n\n  if (value === cellProperties.checkedTemplate || stringify(value).toLocaleLowerCase(cellProperties.locale) === stringify(cellProperties.checkedTemplate).toLocaleLowerCase(cellProperties.locale)) {\n    input.checked = true;\n  } else if (value === cellProperties.uncheckedTemplate || stringify(value).toLocaleLowerCase(cellProperties.locale) === stringify(cellProperties.uncheckedTemplate).toLocaleLowerCase(cellProperties.locale)) {\n    input.checked = false;\n  } else if (isEmpty(value)) {\n    // default value\n    addClass(input, 'noValue');\n  } else {\n    input.style.display = 'none';\n    addClass(input, BAD_VALUE_CLASS);\n    badValue = true;\n  }\n  input.setAttribute(ATTR_ROW, row);\n  input.setAttribute(ATTR_COLUMN, col);\n  if (!badValue && labelOptions) {\n    var labelText = '';\n    if (labelOptions.value) {\n      labelText = typeof labelOptions.value === 'function' ? labelOptions.value.call(this, row, col, prop, value) : labelOptions.value;\n    } else if (labelOptions.property) {\n      var labelValue = instance.getDataAtRowProp(row, labelOptions.property);\n      labelText = labelValue !== null ? labelValue : '';\n    }\n    var label = createLabel(rootDocument, labelText, labelOptions.separated !== true);\n    if (labelOptions.position === 'before') {\n      if (labelOptions.separated) {\n        TD.appendChild(label);\n        TD.appendChild(input);\n      } else {\n        label.appendChild(input);\n        input = label;\n      }\n    } else if (!labelOptions.position || labelOptions.position === 'after') {\n      if (labelOptions.separated) {\n        TD.appendChild(input);\n        TD.appendChild(label);\n      } else {\n        label.insertBefore(input, label.firstChild);\n        input = label;\n      }\n    }\n  }\n  if (!labelOptions || labelOptions && !labelOptions.separated) {\n    TD.appendChild(input);\n  }\n  if (badValue) {\n    TD.appendChild(rootDocument.createTextNode('#bad-value#'));\n  }\n  if (!isListeningKeyDownEvent.has(instance)) {\n    isListeningKeyDownEvent.set(instance, true);\n    registerShortcuts();\n  }\n\n  /**\n   * Register shortcuts responsible for toggling checkbox state.\n   *\n   * @private\n   */\n  function registerShortcuts() {\n    var shortcutManager = instance.getShortcutManager();\n    var gridContext = shortcutManager.getContext('grid');\n    var config = {\n      group: SHORTCUTS_GROUP\n    };\n    gridContext.addShortcuts([{\n      keys: [['space']],\n      callback: function callback() {\n        changeSelectedCheckboxesState();\n        return !areSelectedCheckboxCells(); // False blocks next action associated with the keyboard shortcut.\n      }\n    }, {\n      keys: [['enter']],\n      callback: function callback() {\n        changeSelectedCheckboxesState();\n        return !areSelectedCheckboxCells(); // False blocks next action associated with the keyboard shortcut.\n      },\n\n      runOnlyIf: function runOnlyIf() {\n        return instance.getSettings().enterBeginsEditing;\n      }\n    }, {\n      keys: [['delete'], ['backspace']],\n      callback: function callback() {\n        changeSelectedCheckboxesState(true);\n        return !areSelectedCheckboxCells(); // False blocks next action associated with the keyboard shortcut.\n      },\n\n      relativeToGroup: SHORTCUTS_GROUP_EDITOR,\n      position: 'before'\n    }], config);\n  }\n\n  /**\n   * Change checkbox checked property.\n   *\n   * @private\n   * @param {boolean} [uncheckCheckbox=false] The new \"checked\" state for the checkbox elements.\n   */\n  function changeSelectedCheckboxesState() {\n    var uncheckCheckbox = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var selRange = instance.getSelectedRange();\n    if (!selRange) {\n      return;\n    }\n    for (var key = 0; key < selRange.length; key++) {\n      var _selRange$key$getTopS = selRange[key].getTopStartCorner(),\n        startRow = _selRange$key$getTopS.row,\n        startColumn = _selRange$key$getTopS.col;\n      var _selRange$key$getBott = selRange[key].getBottomEndCorner(),\n        endRow = _selRange$key$getBott.row,\n        endColumn = _selRange$key$getBott.col;\n      var changes = [];\n      for (var visualRow = startRow; visualRow <= endRow; visualRow += 1) {\n        for (var visualColumn = startColumn; visualColumn <= endColumn; visualColumn += 1) {\n          var cachedCellProperties = instance.getCellMeta(visualRow, visualColumn);\n          if (cachedCellProperties.type !== 'checkbox') {\n            return;\n          }\n\n          /* eslint-disable no-continue */\n          if (cachedCellProperties.readOnly === true) {\n            continue;\n          }\n          if (typeof cachedCellProperties.checkedTemplate === 'undefined') {\n            cachedCellProperties.checkedTemplate = true;\n          }\n          if (typeof cachedCellProperties.uncheckedTemplate === 'undefined') {\n            cachedCellProperties.uncheckedTemplate = false;\n          }\n          var dataAtCell = instance.getDataAtCell(visualRow, visualColumn);\n          if (uncheckCheckbox === false) {\n            if ([cachedCellProperties.checkedTemplate, cachedCellProperties.checkedTemplate.toString()].includes(dataAtCell)) {\n              // eslint-disable-line max-len\n              changes.push([visualRow, visualColumn, cachedCellProperties.uncheckedTemplate]);\n            } else if ([cachedCellProperties.uncheckedTemplate, cachedCellProperties.uncheckedTemplate.toString(), null, void 0].includes(dataAtCell)) {\n              // eslint-disable-line max-len\n              changes.push([visualRow, visualColumn, cachedCellProperties.checkedTemplate]);\n            }\n          } else {\n            changes.push([visualRow, visualColumn, cachedCellProperties.uncheckedTemplate]);\n          }\n        }\n      }\n      if (changes.length > 0) {\n        instance.setDataAtCell(changes);\n      }\n    }\n  }\n\n  /**\n   * Check whether all selected cells are with checkbox type.\n   *\n   * @returns {boolean}\n   * @private\n   */\n  function areSelectedCheckboxCells() {\n    var selRange = instance.getSelectedRange();\n    if (!selRange) {\n      return;\n    }\n    for (var key = 0; key < selRange.length; key++) {\n      var topLeft = selRange[key].getTopStartCorner();\n      var bottomRight = selRange[key].getBottomEndCorner();\n      for (var visualRow = topLeft.row; visualRow <= bottomRight.row; visualRow++) {\n        for (var visualColumn = topLeft.col; visualColumn <= bottomRight.col; visualColumn++) {\n          var cachedCellProperties = instance.getCellMeta(visualRow, visualColumn);\n          if (cachedCellProperties.type !== 'checkbox') {\n            return false;\n          }\n          var cell = instance.getCell(visualRow, visualColumn);\n          if (cell === null || cell === void 0) {\n            return true;\n          } else {\n            var checkboxes = cell.querySelectorAll('input[type=checkbox]');\n            if (checkboxes.length > 0 && !cachedCellProperties.readOnly) {\n              return true;\n            }\n          }\n        }\n      }\n    }\n    return false;\n  }\n}\ncheckboxRenderer.RENDERER_TYPE = RENDERER_TYPE;\n\n/**\n * Register checkbox listeners.\n *\n * @param {Core} instance The Handsontable instance.\n * @returns {EventManager}\n */\nfunction registerEvents(instance) {\n  var eventManager = isCheckboxListenerAdded.get(instance);\n  if (!eventManager) {\n    var rootElement = instance.rootElement;\n    eventManager = new EventManager(instance);\n    eventManager.addEventListener(rootElement, 'click', function (event) {\n      return onClick(event, instance);\n    });\n    eventManager.addEventListener(rootElement, 'mouseup', function (event) {\n      return onMouseUp(event, instance);\n    });\n    eventManager.addEventListener(rootElement, 'change', function (event) {\n      return onChange(event, instance);\n    });\n    isCheckboxListenerAdded.set(instance, eventManager);\n  }\n  return eventManager;\n}\n\n/**\n * Create input element.\n *\n * @param {Document} rootDocument The document owner.\n * @returns {Node}\n */\nfunction createInput(rootDocument) {\n  var input = rootDocument.createElement('input');\n  input.className = 'htCheckboxRendererInput';\n  input.type = 'checkbox';\n  input.setAttribute('autocomplete', 'off');\n  input.setAttribute('tabindex', '-1');\n  return input.cloneNode(false);\n}\n\n/**\n * Create label element.\n *\n * @param {Document} rootDocument The document owner.\n * @param {string} text The label text.\n * @param {boolean} fullWidth Determines whether label should have full width.\n * @returns {Node}\n */\nfunction createLabel(rootDocument, text, fullWidth) {\n  var label = rootDocument.createElement('label');\n  label.className = \"htCheckboxRendererLabel \".concat(fullWidth ? 'fullWidth' : '');\n  label.appendChild(rootDocument.createTextNode(text));\n  return label.cloneNode(true);\n}\n\n/**\n * `mouseup` callback.\n *\n * @private\n * @param {Event} event `mouseup` event.\n * @param {Core} instance The Handsontable instance.\n */\nfunction onMouseUp(event, instance) {\n  var target = event.target;\n  if (!isCheckboxInput(target)) {\n    return;\n  }\n  if (!target.hasAttribute(ATTR_ROW) || !target.hasAttribute(ATTR_COLUMN)) {\n    return;\n  }\n  setTimeout(instance.listen, 10);\n}\n\n/**\n * `click` callback.\n *\n * @private\n * @param {MouseEvent} event `click` event.\n * @param {Core} instance The Handsontable instance.\n */\nfunction onClick(event, instance) {\n  var target = event.target;\n  if (!isCheckboxInput(target)) {\n    return;\n  }\n  if (!target.hasAttribute(ATTR_ROW) || !target.hasAttribute(ATTR_COLUMN)) {\n    return;\n  }\n  var row = parseInt(target.getAttribute(ATTR_ROW), 10);\n  var col = parseInt(target.getAttribute(ATTR_COLUMN), 10);\n  var cellProperties = instance.getCellMeta(row, col);\n  if (cellProperties.readOnly) {\n    event.preventDefault();\n  }\n}\n\n/**\n * `change` callback.\n *\n * @param {Event} event `change` event.\n * @param {Core} instance The Handsontable instance.\n */\nfunction onChange(event, instance) {\n  var target = event.target;\n  if (!isCheckboxInput(target)) {\n    return;\n  }\n  if (!target.hasAttribute(ATTR_ROW) || !target.hasAttribute(ATTR_COLUMN)) {\n    return;\n  }\n  var row = parseInt(target.getAttribute(ATTR_ROW), 10);\n  var col = parseInt(target.getAttribute(ATTR_COLUMN), 10);\n  var cellProperties = instance.getCellMeta(row, col);\n  if (!cellProperties.readOnly) {\n    var newCheckboxValue = null;\n    if (event.target.checked) {\n      newCheckboxValue = cellProperties.uncheckedTemplate === void 0 ? true : cellProperties.checkedTemplate;\n    } else {\n      newCheckboxValue = cellProperties.uncheckedTemplate === void 0 ? false : cellProperties.uncheckedTemplate;\n    }\n    instance.setDataAtCell(row, col, newCheckboxValue);\n  }\n}\n\n/**\n * Check if the provided element is the checkbox input.\n *\n * @private\n * @param {HTMLElement} element The element in question.\n * @returns {boolean}\n */\nfunction isCheckboxInput(element) {\n  return element.tagName === 'INPUT' && element.getAttribute('type') === 'checkbox';\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}