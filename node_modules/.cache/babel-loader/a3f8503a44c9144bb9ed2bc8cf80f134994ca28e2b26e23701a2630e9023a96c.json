{"ast":null,"code":"import { defineGetter } from \"../../../../../helpers/object.mjs\";\nvar MIXIN_NAME = 'calculatedColumns';\n\n/**\n * Mixin for the subclasses of `Table` with implementations of\n * helper methods that are related to columns.\n * This mixin is meant to be applied in the subclasses of `Table`\n * that use virtual rendering in the horizontal axis.\n *\n * @type {object}\n */\nvar calculatedColumns = {\n  /**\n   * Get the source index of the first rendered column. If no columns are rendered, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getFirstRenderedColumn: function getFirstRenderedColumn() {\n    var startColumn = this.dataAccessObject.startColumnRendered;\n    if (startColumn === null) {\n      return -1;\n    }\n    return startColumn;\n  },\n  /**\n   * Get the source index of the first column fully visible in the viewport. If no columns are fully visible, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getFirstVisibleColumn: function getFirstVisibleColumn() {\n    var startColumn = this.dataAccessObject.startColumnVisible;\n    if (startColumn === null) {\n      return -1;\n    }\n    return startColumn;\n  },\n  /**\n   * Get the source index of the last rendered column. If no columns are rendered, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getLastRenderedColumn: function getLastRenderedColumn() {\n    var endColumn = this.dataAccessObject.endColumnRendered;\n    if (endColumn === null) {\n      return -1;\n    }\n    return endColumn;\n  },\n  /**\n   * Get the source index of the last column fully visible in the viewport. If no columns are fully visible, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getLastVisibleColumn: function getLastVisibleColumn() {\n    var endColumn = this.dataAccessObject.endColumnVisible;\n    if (endColumn === null) {\n      return -1;\n    }\n    return endColumn;\n  },\n  /**\n   * Get the number of rendered columns.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getRenderedColumnsCount: function getRenderedColumnsCount() {\n    return this.dataAccessObject.countColumnsRendered;\n  },\n  /**\n   * Get the number of fully visible columns in the viewport.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getVisibleColumnsCount: function getVisibleColumnsCount() {\n    return this.dataAccessObject.countColumnsVisible;\n  }\n};\ndefineGetter(calculatedColumns, 'MIXIN_NAME', MIXIN_NAME, {\n  writable: false,\n  enumerable: false\n});\nexport default calculatedColumns;","map":{"version":3,"names":["defineGetter","MIXIN_NAME","calculatedColumns","getFirstRenderedColumn","startColumn","dataAccessObject","startColumnRendered","getFirstVisibleColumn","startColumnVisible","getLastRenderedColumn","endColumn","endColumnRendered","getLastVisibleColumn","endColumnVisible","getRenderedColumnsCount","countColumnsRendered","getVisibleColumnsCount","countColumnsVisible","writable","enumerable"],"sources":["/home/rstorey/wwwdev/Blucktool/node_modules/handsontable/3rdparty/walkontable/src/table/mixin/calculatedColumns.mjs"],"sourcesContent":["import { defineGetter } from \"../../../../../helpers/object.mjs\";\nvar MIXIN_NAME = 'calculatedColumns';\n\n/**\n * Mixin for the subclasses of `Table` with implementations of\n * helper methods that are related to columns.\n * This mixin is meant to be applied in the subclasses of `Table`\n * that use virtual rendering in the horizontal axis.\n *\n * @type {object}\n */\nvar calculatedColumns = {\n  /**\n   * Get the source index of the first rendered column. If no columns are rendered, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getFirstRenderedColumn: function getFirstRenderedColumn() {\n    var startColumn = this.dataAccessObject.startColumnRendered;\n    if (startColumn === null) {\n      return -1;\n    }\n    return startColumn;\n  },\n  /**\n   * Get the source index of the first column fully visible in the viewport. If no columns are fully visible, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getFirstVisibleColumn: function getFirstVisibleColumn() {\n    var startColumn = this.dataAccessObject.startColumnVisible;\n    if (startColumn === null) {\n      return -1;\n    }\n    return startColumn;\n  },\n  /**\n   * Get the source index of the last rendered column. If no columns are rendered, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getLastRenderedColumn: function getLastRenderedColumn() {\n    var endColumn = this.dataAccessObject.endColumnRendered;\n    if (endColumn === null) {\n      return -1;\n    }\n    return endColumn;\n  },\n  /**\n   * Get the source index of the last column fully visible in the viewport. If no columns are fully visible, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getLastVisibleColumn: function getLastVisibleColumn() {\n    var endColumn = this.dataAccessObject.endColumnVisible;\n    if (endColumn === null) {\n      return -1;\n    }\n    return endColumn;\n  },\n  /**\n   * Get the number of rendered columns.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getRenderedColumnsCount: function getRenderedColumnsCount() {\n    return this.dataAccessObject.countColumnsRendered;\n  },\n  /**\n   * Get the number of fully visible columns in the viewport.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getVisibleColumnsCount: function getVisibleColumnsCount() {\n    return this.dataAccessObject.countColumnsVisible;\n  }\n};\ndefineGetter(calculatedColumns, 'MIXIN_NAME', MIXIN_NAME, {\n  writable: false,\n  enumerable: false\n});\nexport default calculatedColumns;"],"mappings":"AAAA,SAASA,YAAY,QAAQ,mCAAmC;AAChE,IAAIC,UAAU,GAAG,mBAAmB;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,iBAAiB,GAAG;EACtB;AACF;AACA;AACA;AACA;AACA;EACEC,sBAAsB,EAAE,SAASA,sBAAsBA,CAAA,EAAG;IACxD,IAAIC,WAAW,GAAG,IAAI,CAACC,gBAAgB,CAACC,mBAAmB;IAC3D,IAAIF,WAAW,KAAK,IAAI,EAAE;MACxB,OAAO,CAAC,CAAC;IACX;IACA,OAAOA,WAAW;EACpB,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;EACEG,qBAAqB,EAAE,SAASA,qBAAqBA,CAAA,EAAG;IACtD,IAAIH,WAAW,GAAG,IAAI,CAACC,gBAAgB,CAACG,kBAAkB;IAC1D,IAAIJ,WAAW,KAAK,IAAI,EAAE;MACxB,OAAO,CAAC,CAAC;IACX;IACA,OAAOA,WAAW;EACpB,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;EACEK,qBAAqB,EAAE,SAASA,qBAAqBA,CAAA,EAAG;IACtD,IAAIC,SAAS,GAAG,IAAI,CAACL,gBAAgB,CAACM,iBAAiB;IACvD,IAAID,SAAS,KAAK,IAAI,EAAE;MACtB,OAAO,CAAC,CAAC;IACX;IACA,OAAOA,SAAS;EAClB,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;EACEE,oBAAoB,EAAE,SAASA,oBAAoBA,CAAA,EAAG;IACpD,IAAIF,SAAS,GAAG,IAAI,CAACL,gBAAgB,CAACQ,gBAAgB;IACtD,IAAIH,SAAS,KAAK,IAAI,EAAE;MACtB,OAAO,CAAC,CAAC;IACX;IACA,OAAOA,SAAS;EAClB,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;EACEI,uBAAuB,EAAE,SAASA,uBAAuBA,CAAA,EAAG;IAC1D,OAAO,IAAI,CAACT,gBAAgB,CAACU,oBAAoB;EACnD,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;EACEC,sBAAsB,EAAE,SAASA,sBAAsBA,CAAA,EAAG;IACxD,OAAO,IAAI,CAACX,gBAAgB,CAACY,mBAAmB;EAClD;AACF,CAAC;AACDjB,YAAY,CAACE,iBAAiB,EAAE,YAAY,EAAED,UAAU,EAAE;EACxDiB,QAAQ,EAAE,KAAK;EACfC,UAAU,EAAE;AACd,CAAC,CAAC;AACF,eAAejB,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}