{"ast":null,"code":"import { isRightClick as isRightClickEvent, isLeftClick as isLeftClickEvent } from \"./../helpers/dom/event.mjs\";\n/**\n * MouseDown handler.\n *\n * @param {object} options The handler options.\n * @param {boolean} options.isShiftKey The flag which indicates if the shift key is pressed.\n * @param {boolean} options.isLeftClick The flag which indicates if the left mouse button is pressed.\n * @param {boolean} options.isRightClick The flag which indicates if the right mouse button is pressed.\n * @param {CellRange} options.coords The CellCoords object with defined visual coordinates.\n * @param {Selection} options.selection The Selection class instance.\n * @param {object} options.controller An object with keys `row`, `column`, `cell` which indicate what\n *                                    operation will be performed in later selection stages.\n * @param {Function} options.cellCoordsFactory The function factory for CellCoords objects.\n */\nexport function mouseDown(_ref) {\n  var isShiftKey = _ref.isShiftKey,\n    isLeftClick = _ref.isLeftClick,\n    isRightClick = _ref.isRightClick,\n    coords = _ref.coords,\n    selection = _ref.selection,\n    controller = _ref.controller,\n    cellCoordsFactory = _ref.cellCoordsFactory;\n  var currentSelection = selection.isSelected() ? selection.getSelectedRange().current() : null;\n  var selectedCorner = selection.isSelectedByCorner();\n  var selectedRow = selection.isSelectedByRowHeader();\n  if (isShiftKey && currentSelection) {\n    if (coords.row >= 0 && coords.col >= 0 && !controller.cell) {\n      selection.setRangeEnd(coords);\n    } else if ((selectedCorner || selectedRow) && coords.row >= 0 && coords.col >= 0 && !controller.cell) {\n      selection.setRangeEnd(cellCoordsFactory(coords.row, coords.col));\n    } else if (selectedCorner && coords.row < 0 && !controller.column) {\n      selection.setRangeEnd(cellCoordsFactory(currentSelection.to.row, coords.col));\n    } else if (selectedRow && coords.col < 0 && !controller.row) {\n      selection.setRangeEnd(cellCoordsFactory(coords.row, currentSelection.to.col));\n    } else if ((!selectedCorner && !selectedRow && coords.col < 0 || selectedCorner && coords.col < 0) && !controller.row) {\n      selection.selectRows(Math.max(currentSelection.from.row, 0), coords.row, coords.col);\n    } else if ((!selectedCorner && !selectedRow && coords.row < 0 || selectedRow && coords.row < 0) && !controller.column) {\n      selection.selectColumns(Math.max(currentSelection.from.col, 0), coords.col, coords.row);\n    }\n  } else {\n    var allowRightClickSelection = !selection.inInSelection(coords);\n    var performSelection = isLeftClick || isRightClick && allowRightClickSelection;\n\n    // clicked row header and when some column was selected\n    if (coords.row < 0 && coords.col >= 0 && !controller.column) {\n      if (performSelection) {\n        selection.selectColumns(coords.col, coords.col, coords.row);\n      }\n\n      // clicked column header and when some row was selected\n    } else if (coords.col < 0 && coords.row >= 0 && !controller.row) {\n      if (performSelection) {\n        selection.selectRows(coords.row, coords.row, coords.col);\n      }\n    } else if (coords.col >= 0 && coords.row >= 0 && !controller.cell) {\n      if (performSelection) {\n        selection.setRangeStart(coords);\n      }\n    } else if (coords.col < 0 && coords.row < 0) {\n      selection.selectAll(true, true);\n    }\n  }\n}\n\n/**\n * MouseOver handler.\n *\n * @param {object} options The handler options.\n * @param {boolean} options.isLeftClick Indicates that event was fired using the left mouse button.\n * @param {CellRange} options.coords The CellCoords object with defined visual coordinates.\n * @param {Selection} options.selection The Selection class instance.\n * @param {object} options.controller An object with keys `row`, `column`, `cell` which indicate what\n *                                    operation will be performed in later selection stages.\n * @param {Function} options.cellCoordsFactory The function factory for CellCoords objects.\n */\nexport function mouseOver(_ref2) {\n  var isLeftClick = _ref2.isLeftClick,\n    coords = _ref2.coords,\n    selection = _ref2.selection,\n    controller = _ref2.controller,\n    cellCoordsFactory = _ref2.cellCoordsFactory;\n  if (!isLeftClick) {\n    return;\n  }\n  var selectedRow = selection.isSelectedByRowHeader();\n  var selectedColumn = selection.isSelectedByColumnHeader();\n  var countCols = selection.tableProps.countCols();\n  var countRows = selection.tableProps.countRows();\n  if (selectedColumn && !controller.column) {\n    selection.setRangeEnd(cellCoordsFactory(countRows - 1, coords.col));\n  } else if (selectedRow && !controller.row) {\n    selection.setRangeEnd(cellCoordsFactory(coords.row, countCols - 1));\n  } else if (!controller.cell) {\n    selection.setRangeEnd(coords);\n  }\n}\nvar handlers = new Map([['mousedown', mouseDown], ['mouseover', mouseOver], ['touchstart', mouseDown]]);\n\n/**\n * Mouse handler for selection functionality.\n *\n * @param {Event} event An native event to handle.\n * @param {object} options The handler options.\n * @param {CellRange} options.coords The CellCoords object with defined visual coordinates.\n * @param {Selection} options.selection The Selection class instance.\n * @param {object} options.controller An object with keys `row`, `column`, `cell` which indicate what\n *                                    operation will be performed in later selection stages.\n * @param {Function} options.cellCoordsFactory The function factory for CellCoords objects.\n */\nexport function handleMouseEvent(event, _ref3) {\n  var coords = _ref3.coords,\n    selection = _ref3.selection,\n    controller = _ref3.controller,\n    cellCoordsFactory = _ref3.cellCoordsFactory;\n  handlers.get(event.type)({\n    coords: coords,\n    selection: selection,\n    controller: controller,\n    cellCoordsFactory: cellCoordsFactory,\n    isShiftKey: event.shiftKey,\n    isLeftClick: isLeftClickEvent(event) || event.type === 'touchstart',\n    isRightClick: isRightClickEvent(event)\n  });\n}","map":{"version":3,"names":["isRightClick","isRightClickEvent","isLeftClick","isLeftClickEvent","mouseDown","_ref","isShiftKey","coords","selection","controller","cellCoordsFactory","currentSelection","isSelected","getSelectedRange","current","selectedCorner","isSelectedByCorner","selectedRow","isSelectedByRowHeader","row","col","cell","setRangeEnd","column","to","selectRows","Math","max","from","selectColumns","allowRightClickSelection","inInSelection","performSelection","setRangeStart","selectAll","mouseOver","_ref2","selectedColumn","isSelectedByColumnHeader","countCols","tableProps","countRows","handlers","Map","handleMouseEvent","event","_ref3","get","type","shiftKey"],"sources":["/home/rstorey/wwwdev/Blucktool/node_modules/handsontable/selection/mouseEventHandler.mjs"],"sourcesContent":["import \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport { isRightClick as isRightClickEvent, isLeftClick as isLeftClickEvent } from \"./../helpers/dom/event.mjs\";\n/**\n * MouseDown handler.\n *\n * @param {object} options The handler options.\n * @param {boolean} options.isShiftKey The flag which indicates if the shift key is pressed.\n * @param {boolean} options.isLeftClick The flag which indicates if the left mouse button is pressed.\n * @param {boolean} options.isRightClick The flag which indicates if the right mouse button is pressed.\n * @param {CellRange} options.coords The CellCoords object with defined visual coordinates.\n * @param {Selection} options.selection The Selection class instance.\n * @param {object} options.controller An object with keys `row`, `column`, `cell` which indicate what\n *                                    operation will be performed in later selection stages.\n * @param {Function} options.cellCoordsFactory The function factory for CellCoords objects.\n */\nexport function mouseDown(_ref) {\n  var isShiftKey = _ref.isShiftKey,\n    isLeftClick = _ref.isLeftClick,\n    isRightClick = _ref.isRightClick,\n    coords = _ref.coords,\n    selection = _ref.selection,\n    controller = _ref.controller,\n    cellCoordsFactory = _ref.cellCoordsFactory;\n  var currentSelection = selection.isSelected() ? selection.getSelectedRange().current() : null;\n  var selectedCorner = selection.isSelectedByCorner();\n  var selectedRow = selection.isSelectedByRowHeader();\n  if (isShiftKey && currentSelection) {\n    if (coords.row >= 0 && coords.col >= 0 && !controller.cell) {\n      selection.setRangeEnd(coords);\n    } else if ((selectedCorner || selectedRow) && coords.row >= 0 && coords.col >= 0 && !controller.cell) {\n      selection.setRangeEnd(cellCoordsFactory(coords.row, coords.col));\n    } else if (selectedCorner && coords.row < 0 && !controller.column) {\n      selection.setRangeEnd(cellCoordsFactory(currentSelection.to.row, coords.col));\n    } else if (selectedRow && coords.col < 0 && !controller.row) {\n      selection.setRangeEnd(cellCoordsFactory(coords.row, currentSelection.to.col));\n    } else if ((!selectedCorner && !selectedRow && coords.col < 0 || selectedCorner && coords.col < 0) && !controller.row) {\n      selection.selectRows(Math.max(currentSelection.from.row, 0), coords.row, coords.col);\n    } else if ((!selectedCorner && !selectedRow && coords.row < 0 || selectedRow && coords.row < 0) && !controller.column) {\n      selection.selectColumns(Math.max(currentSelection.from.col, 0), coords.col, coords.row);\n    }\n  } else {\n    var allowRightClickSelection = !selection.inInSelection(coords);\n    var performSelection = isLeftClick || isRightClick && allowRightClickSelection;\n\n    // clicked row header and when some column was selected\n    if (coords.row < 0 && coords.col >= 0 && !controller.column) {\n      if (performSelection) {\n        selection.selectColumns(coords.col, coords.col, coords.row);\n      }\n\n      // clicked column header and when some row was selected\n    } else if (coords.col < 0 && coords.row >= 0 && !controller.row) {\n      if (performSelection) {\n        selection.selectRows(coords.row, coords.row, coords.col);\n      }\n    } else if (coords.col >= 0 && coords.row >= 0 && !controller.cell) {\n      if (performSelection) {\n        selection.setRangeStart(coords);\n      }\n    } else if (coords.col < 0 && coords.row < 0) {\n      selection.selectAll(true, true);\n    }\n  }\n}\n\n/**\n * MouseOver handler.\n *\n * @param {object} options The handler options.\n * @param {boolean} options.isLeftClick Indicates that event was fired using the left mouse button.\n * @param {CellRange} options.coords The CellCoords object with defined visual coordinates.\n * @param {Selection} options.selection The Selection class instance.\n * @param {object} options.controller An object with keys `row`, `column`, `cell` which indicate what\n *                                    operation will be performed in later selection stages.\n * @param {Function} options.cellCoordsFactory The function factory for CellCoords objects.\n */\nexport function mouseOver(_ref2) {\n  var isLeftClick = _ref2.isLeftClick,\n    coords = _ref2.coords,\n    selection = _ref2.selection,\n    controller = _ref2.controller,\n    cellCoordsFactory = _ref2.cellCoordsFactory;\n  if (!isLeftClick) {\n    return;\n  }\n  var selectedRow = selection.isSelectedByRowHeader();\n  var selectedColumn = selection.isSelectedByColumnHeader();\n  var countCols = selection.tableProps.countCols();\n  var countRows = selection.tableProps.countRows();\n  if (selectedColumn && !controller.column) {\n    selection.setRangeEnd(cellCoordsFactory(countRows - 1, coords.col));\n  } else if (selectedRow && !controller.row) {\n    selection.setRangeEnd(cellCoordsFactory(coords.row, countCols - 1));\n  } else if (!controller.cell) {\n    selection.setRangeEnd(coords);\n  }\n}\nvar handlers = new Map([['mousedown', mouseDown], ['mouseover', mouseOver], ['touchstart', mouseDown]]);\n\n/**\n * Mouse handler for selection functionality.\n *\n * @param {Event} event An native event to handle.\n * @param {object} options The handler options.\n * @param {CellRange} options.coords The CellCoords object with defined visual coordinates.\n * @param {Selection} options.selection The Selection class instance.\n * @param {object} options.controller An object with keys `row`, `column`, `cell` which indicate what\n *                                    operation will be performed in later selection stages.\n * @param {Function} options.cellCoordsFactory The function factory for CellCoords objects.\n */\nexport function handleMouseEvent(event, _ref3) {\n  var coords = _ref3.coords,\n    selection = _ref3.selection,\n    controller = _ref3.controller,\n    cellCoordsFactory = _ref3.cellCoordsFactory;\n  handlers.get(event.type)({\n    coords: coords,\n    selection: selection,\n    controller: controller,\n    cellCoordsFactory: cellCoordsFactory,\n    isShiftKey: event.shiftKey,\n    isLeftClick: isLeftClickEvent(event) || event.type === 'touchstart',\n    isRightClick: isRightClickEvent(event)\n  });\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}