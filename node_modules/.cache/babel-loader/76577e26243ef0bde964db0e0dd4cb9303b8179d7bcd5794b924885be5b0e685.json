{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\n/**\n * Class responsible for all of the Selection-related operations on merged cells.\n *\n * @private\n * @class SelectionCalculations\n */\nvar SelectionCalculations = /*#__PURE__*/function () {\n  function SelectionCalculations(plugin) {\n    _classCallCheck(this, SelectionCalculations);\n    /**\n     * Reference to the Merge Cells plugin.\n     *\n     * @type {MergeCells}\n     */\n    this.plugin = plugin;\n    /**\n     * Reference to the Handsontable instance.\n     *\n     * @type {Handsontable}\n     */\n    this.hot = plugin.hot;\n    /**\n     * Class name used for fully selected merged cells.\n     *\n     * @type {string}\n     */\n    this.fullySelectedMergedCellClassName = 'fullySelectedMergedCell';\n  }\n\n  /**\n   * \"Snap\" the delta value according to defined merged cells. (In other words, compensate the rowspan -\n   * e.g. Going up with `delta.row = -1` over a merged cell with `rowspan = 3`, `delta.row` should change to `-3`.).\n   *\n   * @param {object} delta The delta object containing `row` and `col` properties.\n   * @param {CellRange} selectionRange The selection range.\n   * @param {object} mergedCell A merged cell object.\n   */\n  _createClass(SelectionCalculations, [{\n    key: \"snapDelta\",\n    value: function snapDelta(delta, selectionRange, mergedCell) {\n      var cellCoords = selectionRange.to;\n      var newRow = cellCoords.row + delta.row;\n      var newColumn = cellCoords.col + delta.col;\n      if (delta.row) {\n        this.jumpOverMergedCell(delta, mergedCell, newRow);\n      } else if (delta.col) {\n        this.jumpOverMergedCell(delta, mergedCell, newColumn);\n      }\n    }\n\n    /**\n     * \"Jump\" over the merged cell (compensate for the indexes within the merged cell to get past it).\n     *\n     * @private\n     * @param {object} delta The delta object.\n     * @param {MergedCellCoords} mergedCell The merge cell object.\n     * @param {number} newIndex New row/column index, created with the delta.\n     */\n  }, {\n    key: \"jumpOverMergedCell\",\n    value: function jumpOverMergedCell(delta, mergedCell, newIndex) {\n      var flatDelta = delta.row || delta.col;\n      var includesIndex = null;\n      var firstIndex = null;\n      var lastIndex = null;\n      if (delta.row) {\n        includesIndex = mergedCell.includesVertically(newIndex);\n        firstIndex = mergedCell.row;\n        lastIndex = mergedCell.getLastRow();\n      } else if (delta.col) {\n        includesIndex = mergedCell.includesHorizontally(newIndex);\n        firstIndex = mergedCell.col;\n        lastIndex = mergedCell.getLastColumn();\n      }\n      if (flatDelta === 0) {\n        return;\n      } else if (flatDelta > 0) {\n        if (includesIndex && newIndex !== firstIndex) {\n          flatDelta += lastIndex - newIndex + 1;\n        }\n      } else if (includesIndex && newIndex !== lastIndex) {\n        flatDelta -= newIndex - firstIndex + 1;\n      }\n      if (delta.row) {\n        delta.row = flatDelta;\n      } else if (delta.col) {\n        delta.col = flatDelta;\n      }\n    }\n\n    /**\n     * Get a selection range with `to` property incremented by the provided delta.\n     *\n     * @param {CellRange} oldSelectionRange The base selection range.\n     * @param {object} delta The delta object with `row` and `col` properties.\n     * @returns {CellRange} A new `CellRange` object.\n     */\n  }, {\n    key: \"getUpdatedSelectionRange\",\n    value: function getUpdatedSelectionRange(oldSelectionRange, delta) {\n      return this.hot._createCellRange(oldSelectionRange.highlight, oldSelectionRange.from, this.hot._createCellCoords(oldSelectionRange.to.row + delta.row, oldSelectionRange.to.col + delta.col));\n    }\n\n    /**\n     * Generate an additional class name for the entirely-selected merged cells.\n     *\n     * @param {number} currentRow Visual row index of the currently processed cell.\n     * @param {number} currentColumn Visual column index of the currently cell.\n     * @param {Array} cornersOfSelection Array of the current selection in a form of `[startRow, startColumn, endRow, endColumn]`.\n     * @param {number|undefined} layerLevel Number indicating which layer of selection is currently processed.\n     * @returns {string|undefined} A `String`, which will act as an additional `className` to be added to the currently processed cell.\n     */\n  }, {\n    key: \"getSelectedMergedCellClassName\",\n    value: function getSelectedMergedCellClassName(currentRow, currentColumn, cornersOfSelection, layerLevel) {\n      var startRow = Math.min(cornersOfSelection[0], cornersOfSelection[2]);\n      var startColumn = Math.min(cornersOfSelection[1], cornersOfSelection[3]);\n      var endRow = Math.max(cornersOfSelection[0], cornersOfSelection[2]);\n      var endColumn = Math.max(cornersOfSelection[1], cornersOfSelection[3]);\n      if (layerLevel === void 0) {\n        return;\n      }\n      var isFirstRenderableMergedCell = this.plugin.mergedCellsCollection.isFirstRenderableMergedCell(currentRow, currentColumn);\n\n      // We add extra classes just to the first renderable merged cell.\n      if (!isFirstRenderableMergedCell) {\n        return;\n      }\n      var mergedCell = this.plugin.mergedCellsCollection.get(currentRow, currentColumn);\n      if (!mergedCell) {\n        return;\n      }\n      var mergeRowEnd = mergedCell.getLastRow();\n      var mergeColumnEnd = mergedCell.getLastColumn();\n      var fullMergeAreaWithinSelection = startRow <= mergedCell.row && startColumn <= mergedCell.col && endRow >= mergeRowEnd && endColumn >= mergeColumnEnd;\n      if (fullMergeAreaWithinSelection) {\n        return \"\".concat(this.fullySelectedMergedCellClassName, \"-\").concat(layerLevel);\n      } else if (this.plugin.selectionCalculations.isMergeCellFullySelected(mergedCell, this.plugin.hot.getSelectedRange())) {\n        // eslint-disable-line max-len\n        return \"\".concat(this.fullySelectedMergedCellClassName, \"-multiple\");\n      }\n    }\n\n    /**\n     * Check if the provided merged cell is fully selected (by one or many layers of selection).\n     *\n     * @param {MergedCellCoords} mergedCell The merged cell to be processed.\n     * @param {CellRange[]} selectionRangesArray Array of selection ranges.\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isMergeCellFullySelected\",\n    value: function isMergeCellFullySelected(mergedCell, selectionRangesArray) {\n      var mergedCellIndividualCoords = [];\n      if (!selectionRangesArray || !mergedCell) {\n        return false;\n      }\n      for (var r = 0; r < mergedCell.rowspan; r += 1) {\n        for (var c = 0; c < mergedCell.colspan; c += 1) {\n          mergedCellIndividualCoords.push(this.hot._createCellCoords(mergedCell.row + r, mergedCell.col + c));\n        }\n      }\n      for (var i = 0; i < mergedCellIndividualCoords.length; i += 1) {\n        var insideSelections = [];\n        for (var s = 0; s < selectionRangesArray.length; s += 1) {\n          insideSelections[s] = selectionRangesArray[s].includes(mergedCellIndividualCoords[i]);\n        }\n        if (!insideSelections.includes(true)) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    /**\n     * Generate an array of the entirely-selected merged cells' class names.\n     *\n     * @returns {string[]} An `Array` of `String`s. Each of these strings will act like class names to be removed from all the cells in the table.\n     */\n  }, {\n    key: \"getSelectedMergedCellClassNameToRemove\",\n    value: function getSelectedMergedCellClassNameToRemove() {\n      var classNames = [];\n      for (var i = 0; i <= 7; i += 1) {\n        classNames.push(\"\".concat(this.fullySelectedMergedCellClassName, \"-\").concat(i));\n      }\n      classNames.push(\"\".concat(this.fullySelectedMergedCellClassName, \"-multiple\"));\n      return classNames;\n    }\n  }]);\n  return SelectionCalculations;\n}();\nexport default SelectionCalculations;","map":{"version":3,"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","_toPropertyKey","key","_createClass","protoProps","staticProps","arg","_toPrimitive","String","input","hint","prim","toPrimitive","undefined","res","call","Number","SelectionCalculations","plugin","hot","fullySelectedMergedCellClassName","value","snapDelta","delta","selectionRange","mergedCell","cellCoords","to","newRow","row","newColumn","col","jumpOverMergedCell","newIndex","flatDelta","includesIndex","firstIndex","lastIndex","includesVertically","getLastRow","includesHorizontally","getLastColumn","getUpdatedSelectionRange","oldSelectionRange","_createCellRange","highlight","from","_createCellCoords","getSelectedMergedCellClassName","currentRow","currentColumn","cornersOfSelection","layerLevel","startRow","Math","min","startColumn","endRow","max","endColumn","isFirstRenderableMergedCell","mergedCellsCollection","get","mergeRowEnd","mergeColumnEnd","fullMergeAreaWithinSelection","concat","selectionCalculations","isMergeCellFullySelected","getSelectedRange","selectionRangesArray","mergedCellIndividualCoords","r","rowspan","c","colspan","push","insideSelections","s","includes","getSelectedMergedCellClassNameToRemove","classNames"],"sources":["/home/rstorey/wwwdev/Blucktool/node_modules/handsontable/plugins/mergeCells/calculations/selection.mjs"],"sourcesContent":["function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.symbol.to-primitive.js\";\nimport \"core-js/modules/es.date.to-primitive.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n/**\n * Class responsible for all of the Selection-related operations on merged cells.\n *\n * @private\n * @class SelectionCalculations\n */\nvar SelectionCalculations = /*#__PURE__*/function () {\n  function SelectionCalculations(plugin) {\n    _classCallCheck(this, SelectionCalculations);\n    /**\n     * Reference to the Merge Cells plugin.\n     *\n     * @type {MergeCells}\n     */\n    this.plugin = plugin;\n    /**\n     * Reference to the Handsontable instance.\n     *\n     * @type {Handsontable}\n     */\n    this.hot = plugin.hot;\n    /**\n     * Class name used for fully selected merged cells.\n     *\n     * @type {string}\n     */\n    this.fullySelectedMergedCellClassName = 'fullySelectedMergedCell';\n  }\n\n  /**\n   * \"Snap\" the delta value according to defined merged cells. (In other words, compensate the rowspan -\n   * e.g. Going up with `delta.row = -1` over a merged cell with `rowspan = 3`, `delta.row` should change to `-3`.).\n   *\n   * @param {object} delta The delta object containing `row` and `col` properties.\n   * @param {CellRange} selectionRange The selection range.\n   * @param {object} mergedCell A merged cell object.\n   */\n  _createClass(SelectionCalculations, [{\n    key: \"snapDelta\",\n    value: function snapDelta(delta, selectionRange, mergedCell) {\n      var cellCoords = selectionRange.to;\n      var newRow = cellCoords.row + delta.row;\n      var newColumn = cellCoords.col + delta.col;\n      if (delta.row) {\n        this.jumpOverMergedCell(delta, mergedCell, newRow);\n      } else if (delta.col) {\n        this.jumpOverMergedCell(delta, mergedCell, newColumn);\n      }\n    }\n\n    /**\n     * \"Jump\" over the merged cell (compensate for the indexes within the merged cell to get past it).\n     *\n     * @private\n     * @param {object} delta The delta object.\n     * @param {MergedCellCoords} mergedCell The merge cell object.\n     * @param {number} newIndex New row/column index, created with the delta.\n     */\n  }, {\n    key: \"jumpOverMergedCell\",\n    value: function jumpOverMergedCell(delta, mergedCell, newIndex) {\n      var flatDelta = delta.row || delta.col;\n      var includesIndex = null;\n      var firstIndex = null;\n      var lastIndex = null;\n      if (delta.row) {\n        includesIndex = mergedCell.includesVertically(newIndex);\n        firstIndex = mergedCell.row;\n        lastIndex = mergedCell.getLastRow();\n      } else if (delta.col) {\n        includesIndex = mergedCell.includesHorizontally(newIndex);\n        firstIndex = mergedCell.col;\n        lastIndex = mergedCell.getLastColumn();\n      }\n      if (flatDelta === 0) {\n        return;\n      } else if (flatDelta > 0) {\n        if (includesIndex && newIndex !== firstIndex) {\n          flatDelta += lastIndex - newIndex + 1;\n        }\n      } else if (includesIndex && newIndex !== lastIndex) {\n        flatDelta -= newIndex - firstIndex + 1;\n      }\n      if (delta.row) {\n        delta.row = flatDelta;\n      } else if (delta.col) {\n        delta.col = flatDelta;\n      }\n    }\n\n    /**\n     * Get a selection range with `to` property incremented by the provided delta.\n     *\n     * @param {CellRange} oldSelectionRange The base selection range.\n     * @param {object} delta The delta object with `row` and `col` properties.\n     * @returns {CellRange} A new `CellRange` object.\n     */\n  }, {\n    key: \"getUpdatedSelectionRange\",\n    value: function getUpdatedSelectionRange(oldSelectionRange, delta) {\n      return this.hot._createCellRange(oldSelectionRange.highlight, oldSelectionRange.from, this.hot._createCellCoords(oldSelectionRange.to.row + delta.row, oldSelectionRange.to.col + delta.col));\n    }\n\n    /**\n     * Generate an additional class name for the entirely-selected merged cells.\n     *\n     * @param {number} currentRow Visual row index of the currently processed cell.\n     * @param {number} currentColumn Visual column index of the currently cell.\n     * @param {Array} cornersOfSelection Array of the current selection in a form of `[startRow, startColumn, endRow, endColumn]`.\n     * @param {number|undefined} layerLevel Number indicating which layer of selection is currently processed.\n     * @returns {string|undefined} A `String`, which will act as an additional `className` to be added to the currently processed cell.\n     */\n  }, {\n    key: \"getSelectedMergedCellClassName\",\n    value: function getSelectedMergedCellClassName(currentRow, currentColumn, cornersOfSelection, layerLevel) {\n      var startRow = Math.min(cornersOfSelection[0], cornersOfSelection[2]);\n      var startColumn = Math.min(cornersOfSelection[1], cornersOfSelection[3]);\n      var endRow = Math.max(cornersOfSelection[0], cornersOfSelection[2]);\n      var endColumn = Math.max(cornersOfSelection[1], cornersOfSelection[3]);\n      if (layerLevel === void 0) {\n        return;\n      }\n      var isFirstRenderableMergedCell = this.plugin.mergedCellsCollection.isFirstRenderableMergedCell(currentRow, currentColumn);\n\n      // We add extra classes just to the first renderable merged cell.\n      if (!isFirstRenderableMergedCell) {\n        return;\n      }\n      var mergedCell = this.plugin.mergedCellsCollection.get(currentRow, currentColumn);\n      if (!mergedCell) {\n        return;\n      }\n      var mergeRowEnd = mergedCell.getLastRow();\n      var mergeColumnEnd = mergedCell.getLastColumn();\n      var fullMergeAreaWithinSelection = startRow <= mergedCell.row && startColumn <= mergedCell.col && endRow >= mergeRowEnd && endColumn >= mergeColumnEnd;\n      if (fullMergeAreaWithinSelection) {\n        return \"\".concat(this.fullySelectedMergedCellClassName, \"-\").concat(layerLevel);\n      } else if (this.plugin.selectionCalculations.isMergeCellFullySelected(mergedCell, this.plugin.hot.getSelectedRange())) {\n        // eslint-disable-line max-len\n        return \"\".concat(this.fullySelectedMergedCellClassName, \"-multiple\");\n      }\n    }\n\n    /**\n     * Check if the provided merged cell is fully selected (by one or many layers of selection).\n     *\n     * @param {MergedCellCoords} mergedCell The merged cell to be processed.\n     * @param {CellRange[]} selectionRangesArray Array of selection ranges.\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isMergeCellFullySelected\",\n    value: function isMergeCellFullySelected(mergedCell, selectionRangesArray) {\n      var mergedCellIndividualCoords = [];\n      if (!selectionRangesArray || !mergedCell) {\n        return false;\n      }\n      for (var r = 0; r < mergedCell.rowspan; r += 1) {\n        for (var c = 0; c < mergedCell.colspan; c += 1) {\n          mergedCellIndividualCoords.push(this.hot._createCellCoords(mergedCell.row + r, mergedCell.col + c));\n        }\n      }\n      for (var i = 0; i < mergedCellIndividualCoords.length; i += 1) {\n        var insideSelections = [];\n        for (var s = 0; s < selectionRangesArray.length; s += 1) {\n          insideSelections[s] = selectionRangesArray[s].includes(mergedCellIndividualCoords[i]);\n        }\n        if (!insideSelections.includes(true)) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    /**\n     * Generate an array of the entirely-selected merged cells' class names.\n     *\n     * @returns {string[]} An `Array` of `String`s. Each of these strings will act like class names to be removed from all the cells in the table.\n     */\n  }, {\n    key: \"getSelectedMergedCellClassNameToRemove\",\n    value: function getSelectedMergedCellClassNameToRemove() {\n      var classNames = [];\n      for (var i = 0; i <= 7; i += 1) {\n        classNames.push(\"\".concat(this.fullySelectedMergedCellClassName, \"-\").concat(i));\n      }\n      classNames.push(\"\".concat(this.fullySelectedMergedCellClassName, \"-multiple\"));\n      return classNames;\n    }\n  }]);\n  return SelectionCalculations;\n}();\nexport default SelectionCalculations;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}