{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nimport ViewSize from \"./viewSize.mjs\";\nimport { WORKING_SPACE_ALL, WORKING_SPACE_TOP, WORKING_SPACE_BOTTOM } from \"./constants.mjs\";\n/**\n * The class is a source of the truth of information about the current and\n * next size of the rendered DOM elements and current and next offset of\n * the view. That information allows us to calculate diff between current\n * DOM order and this which should be rendered without touching the DOM API at all.\n *\n * Mostly the ViewSizeSet is created for each individual renderer. But in\n * the table, there is one case where this size information should be shared\n * between two different instances (different table renderers). This is a TR\n * element which can contain TH elements - managed by own renderer and\n * TD elements - managed by another renderer. To generate correct DOM order\n * for them it is required to connect these two instances by reference\n * through `sharedSize`.\n *\n * @class {ViewSizeSet}\n */\nvar ViewSizeSet = /*#__PURE__*/function () {\n  function ViewSizeSet() {\n    _classCallCheck(this, ViewSizeSet);\n    /**\n     * Holder for current and next view size and offset.\n     *\n     * @type {ViewSize}\n     */\n    this.size = new ViewSize();\n    /**\n     * Defines if this instance shares its size with another instance. If it's in the shared\n     * mode it defines what space it occupies ('top' or 'bottom').\n     *\n     * @type {number}\n     */\n    this.workingSpace = WORKING_SPACE_ALL;\n    /**\n     * Shared Size instance.\n     *\n     * @type {ViewSize}\n     */\n    this.sharedSize = null;\n  }\n\n  /**\n   * Sets the size for rendered elements. It can be a size for rows, cells or size for row\n   * headers etc.\n   *\n   * @param {number} size The size.\n   */\n  _createClass(ViewSizeSet, [{\n    key: \"setSize\",\n    value: function setSize(size) {\n      this.size.setSize(size);\n    }\n\n    /**\n     * Sets the offset for rendered elements. The offset describes the shift between 0 and\n     * the first rendered element according to the scroll position.\n     *\n     * @param {number} offset The offset.\n     */\n  }, {\n    key: \"setOffset\",\n    value: function setOffset(offset) {\n      this.size.setOffset(offset);\n    }\n\n    /**\n     * Returns ViewSize instance.\n     *\n     * @returns {ViewSize}\n     */\n  }, {\n    key: \"getViewSize\",\n    value: function getViewSize() {\n      return this.size;\n    }\n\n    /**\n     * Checks if this ViewSizeSet is sharing the size with another instance.\n     *\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isShared\",\n    value: function isShared() {\n      return this.sharedSize instanceof ViewSize;\n    }\n\n    /**\n     * Checks what working space describes this size instance.\n     *\n     * @param {number} workingSpace The number which describes the type of the working space (see constants.js).\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isPlaceOn\",\n    value: function isPlaceOn(workingSpace) {\n      return this.workingSpace === workingSpace;\n    }\n\n    /**\n     * Appends the ViewSizeSet instance to this instance that turns it into a shared mode.\n     *\n     * @param {ViewSizeSet} viewSize The instance of the ViewSizeSet class.\n     */\n  }, {\n    key: \"append\",\n    value: function append(viewSize) {\n      this.workingSpace = WORKING_SPACE_TOP;\n      viewSize.workingSpace = WORKING_SPACE_BOTTOM;\n      this.sharedSize = viewSize.getViewSize();\n    }\n\n    /**\n     * Prepends the ViewSize instance to this instance that turns it into a shared mode.\n     *\n     * @param {ViewSizeSet} viewSize The instance of the ViewSizeSet class.\n     */\n  }, {\n    key: \"prepend\",\n    value: function prepend(viewSize) {\n      this.workingSpace = WORKING_SPACE_BOTTOM;\n      viewSize.workingSpace = WORKING_SPACE_TOP;\n      this.sharedSize = viewSize.getViewSize();\n    }\n  }]);\n  return ViewSizeSet;\n}();\nexport { ViewSizeSet as default };","map":{"version":3,"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","_toPropertyKey","key","_createClass","protoProps","staticProps","arg","_toPrimitive","String","input","hint","prim","toPrimitive","undefined","res","call","Number","ViewSize","WORKING_SPACE_ALL","WORKING_SPACE_TOP","WORKING_SPACE_BOTTOM","ViewSizeSet","size","workingSpace","sharedSize","value","setSize","setOffset","offset","getViewSize","isShared","isPlaceOn","append","viewSize","prepend","default"],"sources":["/home/rstorey/wwwdev/Blucktool/node_modules/handsontable/3rdparty/walkontable/src/utils/orderView/viewSizeSet.mjs"],"sourcesContent":["import \"core-js/modules/es.symbol.to-primitive.js\";\nimport \"core-js/modules/es.date.to-primitive.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport ViewSize from \"./viewSize.mjs\";\nimport { WORKING_SPACE_ALL, WORKING_SPACE_TOP, WORKING_SPACE_BOTTOM } from \"./constants.mjs\";\n/**\n * The class is a source of the truth of information about the current and\n * next size of the rendered DOM elements and current and next offset of\n * the view. That information allows us to calculate diff between current\n * DOM order and this which should be rendered without touching the DOM API at all.\n *\n * Mostly the ViewSizeSet is created for each individual renderer. But in\n * the table, there is one case where this size information should be shared\n * between two different instances (different table renderers). This is a TR\n * element which can contain TH elements - managed by own renderer and\n * TD elements - managed by another renderer. To generate correct DOM order\n * for them it is required to connect these two instances by reference\n * through `sharedSize`.\n *\n * @class {ViewSizeSet}\n */\nvar ViewSizeSet = /*#__PURE__*/function () {\n  function ViewSizeSet() {\n    _classCallCheck(this, ViewSizeSet);\n    /**\n     * Holder for current and next view size and offset.\n     *\n     * @type {ViewSize}\n     */\n    this.size = new ViewSize();\n    /**\n     * Defines if this instance shares its size with another instance. If it's in the shared\n     * mode it defines what space it occupies ('top' or 'bottom').\n     *\n     * @type {number}\n     */\n    this.workingSpace = WORKING_SPACE_ALL;\n    /**\n     * Shared Size instance.\n     *\n     * @type {ViewSize}\n     */\n    this.sharedSize = null;\n  }\n\n  /**\n   * Sets the size for rendered elements. It can be a size for rows, cells or size for row\n   * headers etc.\n   *\n   * @param {number} size The size.\n   */\n  _createClass(ViewSizeSet, [{\n    key: \"setSize\",\n    value: function setSize(size) {\n      this.size.setSize(size);\n    }\n\n    /**\n     * Sets the offset for rendered elements. The offset describes the shift between 0 and\n     * the first rendered element according to the scroll position.\n     *\n     * @param {number} offset The offset.\n     */\n  }, {\n    key: \"setOffset\",\n    value: function setOffset(offset) {\n      this.size.setOffset(offset);\n    }\n\n    /**\n     * Returns ViewSize instance.\n     *\n     * @returns {ViewSize}\n     */\n  }, {\n    key: \"getViewSize\",\n    value: function getViewSize() {\n      return this.size;\n    }\n\n    /**\n     * Checks if this ViewSizeSet is sharing the size with another instance.\n     *\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isShared\",\n    value: function isShared() {\n      return this.sharedSize instanceof ViewSize;\n    }\n\n    /**\n     * Checks what working space describes this size instance.\n     *\n     * @param {number} workingSpace The number which describes the type of the working space (see constants.js).\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isPlaceOn\",\n    value: function isPlaceOn(workingSpace) {\n      return this.workingSpace === workingSpace;\n    }\n\n    /**\n     * Appends the ViewSizeSet instance to this instance that turns it into a shared mode.\n     *\n     * @param {ViewSizeSet} viewSize The instance of the ViewSizeSet class.\n     */\n  }, {\n    key: \"append\",\n    value: function append(viewSize) {\n      this.workingSpace = WORKING_SPACE_TOP;\n      viewSize.workingSpace = WORKING_SPACE_BOTTOM;\n      this.sharedSize = viewSize.getViewSize();\n    }\n\n    /**\n     * Prepends the ViewSize instance to this instance that turns it into a shared mode.\n     *\n     * @param {ViewSizeSet} viewSize The instance of the ViewSizeSet class.\n     */\n  }, {\n    key: \"prepend\",\n    value: function prepend(viewSize) {\n      this.workingSpace = WORKING_SPACE_BOTTOM;\n      viewSize.workingSpace = WORKING_SPACE_TOP;\n      this.sharedSize = viewSize.getViewSize();\n    }\n  }]);\n  return ViewSizeSet;\n}();\nexport { ViewSizeSet as default };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}