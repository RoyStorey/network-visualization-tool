{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (null != _i) {\n    var _s,\n      _e,\n      _x,\n      _r,\n      _arr = [],\n      _n = !0,\n      _d = !1;\n    try {\n      if (_x = (_i = _i.call(arr)).next, 0 === i) {\n        if (Object(_i) !== _i) return;\n        _n = !1;\n      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);\n    } catch (err) {\n      _d = !0, _e = err;\n    } finally {\n      try {\n        if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return;\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return _possibleConstructorReturn(this, result);\n  };\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nimport { isDefined, stringify } from \"../../helpers/mixed.mjs\";\nimport { mixin } from \"../../helpers/object.mjs\";\nimport { SHORTCUTS_GROUP_NAVIGATION } from \"../../editorManager.mjs\";\nimport hooksRefRegisterer from \"../../mixins/hooksRefRegisterer.mjs\";\nimport { getScrollbarWidth, offset, hasVerticalScrollbar, hasHorizontalScrollbar, outerWidth, outerHeight, getComputedStyle } from \"../../helpers/dom/element.mjs\";\nexport var EDITOR_TYPE = 'base';\nexport var EDITOR_STATE = Object.freeze({\n  VIRGIN: 'STATE_VIRGIN',\n  // before editing\n  EDITING: 'STATE_EDITING',\n  WAITING: 'STATE_WAITING',\n  // waiting for async validation\n  FINISHED: 'STATE_FINISHED'\n});\nexport var SHORTCUTS_GROUP_EDITOR = 'baseEditor';\n\n/**\n * @class BaseEditor\n */\nexport var BaseEditor = /*#__PURE__*/function () {\n  /**\n   * @param {Handsontable} instance A reference to the source instance of the Handsontable.\n   */\n  function BaseEditor(instance) {\n    _classCallCheck(this, BaseEditor);\n    /**\n     * A reference to the source instance of the Handsontable.\n     *\n     * @type {Handsontable}\n     */\n    this.hot = instance;\n    /**\n     * A reference to the source instance of the Handsontable.\n     *\n     * @deprecated\n     *\n     * @type {Handsontable}\n     */\n    this.instance = instance;\n    /**\n     * Editor's state.\n     *\n     * @type {string}\n     */\n    this.state = EDITOR_STATE.VIRGIN;\n    /**\n     * Flag to store information about editor's opening status.\n     *\n     * @private\n     *\n     * @type {boolean}\n     */\n    this._opened = false;\n    /**\n     * Defines the editor's editing mode. When false, then an editor works in fast editing mode.\n     *\n     * @private\n     *\n     * @type {boolean}\n     */\n    this._fullEditMode = false;\n    /**\n     * Callback to call after closing editor.\n     *\n     * @type {Function}\n     */\n    this._closeCallback = null;\n    /**\n     * Currently rendered cell's TD element.\n     *\n     * @type {HTMLTableCellElement}\n     */\n    this.TD = null;\n    /**\n     * Visual row index.\n     *\n     * @type {number}\n     */\n    this.row = null;\n    /**\n     * Visual column index.\n     *\n     * @type {number}\n     */\n    this.col = null;\n    /**\n     * Column property name or a column index, if datasource is an array of arrays.\n     *\n     * @type {number|string}\n     */\n    this.prop = null;\n    /**\n     * Original cell's value.\n     *\n     * @type {*}\n     */\n    this.originalValue = null;\n    /**\n     * Object containing the cell's properties.\n     *\n     * @type {object}\n     */\n    this.cellProperties = null;\n    this.init();\n  }\n\n  /**\n   * Fires callback after closing editor.\n   *\n   * @private\n   * @param {boolean} result The editor value.\n   */\n  _createClass(BaseEditor, [{\n    key: \"_fireCallbacks\",\n    value: function _fireCallbacks(result) {\n      if (this._closeCallback) {\n        this._closeCallback(result);\n        this._closeCallback = null;\n      }\n    }\n\n    /**\n     * Initializes an editor's intance.\n     */\n  }, {\n    key: \"init\",\n    value: function init() {}\n\n    /**\n     * Required method to get current value from editable element.\n     */\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      throw Error('Editor getValue() method unimplemented');\n    }\n\n    /**\n     * Required method to set new value into editable element.\n     */\n  }, {\n    key: \"setValue\",\n    value: function setValue() {\n      throw Error('Editor setValue() method unimplemented');\n    }\n\n    /**\n     * Required method to open editor.\n     */\n  }, {\n    key: \"open\",\n    value: function open() {\n      throw Error('Editor open() method unimplemented');\n    }\n\n    /**\n     * Required method to close editor.\n     */\n  }, {\n    key: \"close\",\n    value: function close() {\n      throw Error('Editor close() method unimplemented');\n    }\n\n    /**\n     * Prepares editor's meta data.\n     *\n     * @param {number} row The visual row index.\n     * @param {number} col The visual column index.\n     * @param {number|string} prop The column property (passed when datasource is an array of objects).\n     * @param {HTMLTableCellElement} td The rendered cell element.\n     * @param {*} value The rendered value.\n     * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).\n     */\n  }, {\n    key: \"prepare\",\n    value: function prepare(row, col, prop, td, value, cellProperties) {\n      this.TD = td;\n      this.row = row;\n      this.col = col;\n      this.prop = prop;\n      this.originalValue = value;\n      this.cellProperties = cellProperties;\n      this.state = EDITOR_STATE.VIRGIN;\n    }\n\n    /**\n     * Fallback method to provide extendable editors in ES5.\n     *\n     * @returns {Function}\n     */\n  }, {\n    key: \"extend\",\n    value: function extend() {\n      return /*#__PURE__*/function (_this$constructor) {\n        _inherits(Editor, _this$constructor);\n        var _super = _createSuper(Editor);\n        function Editor() {\n          _classCallCheck(this, Editor);\n          return _super.apply(this, arguments);\n        }\n        return _createClass(Editor);\n      }(this.constructor);\n    }\n\n    /**\n     * Saves value from editor into data storage.\n     *\n     * @param {*} value The editor value.\n     * @param {boolean} ctrlDown If `true`, applies value to each cell in the last selected range.\n     */\n  }, {\n    key: \"saveValue\",\n    value: function saveValue(value, ctrlDown) {\n      var _this = this;\n      var visualRowFrom;\n      var visualColumnFrom;\n      var visualRowTo;\n      var visualColumnTo;\n\n      // if ctrl+enter and multiple cells selected, behave like Excel (finish editing and apply to all cells)\n      if (ctrlDown) {\n        var selectedLast = this.hot.getSelectedLast();\n        visualRowFrom = Math.max(Math.min(selectedLast[0], selectedLast[2]), 0); // Math.max eliminate headers coords.\n        visualColumnFrom = Math.max(Math.min(selectedLast[1], selectedLast[3]), 0); // Math.max eliminate headers coords.\n        visualRowTo = Math.max(selectedLast[0], selectedLast[2]);\n        visualColumnTo = Math.max(selectedLast[1], selectedLast[3]);\n      } else {\n        var _ref = [this.row, this.col, null, null];\n        visualRowFrom = _ref[0];\n        visualColumnFrom = _ref[1];\n        visualRowTo = _ref[2];\n        visualColumnTo = _ref[3];\n      }\n      var modifiedCellCoords = this.hot.runHooks('modifyGetCellCoords', visualRowFrom, visualColumnFrom);\n      if (Array.isArray(modifiedCellCoords)) {\n        var _modifiedCellCoords = _slicedToArray(modifiedCellCoords, 2);\n        visualRowFrom = _modifiedCellCoords[0];\n        visualColumnFrom = _modifiedCellCoords[1];\n      }\n      var shortcutManager = this.hot.getShortcutManager();\n      var editorContext = shortcutManager.getContext('editor');\n      var contextConfig = {\n        runOnlyIf: function runOnlyIf() {\n          return isDefined(_this.hot.getSelected());\n        },\n        group: SHORTCUTS_GROUP_EDITOR\n      };\n      if (this.isInFullEditMode()) {\n        editorContext.addShortcuts([{\n          keys: [['ArrowUp']],\n          callback: function callback() {\n            _this.hot.selection.transformStart(-1, 0);\n          }\n        }, {\n          keys: [['ArrowDown']],\n          callback: function callback() {\n            _this.hot.selection.transformStart(1, 0);\n          }\n        }, {\n          keys: [['ArrowLeft']],\n          callback: function callback() {\n            _this.hot.selection.transformStart(0, -1 * _this.hot.getDirectionFactor());\n          }\n        }, {\n          keys: [['ArrowRight']],\n          callback: function callback() {\n            _this.hot.selection.transformStart(0, _this.hot.getDirectionFactor());\n          }\n        }], contextConfig);\n      }\n\n      // Saving values using the modified coordinates.\n      this.hot.populateFromArray(visualRowFrom, visualColumnFrom, value, visualRowTo, visualColumnTo, 'edit');\n    }\n\n    /**\n     * Begins editing on a highlighted cell and hides fillHandle corner if was present.\n     *\n     * @param {*} newInitialValue The initial editor value.\n     * @param {Event} event The keyboard event object.\n     */\n  }, {\n    key: \"beginEditing\",\n    value: function beginEditing(newInitialValue, event) {\n      if (this.state !== EDITOR_STATE.VIRGIN) {\n        return;\n      }\n      var hotInstance = this.hot;\n      // We have to convert visual indexes into renderable indexes\n      // due to hidden columns don't participate in the rendering process\n      var renderableRowIndex = hotInstance.rowIndexMapper.getRenderableFromVisualIndex(this.row);\n      var renderableColumnIndex = hotInstance.columnIndexMapper.getRenderableFromVisualIndex(this.col);\n      hotInstance.view.scrollViewport(hotInstance._createCellCoords(renderableRowIndex, renderableColumnIndex));\n      this.state = EDITOR_STATE.EDITING;\n\n      // Set the editor value only in the full edit mode. In other mode the focusable element has to be empty,\n      // otherwise IME (editor for Asia users) doesn't work.\n      if (this.isInFullEditMode()) {\n        var stringifiedInitialValue = typeof newInitialValue === 'string' ? newInitialValue : stringify(this.originalValue);\n        this.setValue(stringifiedInitialValue);\n      }\n      this.open(event);\n      this._opened = true;\n      this.focus();\n\n      // only rerender the selections (FillHandle should disappear when beginEditing is triggered)\n      hotInstance.view.render();\n      hotInstance.runHooks('afterBeginEditing', this.row, this.col);\n    }\n\n    /**\n     * Finishes editing and start saving or restoring process for editing cell or last selected range.\n     *\n     * @param {boolean} restoreOriginalValue If true, then closes editor without saving value from the editor into a cell.\n     * @param {boolean} ctrlDown If true, then saveValue will save editor's value to each cell in the last selected range.\n     * @param {Function} callback The callback function, fired after editor closing.\n     */\n  }, {\n    key: \"finishEditing\",\n    value: function finishEditing(restoreOriginalValue, ctrlDown, callback) {\n      var _this2 = this;\n      var val;\n      if (callback) {\n        var previousCloseCallback = this._closeCallback;\n        this._closeCallback = function (result) {\n          if (previousCloseCallback) {\n            previousCloseCallback(result);\n          }\n          callback(result);\n          _this2.hot.view.render();\n        };\n      }\n      if (this.isWaiting()) {\n        return;\n      }\n      var shortcutManager = this.hot.getShortcutManager();\n      var editorContext = shortcutManager.getContext('editor');\n      editorContext.removeShortcutsByGroup(SHORTCUTS_GROUP_EDITOR);\n      editorContext.removeShortcutsByGroup(SHORTCUTS_GROUP_NAVIGATION);\n      if (this.state === EDITOR_STATE.VIRGIN) {\n        this.hot._registerTimeout(function () {\n          _this2._fireCallbacks(true);\n        });\n        return;\n      }\n      if (this.state === EDITOR_STATE.EDITING) {\n        if (restoreOriginalValue) {\n          this.cancelChanges();\n          this.hot.view.render();\n          return;\n        }\n        var value = this.getValue();\n        if (this.cellProperties.trimWhitespace) {\n          // We trim only string values\n          val = [[typeof value === 'string' ? String.prototype.trim.call(value || '') : value]];\n        } else {\n          val = [[value]];\n        }\n        this.state = EDITOR_STATE.WAITING;\n        this.saveValue(val, ctrlDown);\n        if (this.hot.getCellValidator(this.cellProperties)) {\n          this.hot.addHookOnce('postAfterValidate', function (result) {\n            _this2.state = EDITOR_STATE.FINISHED;\n            _this2.discardEditor(result);\n          });\n        } else {\n          this.state = EDITOR_STATE.FINISHED;\n          this.discardEditor(true);\n        }\n      }\n    }\n\n    /**\n     * Finishes editing without singout saving value.\n     */\n  }, {\n    key: \"cancelChanges\",\n    value: function cancelChanges() {\n      this.state = EDITOR_STATE.FINISHED;\n      this.discardEditor();\n    }\n\n    /**\n     * Verifies result of validation or closes editor if user's cancelled changes.\n     *\n     * @param {boolean|undefined} result If `false` and the cell using allowInvalid option,\n     *                                   then an editor won't be closed until validation is passed.\n     */\n  }, {\n    key: \"discardEditor\",\n    value: function discardEditor(result) {\n      if (this.state !== EDITOR_STATE.FINISHED) {\n        return;\n      }\n\n      // validator was defined and failed\n      if (result === false && this.cellProperties.allowInvalid !== true) {\n        this.hot.selectCell(this.row, this.col);\n        this.focus();\n        this.state = EDITOR_STATE.EDITING;\n        this._fireCallbacks(false);\n      } else {\n        this.close();\n        this._opened = false;\n        this._fullEditMode = false;\n        this.state = EDITOR_STATE.VIRGIN;\n        this._fireCallbacks(true);\n        var shortcutManager = this.hot.getShortcutManager();\n        shortcutManager.setActiveContextName('grid');\n      }\n    }\n\n    /**\n     * Switch editor into full edit mode. In this state navigation keys don't close editor. This mode is activated\n     * automatically after hit ENTER or F2 key on the cell or while editing cell press F2 key.\n     */\n  }, {\n    key: \"enableFullEditMode\",\n    value: function enableFullEditMode() {\n      this._fullEditMode = true;\n    }\n\n    /**\n     * Checks if editor is in full edit mode.\n     *\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isInFullEditMode\",\n    value: function isInFullEditMode() {\n      return this._fullEditMode;\n    }\n\n    /**\n     * Returns information whether the editor is open.\n     *\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isOpened\",\n    value: function isOpened() {\n      return this._opened;\n    }\n\n    /**\n     * Returns information whether the editor is waiting, eg.: for async validation.\n     *\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isWaiting\",\n    value: function isWaiting() {\n      return this.state === EDITOR_STATE.WAITING;\n    }\n\n    /* eslint-disable jsdoc/require-description-complete-sentence */\n    /**\n     * Gets the object that provides information about the edited cell size and its position\n     * relative to the table viewport.\n     *\n     * The rectangle has six integer properties:\n     *  - `top` The top position relative to the table viewport\n     *  - `start` The left (or right in RTL) position relative to the table viewport\n     *  - `width` The cell's current width;\n     *  - `maxWidth` The maximum cell's width after which the editor goes out of the table viewport\n     *  - `height` The cell's current height;\n     *  - `maxHeight` The maximum cell's height after which the editor goes out of the table viewport\n     *\n     * @returns {{top: number, start: number, width: number, maxWidth: number, height: number, maxHeight: number} | undefined}\n     */\n  }, {\n    key: \"getEditedCellRect\",\n    value: function getEditedCellRect() {\n      var _wtOverlays$getParent;\n      var TD = this.getEditedCell();\n\n      // TD is outside of the viewport.\n      if (!TD) {\n        return;\n      }\n      var _this$hot$view$_wt = this.hot.view._wt,\n        wtOverlays = _this$hot$view$_wt.wtOverlays,\n        wtViewport = _this$hot$view$_wt.wtViewport;\n      var rootWindow = this.hot.rootWindow;\n      var currentOffset = offset(TD);\n      var cellWidth = outerWidth(TD);\n      var containerOffset = offset(this.hot.rootElement);\n      var containerWidth = outerWidth(this.hot.rootElement);\n      var scrollableContainerTop = wtOverlays.topOverlay.holder;\n      var scrollableContainerLeft = wtOverlays.inlineStartOverlay.holder;\n      var containerScrollTop = scrollableContainerTop !== rootWindow ? scrollableContainerTop.scrollTop : 0;\n      var containerScrollLeft = scrollableContainerLeft !== rootWindow ? scrollableContainerLeft.scrollLeft : 0;\n      var gridMostRightPos = rootWindow.innerWidth - containerOffset.left - containerWidth;\n      var _ref2 = (_wtOverlays$getParent = wtOverlays.getParentOverlay(TD)) !== null && _wtOverlays$getParent !== void 0 ? _wtOverlays$getParent : this.hot.view._wt,\n        overlayTable = _ref2.wtTable;\n      var overlayName = overlayTable.name;\n      var scrollTop = ['master', 'inline_start'].includes(overlayName) ? containerScrollTop : 0;\n      var scrollLeft = ['master', 'top', 'bottom'].includes(overlayName) ? containerScrollLeft : 0;\n\n      // If colHeaders is disabled, cells in the first row have border-top\n      var editTopModifier = currentOffset.top === containerOffset.top ? 0 : 1;\n      var topPos = currentOffset.top - containerOffset.top - editTopModifier - scrollTop;\n      var inlineStartPos = 0;\n      if (this.hot.isRtl()) {\n        inlineStartPos = rootWindow.innerWidth - currentOffset.left - cellWidth - gridMostRightPos - 1 + scrollLeft;\n      } else {\n        inlineStartPos = currentOffset.left - containerOffset.left - 1 - scrollLeft;\n      }\n\n      // When the scrollable element is Window object then the editor position needs to be compensated\n      // by the overlays' position (position relative to the table viewport). In other cases, the overlay's\n      // position always returns 0.\n      if (['top', 'top_inline_start_corner'].includes(overlayName)) {\n        topPos += wtOverlays.topOverlay.getOverlayOffset();\n      }\n      if (['inline_start', 'top_inline_start_corner'].includes(overlayName)) {\n        inlineStartPos += Math.abs(wtOverlays.inlineStartOverlay.getOverlayOffset());\n      }\n      var hasColumnHeaders = this.hot.hasColHeaders();\n      var renderableRow = this.hot.rowIndexMapper.getRenderableFromVisualIndex(this.row);\n      var renderableColumn = this.hot.columnIndexMapper.getRenderableFromVisualIndex(this.col);\n      var nrOfRenderableRowIndexes = this.hot.rowIndexMapper.getRenderableIndexesLength();\n      var firstRowIndexOfTheBottomOverlay = nrOfRenderableRowIndexes - this.hot.view._wt.getSetting('fixedRowsBottom');\n      if (hasColumnHeaders && renderableRow <= 0 || renderableRow === firstRowIndexOfTheBottomOverlay) {\n        topPos += 1;\n      }\n      if (renderableColumn <= 0) {\n        inlineStartPos += 1;\n      }\n      var firstRowOffset = wtViewport.rowsRenderCalculator.startPosition;\n      var firstColumnOffset = wtViewport.columnsRenderCalculator.startPosition;\n      var horizontalScrollPosition = Math.abs(wtOverlays.inlineStartOverlay.getScrollPosition());\n      var verticalScrollPosition = wtOverlays.topOverlay.getScrollPosition();\n      var scrollbarWidth = getScrollbarWidth(this.hot.rootDocument);\n      var cellTopOffset = TD.offsetTop + firstRowOffset - verticalScrollPosition;\n      var cellStartOffset = 0;\n      if (this.hot.isRtl()) {\n        var cellOffset = TD.offsetLeft;\n        if (cellOffset >= 0) {\n          cellStartOffset = overlayTable.getWidth() - TD.offsetLeft;\n        } else {\n          // The `offsetLeft` returns negative values when the parent offset element has position relative\n          // (it happens when on the cell the selection is applied - the `area` CSS class).\n          // When it happens the `offsetLeft` value is calculated from the right edge of the parent element.\n          cellStartOffset = Math.abs(cellOffset);\n        }\n        cellStartOffset += firstColumnOffset - horizontalScrollPosition - cellWidth;\n      } else {\n        cellStartOffset = TD.offsetLeft + firstColumnOffset - horizontalScrollPosition;\n      }\n      var cellComputedStyle = getComputedStyle(this.TD, this.hot.rootWindow);\n      var borderPhysicalWidthProp = this.hot.isRtl() ? 'borderRightWidth' : 'borderLeftWidth';\n      var inlineStartBorderCompensation = parseInt(cellComputedStyle[borderPhysicalWidthProp], 10) > 0 ? 0 : 1;\n      var topBorderCompensation = parseInt(cellComputedStyle.borderTopWidth, 10) > 0 ? 0 : 1;\n      var width = outerWidth(TD) + inlineStartBorderCompensation;\n      var height = outerHeight(TD) + topBorderCompensation;\n      var actualVerticalScrollbarWidth = hasVerticalScrollbar(scrollableContainerTop) ? scrollbarWidth : 0;\n      var actualHorizontalScrollbarWidth = hasHorizontalScrollbar(scrollableContainerLeft) ? scrollbarWidth : 0;\n      var maxWidth = this.hot.view.maximumVisibleElementWidth(cellStartOffset) - actualVerticalScrollbarWidth + inlineStartBorderCompensation;\n      var maxHeight = Math.max(this.hot.view.maximumVisibleElementHeight(cellTopOffset) - actualHorizontalScrollbarWidth + topBorderCompensation, 23);\n      return {\n        top: topPos,\n        start: inlineStartPos,\n        height: height,\n        maxHeight: maxHeight,\n        width: width,\n        maxWidth: maxWidth\n      };\n    }\n    /* eslint-enable jsdoc/require-description-complete-sentence */\n\n    /**\n     * Gets className of the edited cell if exist.\n     *\n     * @returns {string}\n     */\n  }, {\n    key: \"getEditedCellsLayerClass\",\n    value: function getEditedCellsLayerClass() {\n      var editorSection = this.checkEditorSection();\n      switch (editorSection) {\n        case 'inline-start':\n          return 'ht_clone_left ht_clone_inline_start';\n        case 'bottom':\n          return 'ht_clone_bottom';\n        case 'bottom-inline-start-corner':\n          return 'ht_clone_bottom_left_corner ht_clone_bottom_inline_start_corner';\n        case 'top':\n          return 'ht_clone_top';\n        case 'top-inline-start-corner':\n          return 'ht_clone_top_left_corner ht_clone_top_inline_start_corner';\n        default:\n          return 'ht_clone_master';\n      }\n    }\n\n    /**\n     * Gets HTMLTableCellElement of the edited cell if exist.\n     *\n     * @returns {HTMLTableCellElement|null}\n     */\n  }, {\n    key: \"getEditedCell\",\n    value: function getEditedCell() {\n      return this.hot.getCell(this.row, this.col, true);\n    }\n\n    /**\n     * Returns name of the overlay, where editor is placed.\n     *\n     * @private\n     * @returns {string}\n     */\n  }, {\n    key: \"checkEditorSection\",\n    value: function checkEditorSection() {\n      var totalRows = this.hot.countRows();\n      var section = '';\n      if (this.row < this.hot.getSettings().fixedRowsTop) {\n        if (this.col < this.hot.getSettings().fixedColumnsStart) {\n          section = 'top-inline-start-corner';\n        } else {\n          section = 'top';\n        }\n      } else if (this.hot.getSettings().fixedRowsBottom && this.row >= totalRows - this.hot.getSettings().fixedRowsBottom) {\n        if (this.col < this.hot.getSettings().fixedColumnsStart) {\n          section = 'bottom-inline-start-corner';\n        } else {\n          section = 'bottom';\n        }\n      } else if (this.col < this.hot.getSettings().fixedColumnsStart) {\n        section = 'inline-start';\n      }\n      return section;\n    }\n  }], [{\n    key: \"EDITOR_TYPE\",\n    get: function get() {\n      return EDITOR_TYPE;\n    }\n  }]);\n  return BaseEditor;\n}();\nmixin(BaseEditor, hooksRefRegisterer);","map":{"version":3,"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","o","minLen","_arrayLikeToArray","n","Object","toString","call","slice","name","Array","from","test","len","length","arr2","_i","_s","_e","_x","_r","_arr","_n","_d","next","done","push","value","err","return","isArray","_inherits","subClass","superClass","create","writable","configurable","defineProperty","_setPrototypeOf","p","setPrototypeOf","bind","__proto__","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf","result","NewTarget","Reflect","construct","arguments","apply","_possibleConstructorReturn","self","_assertThisInitialized","ReferenceError","sham","Proxy","Boolean","valueOf","e","getPrototypeOf","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","enumerable","_toPropertyKey","key","_createClass","protoProps","staticProps","arg","_toPrimitive","String","input","hint","prim","toPrimitive","undefined","res","Number","isDefined","stringify","mixin","SHORTCUTS_GROUP_NAVIGATION","hooksRefRegisterer","getScrollbarWidth","offset","hasVerticalScrollbar","hasHorizontalScrollbar","outerWidth","outerHeight","getComputedStyle","EDITOR_TYPE","EDITOR_STATE","freeze","VIRGIN","EDITING","WAITING","FINISHED","SHORTCUTS_GROUP_EDITOR","BaseEditor","hot","state","_opened","_fullEditMode","_closeCallback","TD","row","col","prop","originalValue","cellProperties","init","_fireCallbacks","getValue","Error","setValue","open","close","prepare","td","extend","_this$constructor","Editor","_super","saveValue","ctrlDown","_this","visualRowFrom","visualColumnFrom","visualRowTo","visualColumnTo","selectedLast","getSelectedLast","Math","max","min","_ref","modifiedCellCoords","runHooks","_modifiedCellCoords","shortcutManager","getShortcutManager","editorContext","getContext","contextConfig","runOnlyIf","getSelected","group","isInFullEditMode","addShortcuts","keys","callback","selection","transformStart","getDirectionFactor","populateFromArray","beginEditing","newInitialValue","event","hotInstance","renderableRowIndex","rowIndexMapper","getRenderableFromVisualIndex","renderableColumnIndex","columnIndexMapper","view","scrollViewport","_createCellCoords","stringifiedInitialValue","focus","render","finishEditing","restoreOriginalValue","_this2","val","previousCloseCallback","isWaiting","removeShortcutsByGroup","_registerTimeout","cancelChanges","trimWhitespace","trim","getCellValidator","addHookOnce","discardEditor","allowInvalid","selectCell","setActiveContextName","enableFullEditMode","isOpened","getEditedCellRect","_wtOverlays$getParent","getEditedCell","_this$hot$view$_wt","_wt","wtOverlays","wtViewport","rootWindow","currentOffset","cellWidth","containerOffset","rootElement","containerWidth","scrollableContainerTop","topOverlay","holder","scrollableContainerLeft","inlineStartOverlay","containerScrollTop","scrollTop","containerScrollLeft","scrollLeft","gridMostRightPos","innerWidth","left","_ref2","getParentOverlay","overlayTable","wtTable","overlayName","includes","editTopModifier","top","topPos","inlineStartPos","isRtl","getOverlayOffset","abs","hasColumnHeaders","hasColHeaders","renderableRow","renderableColumn","nrOfRenderableRowIndexes","getRenderableIndexesLength","firstRowIndexOfTheBottomOverlay","getSetting","firstRowOffset","rowsRenderCalculator","startPosition","firstColumnOffset","columnsRenderCalculator","horizontalScrollPosition","getScrollPosition","verticalScrollPosition","scrollbarWidth","rootDocument","cellTopOffset","offsetTop","cellStartOffset","cellOffset","offsetLeft","getWidth","cellComputedStyle","borderPhysicalWidthProp","inlineStartBorderCompensation","parseInt","topBorderCompensation","borderTopWidth","width","height","actualVerticalScrollbarWidth","actualHorizontalScrollbarWidth","maxWidth","maximumVisibleElementWidth","maxHeight","maximumVisibleElementHeight","start","getEditedCellsLayerClass","editorSection","checkEditorSection","getCell","totalRows","countRows","section","getSettings","fixedRowsTop","fixedColumnsStart","fixedRowsBottom","get"],"sources":["/home/rstorey/wwwdev/Blucktool/node_modules/handsontable/editors/baseEditor/baseEditor.mjs"],"sourcesContent":["function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport \"core-js/modules/es.object.freeze.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.symbol.to-primitive.js\";\nimport \"core-js/modules/es.date.to-primitive.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.object.set-prototype-of.js\";\nimport \"core-js/modules/es.object.get-prototype-of.js\";\nimport \"core-js/modules/es.reflect.construct.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport { isDefined, stringify } from \"../../helpers/mixed.mjs\";\nimport { mixin } from \"../../helpers/object.mjs\";\nimport { SHORTCUTS_GROUP_NAVIGATION } from \"../../editorManager.mjs\";\nimport hooksRefRegisterer from \"../../mixins/hooksRefRegisterer.mjs\";\nimport { getScrollbarWidth, offset, hasVerticalScrollbar, hasHorizontalScrollbar, outerWidth, outerHeight, getComputedStyle } from \"../../helpers/dom/element.mjs\";\nexport var EDITOR_TYPE = 'base';\nexport var EDITOR_STATE = Object.freeze({\n  VIRGIN: 'STATE_VIRGIN',\n  // before editing\n  EDITING: 'STATE_EDITING',\n  WAITING: 'STATE_WAITING',\n  // waiting for async validation\n  FINISHED: 'STATE_FINISHED'\n});\nexport var SHORTCUTS_GROUP_EDITOR = 'baseEditor';\n\n/**\n * @class BaseEditor\n */\nexport var BaseEditor = /*#__PURE__*/function () {\n  /**\n   * @param {Handsontable} instance A reference to the source instance of the Handsontable.\n   */\n  function BaseEditor(instance) {\n    _classCallCheck(this, BaseEditor);\n    /**\n     * A reference to the source instance of the Handsontable.\n     *\n     * @type {Handsontable}\n     */\n    this.hot = instance;\n    /**\n     * A reference to the source instance of the Handsontable.\n     *\n     * @deprecated\n     *\n     * @type {Handsontable}\n     */\n    this.instance = instance;\n    /**\n     * Editor's state.\n     *\n     * @type {string}\n     */\n    this.state = EDITOR_STATE.VIRGIN;\n    /**\n     * Flag to store information about editor's opening status.\n     *\n     * @private\n     *\n     * @type {boolean}\n     */\n    this._opened = false;\n    /**\n     * Defines the editor's editing mode. When false, then an editor works in fast editing mode.\n     *\n     * @private\n     *\n     * @type {boolean}\n     */\n    this._fullEditMode = false;\n    /**\n     * Callback to call after closing editor.\n     *\n     * @type {Function}\n     */\n    this._closeCallback = null;\n    /**\n     * Currently rendered cell's TD element.\n     *\n     * @type {HTMLTableCellElement}\n     */\n    this.TD = null;\n    /**\n     * Visual row index.\n     *\n     * @type {number}\n     */\n    this.row = null;\n    /**\n     * Visual column index.\n     *\n     * @type {number}\n     */\n    this.col = null;\n    /**\n     * Column property name or a column index, if datasource is an array of arrays.\n     *\n     * @type {number|string}\n     */\n    this.prop = null;\n    /**\n     * Original cell's value.\n     *\n     * @type {*}\n     */\n    this.originalValue = null;\n    /**\n     * Object containing the cell's properties.\n     *\n     * @type {object}\n     */\n    this.cellProperties = null;\n    this.init();\n  }\n\n  /**\n   * Fires callback after closing editor.\n   *\n   * @private\n   * @param {boolean} result The editor value.\n   */\n  _createClass(BaseEditor, [{\n    key: \"_fireCallbacks\",\n    value: function _fireCallbacks(result) {\n      if (this._closeCallback) {\n        this._closeCallback(result);\n        this._closeCallback = null;\n      }\n    }\n\n    /**\n     * Initializes an editor's intance.\n     */\n  }, {\n    key: \"init\",\n    value: function init() {}\n\n    /**\n     * Required method to get current value from editable element.\n     */\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      throw Error('Editor getValue() method unimplemented');\n    }\n\n    /**\n     * Required method to set new value into editable element.\n     */\n  }, {\n    key: \"setValue\",\n    value: function setValue() {\n      throw Error('Editor setValue() method unimplemented');\n    }\n\n    /**\n     * Required method to open editor.\n     */\n  }, {\n    key: \"open\",\n    value: function open() {\n      throw Error('Editor open() method unimplemented');\n    }\n\n    /**\n     * Required method to close editor.\n     */\n  }, {\n    key: \"close\",\n    value: function close() {\n      throw Error('Editor close() method unimplemented');\n    }\n\n    /**\n     * Prepares editor's meta data.\n     *\n     * @param {number} row The visual row index.\n     * @param {number} col The visual column index.\n     * @param {number|string} prop The column property (passed when datasource is an array of objects).\n     * @param {HTMLTableCellElement} td The rendered cell element.\n     * @param {*} value The rendered value.\n     * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).\n     */\n  }, {\n    key: \"prepare\",\n    value: function prepare(row, col, prop, td, value, cellProperties) {\n      this.TD = td;\n      this.row = row;\n      this.col = col;\n      this.prop = prop;\n      this.originalValue = value;\n      this.cellProperties = cellProperties;\n      this.state = EDITOR_STATE.VIRGIN;\n    }\n\n    /**\n     * Fallback method to provide extendable editors in ES5.\n     *\n     * @returns {Function}\n     */\n  }, {\n    key: \"extend\",\n    value: function extend() {\n      return /*#__PURE__*/function (_this$constructor) {\n        _inherits(Editor, _this$constructor);\n        var _super = _createSuper(Editor);\n        function Editor() {\n          _classCallCheck(this, Editor);\n          return _super.apply(this, arguments);\n        }\n        return _createClass(Editor);\n      }(this.constructor);\n    }\n\n    /**\n     * Saves value from editor into data storage.\n     *\n     * @param {*} value The editor value.\n     * @param {boolean} ctrlDown If `true`, applies value to each cell in the last selected range.\n     */\n  }, {\n    key: \"saveValue\",\n    value: function saveValue(value, ctrlDown) {\n      var _this = this;\n      var visualRowFrom;\n      var visualColumnFrom;\n      var visualRowTo;\n      var visualColumnTo;\n\n      // if ctrl+enter and multiple cells selected, behave like Excel (finish editing and apply to all cells)\n      if (ctrlDown) {\n        var selectedLast = this.hot.getSelectedLast();\n        visualRowFrom = Math.max(Math.min(selectedLast[0], selectedLast[2]), 0); // Math.max eliminate headers coords.\n        visualColumnFrom = Math.max(Math.min(selectedLast[1], selectedLast[3]), 0); // Math.max eliminate headers coords.\n        visualRowTo = Math.max(selectedLast[0], selectedLast[2]);\n        visualColumnTo = Math.max(selectedLast[1], selectedLast[3]);\n      } else {\n        var _ref = [this.row, this.col, null, null];\n        visualRowFrom = _ref[0];\n        visualColumnFrom = _ref[1];\n        visualRowTo = _ref[2];\n        visualColumnTo = _ref[3];\n      }\n      var modifiedCellCoords = this.hot.runHooks('modifyGetCellCoords', visualRowFrom, visualColumnFrom);\n      if (Array.isArray(modifiedCellCoords)) {\n        var _modifiedCellCoords = _slicedToArray(modifiedCellCoords, 2);\n        visualRowFrom = _modifiedCellCoords[0];\n        visualColumnFrom = _modifiedCellCoords[1];\n      }\n      var shortcutManager = this.hot.getShortcutManager();\n      var editorContext = shortcutManager.getContext('editor');\n      var contextConfig = {\n        runOnlyIf: function runOnlyIf() {\n          return isDefined(_this.hot.getSelected());\n        },\n        group: SHORTCUTS_GROUP_EDITOR\n      };\n      if (this.isInFullEditMode()) {\n        editorContext.addShortcuts([{\n          keys: [['ArrowUp']],\n          callback: function callback() {\n            _this.hot.selection.transformStart(-1, 0);\n          }\n        }, {\n          keys: [['ArrowDown']],\n          callback: function callback() {\n            _this.hot.selection.transformStart(1, 0);\n          }\n        }, {\n          keys: [['ArrowLeft']],\n          callback: function callback() {\n            _this.hot.selection.transformStart(0, -1 * _this.hot.getDirectionFactor());\n          }\n        }, {\n          keys: [['ArrowRight']],\n          callback: function callback() {\n            _this.hot.selection.transformStart(0, _this.hot.getDirectionFactor());\n          }\n        }], contextConfig);\n      }\n\n      // Saving values using the modified coordinates.\n      this.hot.populateFromArray(visualRowFrom, visualColumnFrom, value, visualRowTo, visualColumnTo, 'edit');\n    }\n\n    /**\n     * Begins editing on a highlighted cell and hides fillHandle corner if was present.\n     *\n     * @param {*} newInitialValue The initial editor value.\n     * @param {Event} event The keyboard event object.\n     */\n  }, {\n    key: \"beginEditing\",\n    value: function beginEditing(newInitialValue, event) {\n      if (this.state !== EDITOR_STATE.VIRGIN) {\n        return;\n      }\n      var hotInstance = this.hot;\n      // We have to convert visual indexes into renderable indexes\n      // due to hidden columns don't participate in the rendering process\n      var renderableRowIndex = hotInstance.rowIndexMapper.getRenderableFromVisualIndex(this.row);\n      var renderableColumnIndex = hotInstance.columnIndexMapper.getRenderableFromVisualIndex(this.col);\n      hotInstance.view.scrollViewport(hotInstance._createCellCoords(renderableRowIndex, renderableColumnIndex));\n      this.state = EDITOR_STATE.EDITING;\n\n      // Set the editor value only in the full edit mode. In other mode the focusable element has to be empty,\n      // otherwise IME (editor for Asia users) doesn't work.\n      if (this.isInFullEditMode()) {\n        var stringifiedInitialValue = typeof newInitialValue === 'string' ? newInitialValue : stringify(this.originalValue);\n        this.setValue(stringifiedInitialValue);\n      }\n      this.open(event);\n      this._opened = true;\n      this.focus();\n\n      // only rerender the selections (FillHandle should disappear when beginEditing is triggered)\n      hotInstance.view.render();\n      hotInstance.runHooks('afterBeginEditing', this.row, this.col);\n    }\n\n    /**\n     * Finishes editing and start saving or restoring process for editing cell or last selected range.\n     *\n     * @param {boolean} restoreOriginalValue If true, then closes editor without saving value from the editor into a cell.\n     * @param {boolean} ctrlDown If true, then saveValue will save editor's value to each cell in the last selected range.\n     * @param {Function} callback The callback function, fired after editor closing.\n     */\n  }, {\n    key: \"finishEditing\",\n    value: function finishEditing(restoreOriginalValue, ctrlDown, callback) {\n      var _this2 = this;\n      var val;\n      if (callback) {\n        var previousCloseCallback = this._closeCallback;\n        this._closeCallback = function (result) {\n          if (previousCloseCallback) {\n            previousCloseCallback(result);\n          }\n          callback(result);\n          _this2.hot.view.render();\n        };\n      }\n      if (this.isWaiting()) {\n        return;\n      }\n      var shortcutManager = this.hot.getShortcutManager();\n      var editorContext = shortcutManager.getContext('editor');\n      editorContext.removeShortcutsByGroup(SHORTCUTS_GROUP_EDITOR);\n      editorContext.removeShortcutsByGroup(SHORTCUTS_GROUP_NAVIGATION);\n      if (this.state === EDITOR_STATE.VIRGIN) {\n        this.hot._registerTimeout(function () {\n          _this2._fireCallbacks(true);\n        });\n        return;\n      }\n      if (this.state === EDITOR_STATE.EDITING) {\n        if (restoreOriginalValue) {\n          this.cancelChanges();\n          this.hot.view.render();\n          return;\n        }\n        var value = this.getValue();\n        if (this.cellProperties.trimWhitespace) {\n          // We trim only string values\n          val = [[typeof value === 'string' ? String.prototype.trim.call(value || '') : value]];\n        } else {\n          val = [[value]];\n        }\n        this.state = EDITOR_STATE.WAITING;\n        this.saveValue(val, ctrlDown);\n        if (this.hot.getCellValidator(this.cellProperties)) {\n          this.hot.addHookOnce('postAfterValidate', function (result) {\n            _this2.state = EDITOR_STATE.FINISHED;\n            _this2.discardEditor(result);\n          });\n        } else {\n          this.state = EDITOR_STATE.FINISHED;\n          this.discardEditor(true);\n        }\n      }\n    }\n\n    /**\n     * Finishes editing without singout saving value.\n     */\n  }, {\n    key: \"cancelChanges\",\n    value: function cancelChanges() {\n      this.state = EDITOR_STATE.FINISHED;\n      this.discardEditor();\n    }\n\n    /**\n     * Verifies result of validation or closes editor if user's cancelled changes.\n     *\n     * @param {boolean|undefined} result If `false` and the cell using allowInvalid option,\n     *                                   then an editor won't be closed until validation is passed.\n     */\n  }, {\n    key: \"discardEditor\",\n    value: function discardEditor(result) {\n      if (this.state !== EDITOR_STATE.FINISHED) {\n        return;\n      }\n\n      // validator was defined and failed\n      if (result === false && this.cellProperties.allowInvalid !== true) {\n        this.hot.selectCell(this.row, this.col);\n        this.focus();\n        this.state = EDITOR_STATE.EDITING;\n        this._fireCallbacks(false);\n      } else {\n        this.close();\n        this._opened = false;\n        this._fullEditMode = false;\n        this.state = EDITOR_STATE.VIRGIN;\n        this._fireCallbacks(true);\n        var shortcutManager = this.hot.getShortcutManager();\n        shortcutManager.setActiveContextName('grid');\n      }\n    }\n\n    /**\n     * Switch editor into full edit mode. In this state navigation keys don't close editor. This mode is activated\n     * automatically after hit ENTER or F2 key on the cell or while editing cell press F2 key.\n     */\n  }, {\n    key: \"enableFullEditMode\",\n    value: function enableFullEditMode() {\n      this._fullEditMode = true;\n    }\n\n    /**\n     * Checks if editor is in full edit mode.\n     *\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isInFullEditMode\",\n    value: function isInFullEditMode() {\n      return this._fullEditMode;\n    }\n\n    /**\n     * Returns information whether the editor is open.\n     *\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isOpened\",\n    value: function isOpened() {\n      return this._opened;\n    }\n\n    /**\n     * Returns information whether the editor is waiting, eg.: for async validation.\n     *\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isWaiting\",\n    value: function isWaiting() {\n      return this.state === EDITOR_STATE.WAITING;\n    }\n\n    /* eslint-disable jsdoc/require-description-complete-sentence */\n    /**\n     * Gets the object that provides information about the edited cell size and its position\n     * relative to the table viewport.\n     *\n     * The rectangle has six integer properties:\n     *  - `top` The top position relative to the table viewport\n     *  - `start` The left (or right in RTL) position relative to the table viewport\n     *  - `width` The cell's current width;\n     *  - `maxWidth` The maximum cell's width after which the editor goes out of the table viewport\n     *  - `height` The cell's current height;\n     *  - `maxHeight` The maximum cell's height after which the editor goes out of the table viewport\n     *\n     * @returns {{top: number, start: number, width: number, maxWidth: number, height: number, maxHeight: number} | undefined}\n     */\n  }, {\n    key: \"getEditedCellRect\",\n    value: function getEditedCellRect() {\n      var _wtOverlays$getParent;\n      var TD = this.getEditedCell();\n\n      // TD is outside of the viewport.\n      if (!TD) {\n        return;\n      }\n      var _this$hot$view$_wt = this.hot.view._wt,\n        wtOverlays = _this$hot$view$_wt.wtOverlays,\n        wtViewport = _this$hot$view$_wt.wtViewport;\n      var rootWindow = this.hot.rootWindow;\n      var currentOffset = offset(TD);\n      var cellWidth = outerWidth(TD);\n      var containerOffset = offset(this.hot.rootElement);\n      var containerWidth = outerWidth(this.hot.rootElement);\n      var scrollableContainerTop = wtOverlays.topOverlay.holder;\n      var scrollableContainerLeft = wtOverlays.inlineStartOverlay.holder;\n      var containerScrollTop = scrollableContainerTop !== rootWindow ? scrollableContainerTop.scrollTop : 0;\n      var containerScrollLeft = scrollableContainerLeft !== rootWindow ? scrollableContainerLeft.scrollLeft : 0;\n      var gridMostRightPos = rootWindow.innerWidth - containerOffset.left - containerWidth;\n      var _ref2 = (_wtOverlays$getParent = wtOverlays.getParentOverlay(TD)) !== null && _wtOverlays$getParent !== void 0 ? _wtOverlays$getParent : this.hot.view._wt,\n        overlayTable = _ref2.wtTable;\n      var overlayName = overlayTable.name;\n      var scrollTop = ['master', 'inline_start'].includes(overlayName) ? containerScrollTop : 0;\n      var scrollLeft = ['master', 'top', 'bottom'].includes(overlayName) ? containerScrollLeft : 0;\n\n      // If colHeaders is disabled, cells in the first row have border-top\n      var editTopModifier = currentOffset.top === containerOffset.top ? 0 : 1;\n      var topPos = currentOffset.top - containerOffset.top - editTopModifier - scrollTop;\n      var inlineStartPos = 0;\n      if (this.hot.isRtl()) {\n        inlineStartPos = rootWindow.innerWidth - currentOffset.left - cellWidth - gridMostRightPos - 1 + scrollLeft;\n      } else {\n        inlineStartPos = currentOffset.left - containerOffset.left - 1 - scrollLeft;\n      }\n\n      // When the scrollable element is Window object then the editor position needs to be compensated\n      // by the overlays' position (position relative to the table viewport). In other cases, the overlay's\n      // position always returns 0.\n      if (['top', 'top_inline_start_corner'].includes(overlayName)) {\n        topPos += wtOverlays.topOverlay.getOverlayOffset();\n      }\n      if (['inline_start', 'top_inline_start_corner'].includes(overlayName)) {\n        inlineStartPos += Math.abs(wtOverlays.inlineStartOverlay.getOverlayOffset());\n      }\n      var hasColumnHeaders = this.hot.hasColHeaders();\n      var renderableRow = this.hot.rowIndexMapper.getRenderableFromVisualIndex(this.row);\n      var renderableColumn = this.hot.columnIndexMapper.getRenderableFromVisualIndex(this.col);\n      var nrOfRenderableRowIndexes = this.hot.rowIndexMapper.getRenderableIndexesLength();\n      var firstRowIndexOfTheBottomOverlay = nrOfRenderableRowIndexes - this.hot.view._wt.getSetting('fixedRowsBottom');\n      if (hasColumnHeaders && renderableRow <= 0 || renderableRow === firstRowIndexOfTheBottomOverlay) {\n        topPos += 1;\n      }\n      if (renderableColumn <= 0) {\n        inlineStartPos += 1;\n      }\n      var firstRowOffset = wtViewport.rowsRenderCalculator.startPosition;\n      var firstColumnOffset = wtViewport.columnsRenderCalculator.startPosition;\n      var horizontalScrollPosition = Math.abs(wtOverlays.inlineStartOverlay.getScrollPosition());\n      var verticalScrollPosition = wtOverlays.topOverlay.getScrollPosition();\n      var scrollbarWidth = getScrollbarWidth(this.hot.rootDocument);\n      var cellTopOffset = TD.offsetTop + firstRowOffset - verticalScrollPosition;\n      var cellStartOffset = 0;\n      if (this.hot.isRtl()) {\n        var cellOffset = TD.offsetLeft;\n        if (cellOffset >= 0) {\n          cellStartOffset = overlayTable.getWidth() - TD.offsetLeft;\n        } else {\n          // The `offsetLeft` returns negative values when the parent offset element has position relative\n          // (it happens when on the cell the selection is applied - the `area` CSS class).\n          // When it happens the `offsetLeft` value is calculated from the right edge of the parent element.\n          cellStartOffset = Math.abs(cellOffset);\n        }\n        cellStartOffset += firstColumnOffset - horizontalScrollPosition - cellWidth;\n      } else {\n        cellStartOffset = TD.offsetLeft + firstColumnOffset - horizontalScrollPosition;\n      }\n      var cellComputedStyle = getComputedStyle(this.TD, this.hot.rootWindow);\n      var borderPhysicalWidthProp = this.hot.isRtl() ? 'borderRightWidth' : 'borderLeftWidth';\n      var inlineStartBorderCompensation = parseInt(cellComputedStyle[borderPhysicalWidthProp], 10) > 0 ? 0 : 1;\n      var topBorderCompensation = parseInt(cellComputedStyle.borderTopWidth, 10) > 0 ? 0 : 1;\n      var width = outerWidth(TD) + inlineStartBorderCompensation;\n      var height = outerHeight(TD) + topBorderCompensation;\n      var actualVerticalScrollbarWidth = hasVerticalScrollbar(scrollableContainerTop) ? scrollbarWidth : 0;\n      var actualHorizontalScrollbarWidth = hasHorizontalScrollbar(scrollableContainerLeft) ? scrollbarWidth : 0;\n      var maxWidth = this.hot.view.maximumVisibleElementWidth(cellStartOffset) - actualVerticalScrollbarWidth + inlineStartBorderCompensation;\n      var maxHeight = Math.max(this.hot.view.maximumVisibleElementHeight(cellTopOffset) - actualHorizontalScrollbarWidth + topBorderCompensation, 23);\n      return {\n        top: topPos,\n        start: inlineStartPos,\n        height: height,\n        maxHeight: maxHeight,\n        width: width,\n        maxWidth: maxWidth\n      };\n    }\n    /* eslint-enable jsdoc/require-description-complete-sentence */\n\n    /**\n     * Gets className of the edited cell if exist.\n     *\n     * @returns {string}\n     */\n  }, {\n    key: \"getEditedCellsLayerClass\",\n    value: function getEditedCellsLayerClass() {\n      var editorSection = this.checkEditorSection();\n      switch (editorSection) {\n        case 'inline-start':\n          return 'ht_clone_left ht_clone_inline_start';\n        case 'bottom':\n          return 'ht_clone_bottom';\n        case 'bottom-inline-start-corner':\n          return 'ht_clone_bottom_left_corner ht_clone_bottom_inline_start_corner';\n        case 'top':\n          return 'ht_clone_top';\n        case 'top-inline-start-corner':\n          return 'ht_clone_top_left_corner ht_clone_top_inline_start_corner';\n        default:\n          return 'ht_clone_master';\n      }\n    }\n\n    /**\n     * Gets HTMLTableCellElement of the edited cell if exist.\n     *\n     * @returns {HTMLTableCellElement|null}\n     */\n  }, {\n    key: \"getEditedCell\",\n    value: function getEditedCell() {\n      return this.hot.getCell(this.row, this.col, true);\n    }\n\n    /**\n     * Returns name of the overlay, where editor is placed.\n     *\n     * @private\n     * @returns {string}\n     */\n  }, {\n    key: \"checkEditorSection\",\n    value: function checkEditorSection() {\n      var totalRows = this.hot.countRows();\n      var section = '';\n      if (this.row < this.hot.getSettings().fixedRowsTop) {\n        if (this.col < this.hot.getSettings().fixedColumnsStart) {\n          section = 'top-inline-start-corner';\n        } else {\n          section = 'top';\n        }\n      } else if (this.hot.getSettings().fixedRowsBottom && this.row >= totalRows - this.hot.getSettings().fixedRowsBottom) {\n        if (this.col < this.hot.getSettings().fixedColumnsStart) {\n          section = 'bottom-inline-start-corner';\n        } else {\n          section = 'bottom';\n        }\n      } else if (this.col < this.hot.getSettings().fixedColumnsStart) {\n        section = 'inline-start';\n      }\n      return section;\n    }\n  }], [{\n    key: \"EDITOR_TYPE\",\n    get: function get() {\n      return EDITOR_TYPE;\n    }\n  }]);\n  return BaseEditor;\n}();\nmixin(BaseEditor, hooksRefRegisterer);"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}