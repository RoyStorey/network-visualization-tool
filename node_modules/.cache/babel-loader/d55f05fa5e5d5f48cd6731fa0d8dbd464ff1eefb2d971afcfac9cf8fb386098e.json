{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nimport { createObjectPropListener, getProperty, isObject, objectEach, setProperty } from \"../helpers/object.mjs\";\nimport { countFirstRowKeys as _countFirstRowKeys } from \"../helpers/data.mjs\";\nimport { arrayEach } from \"../helpers/array.mjs\";\nimport { rangeEach } from \"../helpers/number.mjs\";\nimport { isFunction } from \"../helpers/function.mjs\";\n/**\n * @class DataSource\n * @private\n */\nvar DataSource = /*#__PURE__*/function () {\n  function DataSource(hotInstance) {\n    var dataSource = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    _classCallCheck(this, DataSource);\n    /**\n     * Instance of Handsontable.\n     *\n     * @type {Handsontable}\n     */\n    this.hot = hotInstance;\n    /**\n     * Data source.\n     *\n     * @type {Array}\n     */\n    this.data = dataSource;\n    /**\n     * Type of data source.\n     *\n     * @type {string}\n     * @default 'array'\n     */\n    this.dataType = 'array';\n    this.colToProp = function () {};\n    this.propToCol = function () {};\n  }\n\n  /**\n   * Run the `modifyRowData` hook and return either the modified or the source data for the provided row.\n   *\n   * @private\n   * @param {number} rowIndex Row index.\n   * @returns {Array|object} Source or modified row of data.\n   */\n  _createClass(DataSource, [{\n    key: \"modifyRowData\",\n    value: function modifyRowData(rowIndex) {\n      var modifyRowData;\n      if (this.hot.hasHook('modifyRowData')) {\n        modifyRowData = this.hot.runHooks('modifyRowData', rowIndex);\n      }\n      return modifyRowData !== void 0 && !Number.isInteger(modifyRowData) ? modifyRowData : this.data[rowIndex];\n    }\n\n    /**\n     * Get all data.\n     *\n     * @param {boolean} [toArray=false] If `true` return source data as an array of arrays even when source data was provided\n     *                                  in another format.\n     * @returns {Array}\n     */\n  }, {\n    key: \"getData\",\n    value: function getData() {\n      var toArray = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      if (!this.data || this.data.length === 0) {\n        return this.data;\n      }\n      return this.getByRange(null, null, toArray);\n    }\n\n    /**\n     * Set new data source.\n     *\n     * @param {Array} data The new data.\n     */\n  }, {\n    key: \"setData\",\n    value: function setData(data) {\n      this.data = data;\n    }\n\n    /**\n     * Returns array of column values from the data source. `column` is the index of the row in the data source.\n     *\n     * @param {number} column Visual column index.\n     * @returns {Array}\n     */\n  }, {\n    key: \"getAtColumn\",\n    value: function getAtColumn(column) {\n      var _this = this;\n      var result = [];\n      arrayEach(this.data, function (row, rowIndex) {\n        var value = _this.getAtCell(rowIndex, column);\n        result.push(value);\n      });\n      return result;\n    }\n\n    /**\n     * Returns a single row of the data or a subset of its columns. If a column range or `toArray` arguments are provided, it\n     * operates only on the columns declared by the `columns` setting or the data schema.\n     *\n     * @param {number} row Physical row index.\n     * @param {number} [startColumn] Starting index for the column range (optional).\n     * @param {number} [endColumn] Ending index for the column range (optional).\n     * @param {boolean} [toArray=false] `true` if the returned value should be forced to be presented as an array.\n     * @returns {Array|object}\n     */\n  }, {\n    key: \"getAtRow\",\n    value: function getAtRow(row, startColumn, endColumn) {\n      var _this2 = this;\n      var toArray = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var getAllProps = startColumn === void 0 && endColumn === void 0;\n      var dataRow = null;\n      var newDataRow = null;\n      dataRow = this.modifyRowData(row);\n      if (Array.isArray(dataRow)) {\n        newDataRow = [];\n        if (getAllProps) {\n          dataRow.forEach(function (cell, column) {\n            newDataRow[column] = _this2.getAtPhysicalCell(row, column, dataRow);\n          });\n        } else {\n          // Only the columns from the provided range\n          rangeEach(startColumn, endColumn, function (column) {\n            newDataRow[column - startColumn] = _this2.getAtPhysicalCell(row, column, dataRow);\n          });\n        }\n      } else if (isObject(dataRow) || isFunction(dataRow)) {\n        if (toArray) {\n          newDataRow = [];\n        } else {\n          newDataRow = {};\n        }\n        if (!getAllProps || toArray) {\n          var rangeStart = 0;\n          var rangeEnd = this.countFirstRowKeys() - 1;\n          rangeEach(rangeStart, rangeEnd, function (column) {\n            var prop = _this2.colToProp(column);\n            if (column >= (startColumn || rangeStart) && column <= (endColumn || rangeEnd) && !Number.isInteger(prop)) {\n              var cellValue = _this2.getAtPhysicalCell(row, prop, dataRow);\n              if (toArray) {\n                newDataRow.push(cellValue);\n              } else {\n                setProperty(newDataRow, prop, cellValue);\n              }\n            }\n          });\n        } else {\n          objectEach(dataRow, function (value, prop) {\n            setProperty(newDataRow, prop, _this2.getAtPhysicalCell(row, prop, dataRow));\n          });\n        }\n      }\n      return newDataRow;\n    }\n\n    /**\n     * Set the provided value in the source data set at the provided coordinates.\n     *\n     * @param {number} row Physical row index.\n     * @param {number|string} column Property name / physical column index.\n     * @param {*} value The value to be set at the provided coordinates.\n     */\n  }, {\n    key: \"setAtCell\",\n    value: function setAtCell(row, column, value) {\n      if (row >= this.countRows() || column >= this.countFirstRowKeys()) {\n        // Not enough rows and/or columns.\n        return;\n      }\n      if (this.hot.hasHook('modifySourceData')) {\n        var valueHolder = createObjectPropListener(value);\n        this.hot.runHooks('modifySourceData', row, this.propToCol(column), valueHolder, 'set');\n        if (valueHolder.isTouched()) {\n          value = valueHolder.value;\n        }\n      }\n      if (!Number.isInteger(column)) {\n        // column argument is the prop name\n        setProperty(this.data[row], column, value);\n      } else {\n        this.data[row][column] = value;\n      }\n    }\n\n    /**\n     * Get data from the source data set using the physical indexes.\n     *\n     * @private\n     * @param {number} row Physical row index.\n     * @param {string|number|Function} column Physical column index / property / function.\n     * @param {Array|object} dataRow A representation of a data row.\n     * @returns {*} Value at the provided coordinates.\n     */\n  }, {\n    key: \"getAtPhysicalCell\",\n    value: function getAtPhysicalCell(row, column, dataRow) {\n      var result = null;\n      if (dataRow) {\n        if (typeof column === 'string') {\n          result = getProperty(dataRow, column);\n        } else if (typeof column === 'function') {\n          result = column(dataRow);\n        } else {\n          result = dataRow[column];\n        }\n      }\n      if (this.hot.hasHook('modifySourceData')) {\n        var valueHolder = createObjectPropListener(result);\n        this.hot.runHooks('modifySourceData', row, this.colToProp(column), valueHolder, 'get');\n        if (valueHolder.isTouched()) {\n          result = valueHolder.value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Returns a single value from the data.\n     *\n     * @param {number} row Physical row index.\n     * @param {number} column Visual column index.\n     * @returns {*}\n     */\n  }, {\n    key: \"getAtCell\",\n    value: function getAtCell(row, column) {\n      var dataRow = this.modifyRowData(row);\n      return this.getAtPhysicalCell(row, this.colToProp(column), dataRow);\n    }\n\n    /**\n     * Returns source data by passed range.\n     *\n     * @param {object} [start] Object with physical `row` and `col` keys (or visual column index, if data type is an array of objects).\n     * @param {object} [end] Object with physical `row` and `col` keys (or visual column index, if data type is an array of objects).\n     * @param {boolean} [toArray=false] If `true` return source data as an array of arrays even when source data was provided\n     *                                  in another format.\n     * @returns {Array}\n     */\n  }, {\n    key: \"getByRange\",\n    value: function getByRange() {\n      var _this3 = this;\n      var start = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var end = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var toArray = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var getAllProps = false;\n      var startRow = null;\n      var startCol = null;\n      var endRow = null;\n      var endCol = null;\n      if (start === null || end === null) {\n        getAllProps = true;\n        startRow = 0;\n        endRow = this.countRows() - 1;\n      } else {\n        startRow = Math.min(start.row, end.row);\n        startCol = Math.min(start.col, end.col);\n        endRow = Math.max(start.row, end.row);\n        endCol = Math.max(start.col, end.col);\n      }\n      var result = [];\n      rangeEach(startRow, endRow, function (currentRow) {\n        result.push(getAllProps ? _this3.getAtRow(currentRow, void 0, void 0, toArray) : _this3.getAtRow(currentRow, startCol, endCol, toArray));\n      });\n      return result;\n    }\n\n    /**\n     * Count number of rows.\n     *\n     * @returns {number}\n     */\n  }, {\n    key: \"countRows\",\n    value: function countRows() {\n      if (this.hot.hasHook('modifySourceLength')) {\n        var modifiedSourceLength = this.hot.runHooks('modifySourceLength');\n        if (Number.isInteger(modifiedSourceLength)) {\n          return modifiedSourceLength;\n        }\n      }\n      return this.data.length;\n    }\n\n    /**\n     * Count number of columns.\n     *\n     * @returns {number}\n     */\n  }, {\n    key: \"countFirstRowKeys\",\n    value: function countFirstRowKeys() {\n      return _countFirstRowKeys(this.data);\n    }\n\n    /**\n     * Destroy instance.\n     */\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.data = null;\n      this.hot = null;\n    }\n  }]);\n  return DataSource;\n}();\nexport default DataSource;","map":{"version":3,"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","_toPropertyKey","key","_createClass","protoProps","staticProps","arg","_toPrimitive","String","input","hint","prim","toPrimitive","undefined","res","call","Number","createObjectPropListener","getProperty","isObject","objectEach","setProperty","countFirstRowKeys","_countFirstRowKeys","arrayEach","rangeEach","isFunction","DataSource","hotInstance","dataSource","arguments","hot","data","dataType","colToProp","propToCol","value","modifyRowData","rowIndex","hasHook","runHooks","isInteger","getData","toArray","getByRange","setData","getAtColumn","column","_this","result","row","getAtCell","push","getAtRow","startColumn","endColumn","_this2","getAllProps","dataRow","newDataRow","Array","isArray","forEach","cell","getAtPhysicalCell","rangeStart","rangeEnd","prop","cellValue","setAtCell","countRows","valueHolder","isTouched","_this3","start","end","startRow","startCol","endRow","endCol","Math","min","col","max","currentRow","modifiedSourceLength","destroy"],"sources":["/home/rstorey/wwwdev/Blucktool/node_modules/handsontable/dataMap/dataSource.mjs"],"sourcesContent":["function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nimport \"core-js/modules/es.number.is-integer.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.symbol.to-primitive.js\";\nimport \"core-js/modules/es.date.to-primitive.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport { createObjectPropListener, getProperty, isObject, objectEach, setProperty } from \"../helpers/object.mjs\";\nimport { countFirstRowKeys as _countFirstRowKeys } from \"../helpers/data.mjs\";\nimport { arrayEach } from \"../helpers/array.mjs\";\nimport { rangeEach } from \"../helpers/number.mjs\";\nimport { isFunction } from \"../helpers/function.mjs\";\n/**\n * @class DataSource\n * @private\n */\nvar DataSource = /*#__PURE__*/function () {\n  function DataSource(hotInstance) {\n    var dataSource = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    _classCallCheck(this, DataSource);\n    /**\n     * Instance of Handsontable.\n     *\n     * @type {Handsontable}\n     */\n    this.hot = hotInstance;\n    /**\n     * Data source.\n     *\n     * @type {Array}\n     */\n    this.data = dataSource;\n    /**\n     * Type of data source.\n     *\n     * @type {string}\n     * @default 'array'\n     */\n    this.dataType = 'array';\n    this.colToProp = function () {};\n    this.propToCol = function () {};\n  }\n\n  /**\n   * Run the `modifyRowData` hook and return either the modified or the source data for the provided row.\n   *\n   * @private\n   * @param {number} rowIndex Row index.\n   * @returns {Array|object} Source or modified row of data.\n   */\n  _createClass(DataSource, [{\n    key: \"modifyRowData\",\n    value: function modifyRowData(rowIndex) {\n      var modifyRowData;\n      if (this.hot.hasHook('modifyRowData')) {\n        modifyRowData = this.hot.runHooks('modifyRowData', rowIndex);\n      }\n      return modifyRowData !== void 0 && !Number.isInteger(modifyRowData) ? modifyRowData : this.data[rowIndex];\n    }\n\n    /**\n     * Get all data.\n     *\n     * @param {boolean} [toArray=false] If `true` return source data as an array of arrays even when source data was provided\n     *                                  in another format.\n     * @returns {Array}\n     */\n  }, {\n    key: \"getData\",\n    value: function getData() {\n      var toArray = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      if (!this.data || this.data.length === 0) {\n        return this.data;\n      }\n      return this.getByRange(null, null, toArray);\n    }\n\n    /**\n     * Set new data source.\n     *\n     * @param {Array} data The new data.\n     */\n  }, {\n    key: \"setData\",\n    value: function setData(data) {\n      this.data = data;\n    }\n\n    /**\n     * Returns array of column values from the data source. `column` is the index of the row in the data source.\n     *\n     * @param {number} column Visual column index.\n     * @returns {Array}\n     */\n  }, {\n    key: \"getAtColumn\",\n    value: function getAtColumn(column) {\n      var _this = this;\n      var result = [];\n      arrayEach(this.data, function (row, rowIndex) {\n        var value = _this.getAtCell(rowIndex, column);\n        result.push(value);\n      });\n      return result;\n    }\n\n    /**\n     * Returns a single row of the data or a subset of its columns. If a column range or `toArray` arguments are provided, it\n     * operates only on the columns declared by the `columns` setting or the data schema.\n     *\n     * @param {number} row Physical row index.\n     * @param {number} [startColumn] Starting index for the column range (optional).\n     * @param {number} [endColumn] Ending index for the column range (optional).\n     * @param {boolean} [toArray=false] `true` if the returned value should be forced to be presented as an array.\n     * @returns {Array|object}\n     */\n  }, {\n    key: \"getAtRow\",\n    value: function getAtRow(row, startColumn, endColumn) {\n      var _this2 = this;\n      var toArray = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var getAllProps = startColumn === void 0 && endColumn === void 0;\n      var dataRow = null;\n      var newDataRow = null;\n      dataRow = this.modifyRowData(row);\n      if (Array.isArray(dataRow)) {\n        newDataRow = [];\n        if (getAllProps) {\n          dataRow.forEach(function (cell, column) {\n            newDataRow[column] = _this2.getAtPhysicalCell(row, column, dataRow);\n          });\n        } else {\n          // Only the columns from the provided range\n          rangeEach(startColumn, endColumn, function (column) {\n            newDataRow[column - startColumn] = _this2.getAtPhysicalCell(row, column, dataRow);\n          });\n        }\n      } else if (isObject(dataRow) || isFunction(dataRow)) {\n        if (toArray) {\n          newDataRow = [];\n        } else {\n          newDataRow = {};\n        }\n        if (!getAllProps || toArray) {\n          var rangeStart = 0;\n          var rangeEnd = this.countFirstRowKeys() - 1;\n          rangeEach(rangeStart, rangeEnd, function (column) {\n            var prop = _this2.colToProp(column);\n            if (column >= (startColumn || rangeStart) && column <= (endColumn || rangeEnd) && !Number.isInteger(prop)) {\n              var cellValue = _this2.getAtPhysicalCell(row, prop, dataRow);\n              if (toArray) {\n                newDataRow.push(cellValue);\n              } else {\n                setProperty(newDataRow, prop, cellValue);\n              }\n            }\n          });\n        } else {\n          objectEach(dataRow, function (value, prop) {\n            setProperty(newDataRow, prop, _this2.getAtPhysicalCell(row, prop, dataRow));\n          });\n        }\n      }\n      return newDataRow;\n    }\n\n    /**\n     * Set the provided value in the source data set at the provided coordinates.\n     *\n     * @param {number} row Physical row index.\n     * @param {number|string} column Property name / physical column index.\n     * @param {*} value The value to be set at the provided coordinates.\n     */\n  }, {\n    key: \"setAtCell\",\n    value: function setAtCell(row, column, value) {\n      if (row >= this.countRows() || column >= this.countFirstRowKeys()) {\n        // Not enough rows and/or columns.\n        return;\n      }\n      if (this.hot.hasHook('modifySourceData')) {\n        var valueHolder = createObjectPropListener(value);\n        this.hot.runHooks('modifySourceData', row, this.propToCol(column), valueHolder, 'set');\n        if (valueHolder.isTouched()) {\n          value = valueHolder.value;\n        }\n      }\n      if (!Number.isInteger(column)) {\n        // column argument is the prop name\n        setProperty(this.data[row], column, value);\n      } else {\n        this.data[row][column] = value;\n      }\n    }\n\n    /**\n     * Get data from the source data set using the physical indexes.\n     *\n     * @private\n     * @param {number} row Physical row index.\n     * @param {string|number|Function} column Physical column index / property / function.\n     * @param {Array|object} dataRow A representation of a data row.\n     * @returns {*} Value at the provided coordinates.\n     */\n  }, {\n    key: \"getAtPhysicalCell\",\n    value: function getAtPhysicalCell(row, column, dataRow) {\n      var result = null;\n      if (dataRow) {\n        if (typeof column === 'string') {\n          result = getProperty(dataRow, column);\n        } else if (typeof column === 'function') {\n          result = column(dataRow);\n        } else {\n          result = dataRow[column];\n        }\n      }\n      if (this.hot.hasHook('modifySourceData')) {\n        var valueHolder = createObjectPropListener(result);\n        this.hot.runHooks('modifySourceData', row, this.colToProp(column), valueHolder, 'get');\n        if (valueHolder.isTouched()) {\n          result = valueHolder.value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Returns a single value from the data.\n     *\n     * @param {number} row Physical row index.\n     * @param {number} column Visual column index.\n     * @returns {*}\n     */\n  }, {\n    key: \"getAtCell\",\n    value: function getAtCell(row, column) {\n      var dataRow = this.modifyRowData(row);\n      return this.getAtPhysicalCell(row, this.colToProp(column), dataRow);\n    }\n\n    /**\n     * Returns source data by passed range.\n     *\n     * @param {object} [start] Object with physical `row` and `col` keys (or visual column index, if data type is an array of objects).\n     * @param {object} [end] Object with physical `row` and `col` keys (or visual column index, if data type is an array of objects).\n     * @param {boolean} [toArray=false] If `true` return source data as an array of arrays even when source data was provided\n     *                                  in another format.\n     * @returns {Array}\n     */\n  }, {\n    key: \"getByRange\",\n    value: function getByRange() {\n      var _this3 = this;\n      var start = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var end = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var toArray = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var getAllProps = false;\n      var startRow = null;\n      var startCol = null;\n      var endRow = null;\n      var endCol = null;\n      if (start === null || end === null) {\n        getAllProps = true;\n        startRow = 0;\n        endRow = this.countRows() - 1;\n      } else {\n        startRow = Math.min(start.row, end.row);\n        startCol = Math.min(start.col, end.col);\n        endRow = Math.max(start.row, end.row);\n        endCol = Math.max(start.col, end.col);\n      }\n      var result = [];\n      rangeEach(startRow, endRow, function (currentRow) {\n        result.push(getAllProps ? _this3.getAtRow(currentRow, void 0, void 0, toArray) : _this3.getAtRow(currentRow, startCol, endCol, toArray));\n      });\n      return result;\n    }\n\n    /**\n     * Count number of rows.\n     *\n     * @returns {number}\n     */\n  }, {\n    key: \"countRows\",\n    value: function countRows() {\n      if (this.hot.hasHook('modifySourceLength')) {\n        var modifiedSourceLength = this.hot.runHooks('modifySourceLength');\n        if (Number.isInteger(modifiedSourceLength)) {\n          return modifiedSourceLength;\n        }\n      }\n      return this.data.length;\n    }\n\n    /**\n     * Count number of columns.\n     *\n     * @returns {number}\n     */\n  }, {\n    key: \"countFirstRowKeys\",\n    value: function countFirstRowKeys() {\n      return _countFirstRowKeys(this.data);\n    }\n\n    /**\n     * Destroy instance.\n     */\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.data = null;\n      this.hot = null;\n    }\n  }]);\n  return DataSource;\n}();\nexport default DataSource;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}