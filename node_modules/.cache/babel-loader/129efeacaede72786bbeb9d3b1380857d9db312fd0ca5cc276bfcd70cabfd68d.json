{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (null != _i) {\n    var _s,\n      _e,\n      _x,\n      _r,\n      _arr = [],\n      _n = !0,\n      _d = !1;\n    try {\n      if (_x = (_i = _i.call(arr)).next, 0 === i) {\n        if (Object(_i) !== _i) return;\n        _n = !1;\n      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);\n    } catch (err) {\n      _d = !0, _e = err;\n    } finally {\n      try {\n        if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return;\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nimport { isFunctionKey, isCtrlMetaKey } from \"./helpers/unicode.mjs\";\nimport { stopImmediatePropagation } from \"./helpers/dom/event.mjs\";\nimport { isOutsideInput } from \"./helpers/dom/element.mjs\";\nimport { getEditorInstance } from \"./editors/registry.mjs\";\nimport EventManager from \"./eventManager.mjs\";\nimport { isDefined } from \"./helpers/mixed.mjs\";\nexport var SHORTCUTS_GROUP_NAVIGATION = 'editorManager.navigation';\nexport var SHORTCUTS_GROUP_EDITOR = 'editorManager.handlingEditor';\nvar EditorManager = /*#__PURE__*/function () {\n  /**\n   * @param {Core} instance The Handsontable instance.\n   * @param {TableMeta} tableMeta The table meta instance.\n   * @param {Selection} selection The selection instance.\n   */\n  function EditorManager(instance, tableMeta, selection) {\n    var _this = this;\n    _classCallCheck(this, EditorManager);\n    /**\n     * Instance of {@link Handsontable}.\n     *\n     * @private\n     * @type {Handsontable}\n     */\n    this.instance = instance;\n    /**\n     * Reference to an instance's private GridSettings object.\n     *\n     * @private\n     * @type {GridSettings}\n     */\n    this.tableMeta = tableMeta;\n    /**\n     * Instance of {@link Selection}.\n     *\n     * @private\n     * @type {Selection}\n     */\n    this.selection = selection;\n    /**\n     * Instance of {@link EventManager}.\n     *\n     * @private\n     * @type {EventManager}\n     */\n    this.eventManager = new EventManager(instance);\n    /**\n     * Determines if EditorManager is destroyed.\n     *\n     * @private\n     * @type {boolean}\n     */\n    this.destroyed = false;\n    /**\n     * Determines if EditorManager is locked.\n     *\n     * @private\n     * @type {boolean}\n     */\n    this.lock = false;\n    /**\n     * A reference to an instance of the activeEditor.\n     *\n     * @private\n     * @type {BaseEditor}\n     */\n    this.activeEditor = void 0;\n    /**\n     * Keeps a reference to the cell's properties object.\n     *\n     * @type {object}\n     */\n    this.cellProperties = void 0;\n    var shortcutManager = this.instance.getShortcutManager();\n    shortcutManager.addContext('editor');\n    this.registerShortcuts();\n    this.instance.addHook('afterDocumentKeyDown', function (event) {\n      return _this.onAfterDocumentKeyDown(event);\n    });\n\n    // Open editor when text composition is started (IME editor)\n    this.eventManager.addEventListener(this.instance.rootDocument.documentElement, 'compositionstart', function (event) {\n      if (!_this.destroyed && _this.instance.isListening()) {\n        _this.openEditor('', event);\n      }\n    });\n    this.instance.view._wt.update('onCellDblClick', function (event, coords, elem) {\n      return _this.onCellDblClick(event, coords, elem);\n    });\n  }\n\n  /**\n   * Register shortcuts responsible for handling some actions related to an editor.\n   *\n   * @private\n   */\n  _createClass(EditorManager, [{\n    key: \"registerShortcuts\",\n    value: function registerShortcuts() {\n      var _this2 = this;\n      var shortcutManager = this.instance.getShortcutManager();\n      var gridContext = shortcutManager.getContext('grid');\n      var editorContext = shortcutManager.getContext('editor');\n      var config = {\n        group: SHORTCUTS_GROUP_EDITOR\n      };\n      editorContext.addShortcuts([{\n        keys: [['Enter'], ['Enter', 'Shift'], ['Enter', 'Control/Meta'], ['Enter', 'Control/Meta', 'Shift']],\n        callback: function callback(event, keys) {\n          _this2.closeEditorAndSaveChanges(shortcutManager.isCtrlPressed());\n          _this2.moveSelectionAfterEnter(keys.includes('shift'));\n        }\n      }, {\n        keys: [['Escape'], ['Escape', 'Control/Meta']],\n        callback: function callback() {\n          _this2.closeEditorAndRestoreOriginalValue(shortcutManager.isCtrlPressed());\n          _this2.activeEditor.focus();\n        }\n      }], config);\n      gridContext.addShortcuts([{\n        keys: [['F2']],\n        callback: function callback(event) {\n          _this2.openEditor(null, event, true);\n        }\n      }, {\n        keys: [['Backspace'], ['Delete']],\n        callback: function callback() {\n          _this2.instance.emptySelectedCells();\n          _this2.prepareEditor();\n        }\n      }, {\n        keys: [['Enter'], ['Enter', 'Shift']],\n        callback: function callback(event, keys) {\n          if (_this2.instance.getSettings().enterBeginsEditing) {\n            if (_this2.cellProperties.readOnly) {\n              _this2.moveSelectionAfterEnter();\n            } else {\n              _this2.openEditor(null, event, true);\n            }\n          } else {\n            _this2.moveSelectionAfterEnter(keys.includes('shift'));\n          }\n          stopImmediatePropagation(event); // required by HandsontableEditor\n        }\n      }], config);\n    }\n\n    /**\n     * Lock the editor from being prepared and closed. Locking the editor prevents its closing and\n     * reinitialized after selecting the new cell. This feature is necessary for a mobile editor.\n     */\n  }, {\n    key: \"lockEditor\",\n    value: function lockEditor() {\n      this.lock = true;\n    }\n\n    /**\n     * Unlock the editor from being prepared and closed. This method restores the original behavior of\n     * the editors where for every new selection its instances are closed.\n     */\n  }, {\n    key: \"unlockEditor\",\n    value: function unlockEditor() {\n      this.lock = false;\n    }\n\n    /**\n     * Destroy current editor, if exists.\n     *\n     * @param {boolean} revertOriginal If `false` and the cell using allowInvalid option,\n     *                                 then an editor won't be closed until validation is passed.\n     */\n  }, {\n    key: \"destroyEditor\",\n    value: function destroyEditor(revertOriginal) {\n      if (!this.lock) {\n        this.closeEditor(revertOriginal);\n      }\n    }\n\n    /**\n     * Get active editor.\n     *\n     * @returns {BaseEditor}\n     */\n  }, {\n    key: \"getActiveEditor\",\n    value: function getActiveEditor() {\n      return this.activeEditor;\n    }\n\n    /**\n     * Prepare text input to be displayed at given grid cell.\n     */\n  }, {\n    key: \"prepareEditor\",\n    value: function prepareEditor() {\n      var _this3 = this;\n      if (this.lock) {\n        return;\n      }\n      if (this.activeEditor && this.activeEditor.isWaiting()) {\n        this.closeEditor(false, false, function (dataSaved) {\n          if (dataSaved) {\n            _this3.prepareEditor();\n          }\n        });\n        return;\n      }\n      var _this$instance$getSel = this.instance.getSelectedRangeLast().highlight,\n        row = _this$instance$getSel.row,\n        col = _this$instance$getSel.col;\n      var modifiedCellCoords = this.instance.runHooks('modifyGetCellCoords', row, col);\n      var visualRowToCheck = row;\n      var visualColumnToCheck = col;\n      if (Array.isArray(modifiedCellCoords)) {\n        var _modifiedCellCoords = _slicedToArray(modifiedCellCoords, 2);\n        visualRowToCheck = _modifiedCellCoords[0];\n        visualColumnToCheck = _modifiedCellCoords[1];\n      }\n\n      // Getting values using the modified coordinates.\n      this.cellProperties = this.instance.getCellMeta(visualRowToCheck, visualColumnToCheck);\n      var activeElement = this.instance.rootDocument.activeElement;\n\n      // Blurring the `activeElement` removes the unwanted border around the focusable element (#6877)\n      // and resets the `document.activeElement` property. The blurring should happen only when the\n      // previously selected input element has not belonged to the Handsontable editor. If blurring is\n      // triggered for all elements, there is a problem with the disappearing IME editor (#9672).\n      if (activeElement && isOutsideInput(activeElement)) {\n        activeElement.blur();\n      }\n      if (!this.isCellEditable()) {\n        this.clearActiveEditor();\n        return;\n      }\n      var td = this.instance.getCell(row, col, true);\n\n      // Skip the preparation when the cell is not rendered in the DOM. The cell is scrolled out of\n      // the table's viewport.\n      if (td) {\n        var editorClass = this.instance.getCellEditor(this.cellProperties);\n        var prop = this.instance.colToProp(visualColumnToCheck);\n        var originalValue = this.instance.getSourceDataAtCell(this.instance.toPhysicalRow(visualRowToCheck), visualColumnToCheck);\n        this.activeEditor = getEditorInstance(editorClass, this.instance);\n        // Using not modified coordinates, as we need to get the table element using selection coordinates.\n        // There is an extra translation in the editor for saving value.\n        this.activeEditor.prepare(row, col, prop, td, originalValue, this.cellProperties);\n      }\n    }\n\n    /**\n     * Check is editor is opened/showed.\n     *\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isEditorOpened\",\n    value: function isEditorOpened() {\n      return this.activeEditor && this.activeEditor.isOpened();\n    }\n\n    /**\n     * Open editor with initial value.\n     *\n     * @param {null|string} newInitialValue New value from which editor will start if handled property it's not the `null`.\n     * @param {Event} event The event object.\n     * @param {boolean} [enableFullEditMode=false] When true, an editor works in full editing mode. Mode disallows closing an editor\n     *                                             when arrow keys are pressed.\n     */\n  }, {\n    key: \"openEditor\",\n    value: function openEditor(newInitialValue, event) {\n      var enableFullEditMode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      if (!this.isCellEditable()) {\n        this.clearActiveEditor();\n        return;\n      }\n      if (!this.activeEditor) {\n        var _this$instance$getSel2 = this.instance.getSelectedRangeLast().highlight,\n          row = _this$instance$getSel2.row,\n          col = _this$instance$getSel2.col;\n        var renderableRowIndex = this.instance.rowIndexMapper.getRenderableFromVisualIndex(row);\n        var renderableColumnIndex = this.instance.columnIndexMapper.getRenderableFromVisualIndex(col);\n        this.instance.view.scrollViewport(this.instance._createCellCoords(renderableRowIndex, renderableColumnIndex));\n        this.instance.view.render();\n        this.prepareEditor();\n      }\n      if (this.activeEditor) {\n        if (enableFullEditMode) {\n          this.activeEditor.enableFullEditMode();\n        }\n        this.activeEditor.beginEditing(newInitialValue, event);\n      }\n    }\n\n    /**\n     * Close editor, finish editing cell.\n     *\n     * @param {boolean} restoreOriginalValue If `true`, then closes editor without saving value from the editor into a cell.\n     * @param {boolean} isCtrlPressed If `true`, then editor will save value to each cell in the last selected range.\n     * @param {Function} callback The callback function, fired after editor closing.\n     */\n  }, {\n    key: \"closeEditor\",\n    value: function closeEditor(restoreOriginalValue, isCtrlPressed, callback) {\n      if (this.activeEditor) {\n        this.activeEditor.finishEditing(restoreOriginalValue, isCtrlPressed, callback);\n      } else if (callback) {\n        callback(false);\n      }\n    }\n\n    /**\n     * Close editor and save changes.\n     *\n     * @param {boolean} isCtrlPressed If `true`, then editor will save value to each cell in the last selected range.\n     */\n  }, {\n    key: \"closeEditorAndSaveChanges\",\n    value: function closeEditorAndSaveChanges(isCtrlPressed) {\n      this.closeEditor(false, isCtrlPressed);\n    }\n\n    /**\n     * Close editor and restore original value.\n     *\n     * @param {boolean} isCtrlPressed Indication of whether the CTRL button is pressed.\n     */\n  }, {\n    key: \"closeEditorAndRestoreOriginalValue\",\n    value: function closeEditorAndRestoreOriginalValue(isCtrlPressed) {\n      this.closeEditor(true, isCtrlPressed);\n    }\n\n    /**\n     * Clears reference to an instance of the active editor.\n     *\n     * @private\n     */\n  }, {\n    key: \"clearActiveEditor\",\n    value: function clearActiveEditor() {\n      this.activeEditor = void 0;\n    }\n\n    /**\n     * Checks if the currently selected cell (pointed by selection highlight coords) is editable.\n     * Editable cell is when:\n     *   - the cell has defined an editor type;\n     *   - the cell is not marked as read-only;\n     *   - the cell is not hidden.\n     *\n     * @private\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isCellEditable\",\n    value: function isCellEditable() {\n      var editorClass = this.instance.getCellEditor(this.cellProperties);\n      var _this$instance$getSel3 = this.instance.getSelectedRangeLast().highlight,\n        row = _this$instance$getSel3.row,\n        col = _this$instance$getSel3.col;\n      var _this$instance = this.instance,\n        rowIndexMapper = _this$instance.rowIndexMapper,\n        columnIndexMapper = _this$instance.columnIndexMapper;\n      var isCellHidden = rowIndexMapper.isHidden(this.instance.toPhysicalRow(row)) || columnIndexMapper.isHidden(this.instance.toPhysicalColumn(col));\n      if (this.cellProperties.readOnly || !editorClass || isCellHidden) {\n        return false;\n      }\n      return true;\n    }\n\n    /**\n     * Controls selection's behaviour after clicking `Enter`.\n     *\n     * @private\n     * @param {boolean} isShiftPressed If `true`, then the selection will move up after hit enter.\n     */\n  }, {\n    key: \"moveSelectionAfterEnter\",\n    value: function moveSelectionAfterEnter(isShiftPressed) {\n      var enterMoves = typeof this.tableMeta.enterMoves === 'function' ? this.tableMeta.enterMoves(event) : this.tableMeta.enterMoves;\n      if (isShiftPressed) {\n        // move selection up\n        this.selection.transformStart(-enterMoves.row, -enterMoves.col);\n      } else {\n        // move selection down (add a new row if needed)\n        this.selection.transformStart(enterMoves.row, enterMoves.col, true);\n      }\n    }\n\n    /**\n     * OnAfterDocumentKeyDown callback.\n     *\n     * @private\n     * @param {KeyboardEvent} event The keyboard event object.\n     */\n  }, {\n    key: \"onAfterDocumentKeyDown\",\n    value: function onAfterDocumentKeyDown(event) {\n      var _this4 = this;\n      if (!this.instance.isListening()) {\n        return;\n      }\n      var keyCode = event.keyCode;\n      if (!this.selection.isSelected()) {\n        return;\n      }\n\n      // catch CTRL but not right ALT (which in some systems triggers ALT+CTRL)\n      var isCtrlPressed = (event.ctrlKey || event.metaKey) && !event.altKey;\n      if (!this.activeEditor || this.activeEditor && !this.activeEditor.isWaiting()) {\n        if (!isFunctionKey(keyCode) && !isCtrlMetaKey(keyCode) && !isCtrlPressed && !this.isEditorOpened()) {\n          var shortcutManager = this.instance.getShortcutManager();\n          var editorContext = shortcutManager.getContext('editor');\n          var runOnlySelectedConfig = {\n            runOnlyIf: function runOnlyIf() {\n              return isDefined(_this4.instance.getSelected());\n            },\n            group: SHORTCUTS_GROUP_NAVIGATION\n          };\n          editorContext.addShortcuts([{\n            keys: [['ArrowUp']],\n            callback: function callback() {\n              _this4.instance.selection.transformStart(-1, 0);\n            }\n          }, {\n            keys: [['ArrowDown']],\n            callback: function callback() {\n              _this4.instance.selection.transformStart(1, 0);\n            }\n          }, {\n            keys: [['ArrowLeft']],\n            callback: function callback() {\n              _this4.instance.selection.transformStart(0, -1 * _this4.instance.getDirectionFactor());\n            }\n          }, {\n            keys: [['ArrowRight']],\n            callback: function callback() {\n              _this4.instance.selection.transformStart(0, _this4.instance.getDirectionFactor());\n            }\n          }], runOnlySelectedConfig);\n          this.openEditor('', event);\n        }\n      }\n    }\n\n    /**\n     * OnCellDblClick callback.\n     *\n     * @private\n     * @param {MouseEvent} event The mouse event object.\n     * @param {object} coords The cell coordinates.\n     * @param {HTMLTableCellElement|HTMLTableHeaderCellElement} elem The element which triggers the action.\n     */\n  }, {\n    key: \"onCellDblClick\",\n    value: function onCellDblClick(event, coords, elem) {\n      // may be TD or TH\n      if (elem.nodeName === 'TD') {\n        this.openEditor(null, event, true);\n      }\n    }\n\n    /**\n     * Destroy the instance.\n     */\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.destroyed = true;\n      this.eventManager.destroy();\n    }\n  }]);\n  return EditorManager;\n}();\nvar instances = new WeakMap();\n\n/**\n * @param {Core} hotInstance The Handsontable instance.\n * @param {TableMeta} tableMeta The table meta class instance.\n * @param {Selection} selection The selection instance.\n * @returns {EditorManager}\n */\nEditorManager.getInstance = function (hotInstance, tableMeta, selection) {\n  var editorManager = instances.get(hotInstance);\n  if (!editorManager) {\n    editorManager = new EditorManager(hotInstance, tableMeta, selection);\n    instances.set(hotInstance, editorManager);\n  }\n  return editorManager;\n};\nexport default EditorManager;","map":{"version":3,"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","o","minLen","_arrayLikeToArray","n","Object","toString","call","slice","name","Array","from","test","len","length","arr2","_i","_s","_e","_x","_r","_arr","_n","_d","next","done","push","value","err","return","isArray","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","_toPropertyKey","key","_createClass","protoProps","staticProps","arg","_toPrimitive","String","input","hint","prim","toPrimitive","undefined","res","Number","isFunctionKey","isCtrlMetaKey","stopImmediatePropagation","isOutsideInput","getEditorInstance","EventManager","isDefined","SHORTCUTS_GROUP_NAVIGATION","SHORTCUTS_GROUP_EDITOR","EditorManager","tableMeta","selection","_this","eventManager","destroyed","lock","activeEditor","cellProperties","shortcutManager","getShortcutManager","addContext","registerShortcuts","addHook","event","onAfterDocumentKeyDown","addEventListener","rootDocument","documentElement","isListening","openEditor","view","_wt","update","coords","elem","onCellDblClick","_this2","gridContext","getContext","editorContext","config","group","addShortcuts","keys","callback","closeEditorAndSaveChanges","isCtrlPressed","moveSelectionAfterEnter","includes","closeEditorAndRestoreOriginalValue","focus","emptySelectedCells","prepareEditor","getSettings","enterBeginsEditing","readOnly","lockEditor","unlockEditor","destroyEditor","revertOriginal","closeEditor","getActiveEditor","_this3","isWaiting","dataSaved","_this$instance$getSel","getSelectedRangeLast","highlight","row","col","modifiedCellCoords","runHooks","visualRowToCheck","visualColumnToCheck","_modifiedCellCoords","getCellMeta","activeElement","blur","isCellEditable","clearActiveEditor","td","getCell","editorClass","getCellEditor","prop","colToProp","originalValue","getSourceDataAtCell","toPhysicalRow","prepare","isEditorOpened","isOpened","newInitialValue","enableFullEditMode","arguments","_this$instance$getSel2","renderableRowIndex","rowIndexMapper","getRenderableFromVisualIndex","renderableColumnIndex","columnIndexMapper","scrollViewport","_createCellCoords","render","beginEditing","restoreOriginalValue","finishEditing","_this$instance$getSel3","_this$instance","isCellHidden","isHidden","toPhysicalColumn","isShiftPressed","enterMoves","transformStart","_this4","keyCode","isSelected","ctrlKey","metaKey","altKey","runOnlySelectedConfig","runOnlyIf","getSelected","getDirectionFactor","nodeName","destroy","instances","WeakMap","getInstance","hotInstance","editorManager","get","set"],"sources":["/home/rstorey/wwwdev/Blucktool/node_modules/handsontable/editorManager.mjs"],"sourcesContent":["function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.weak-map.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.symbol.to-primitive.js\";\nimport \"core-js/modules/es.date.to-primitive.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport { isFunctionKey, isCtrlMetaKey } from \"./helpers/unicode.mjs\";\nimport { stopImmediatePropagation } from \"./helpers/dom/event.mjs\";\nimport { isOutsideInput } from \"./helpers/dom/element.mjs\";\nimport { getEditorInstance } from \"./editors/registry.mjs\";\nimport EventManager from \"./eventManager.mjs\";\nimport { isDefined } from \"./helpers/mixed.mjs\";\nexport var SHORTCUTS_GROUP_NAVIGATION = 'editorManager.navigation';\nexport var SHORTCUTS_GROUP_EDITOR = 'editorManager.handlingEditor';\nvar EditorManager = /*#__PURE__*/function () {\n  /**\n   * @param {Core} instance The Handsontable instance.\n   * @param {TableMeta} tableMeta The table meta instance.\n   * @param {Selection} selection The selection instance.\n   */\n  function EditorManager(instance, tableMeta, selection) {\n    var _this = this;\n    _classCallCheck(this, EditorManager);\n    /**\n     * Instance of {@link Handsontable}.\n     *\n     * @private\n     * @type {Handsontable}\n     */\n    this.instance = instance;\n    /**\n     * Reference to an instance's private GridSettings object.\n     *\n     * @private\n     * @type {GridSettings}\n     */\n    this.tableMeta = tableMeta;\n    /**\n     * Instance of {@link Selection}.\n     *\n     * @private\n     * @type {Selection}\n     */\n    this.selection = selection;\n    /**\n     * Instance of {@link EventManager}.\n     *\n     * @private\n     * @type {EventManager}\n     */\n    this.eventManager = new EventManager(instance);\n    /**\n     * Determines if EditorManager is destroyed.\n     *\n     * @private\n     * @type {boolean}\n     */\n    this.destroyed = false;\n    /**\n     * Determines if EditorManager is locked.\n     *\n     * @private\n     * @type {boolean}\n     */\n    this.lock = false;\n    /**\n     * A reference to an instance of the activeEditor.\n     *\n     * @private\n     * @type {BaseEditor}\n     */\n    this.activeEditor = void 0;\n    /**\n     * Keeps a reference to the cell's properties object.\n     *\n     * @type {object}\n     */\n    this.cellProperties = void 0;\n    var shortcutManager = this.instance.getShortcutManager();\n    shortcutManager.addContext('editor');\n    this.registerShortcuts();\n    this.instance.addHook('afterDocumentKeyDown', function (event) {\n      return _this.onAfterDocumentKeyDown(event);\n    });\n\n    // Open editor when text composition is started (IME editor)\n    this.eventManager.addEventListener(this.instance.rootDocument.documentElement, 'compositionstart', function (event) {\n      if (!_this.destroyed && _this.instance.isListening()) {\n        _this.openEditor('', event);\n      }\n    });\n    this.instance.view._wt.update('onCellDblClick', function (event, coords, elem) {\n      return _this.onCellDblClick(event, coords, elem);\n    });\n  }\n\n  /**\n   * Register shortcuts responsible for handling some actions related to an editor.\n   *\n   * @private\n   */\n  _createClass(EditorManager, [{\n    key: \"registerShortcuts\",\n    value: function registerShortcuts() {\n      var _this2 = this;\n      var shortcutManager = this.instance.getShortcutManager();\n      var gridContext = shortcutManager.getContext('grid');\n      var editorContext = shortcutManager.getContext('editor');\n      var config = {\n        group: SHORTCUTS_GROUP_EDITOR\n      };\n      editorContext.addShortcuts([{\n        keys: [['Enter'], ['Enter', 'Shift'], ['Enter', 'Control/Meta'], ['Enter', 'Control/Meta', 'Shift']],\n        callback: function callback(event, keys) {\n          _this2.closeEditorAndSaveChanges(shortcutManager.isCtrlPressed());\n          _this2.moveSelectionAfterEnter(keys.includes('shift'));\n        }\n      }, {\n        keys: [['Escape'], ['Escape', 'Control/Meta']],\n        callback: function callback() {\n          _this2.closeEditorAndRestoreOriginalValue(shortcutManager.isCtrlPressed());\n          _this2.activeEditor.focus();\n        }\n      }], config);\n      gridContext.addShortcuts([{\n        keys: [['F2']],\n        callback: function callback(event) {\n          _this2.openEditor(null, event, true);\n        }\n      }, {\n        keys: [['Backspace'], ['Delete']],\n        callback: function callback() {\n          _this2.instance.emptySelectedCells();\n          _this2.prepareEditor();\n        }\n      }, {\n        keys: [['Enter'], ['Enter', 'Shift']],\n        callback: function callback(event, keys) {\n          if (_this2.instance.getSettings().enterBeginsEditing) {\n            if (_this2.cellProperties.readOnly) {\n              _this2.moveSelectionAfterEnter();\n            } else {\n              _this2.openEditor(null, event, true);\n            }\n          } else {\n            _this2.moveSelectionAfterEnter(keys.includes('shift'));\n          }\n          stopImmediatePropagation(event); // required by HandsontableEditor\n        }\n      }], config);\n    }\n\n    /**\n     * Lock the editor from being prepared and closed. Locking the editor prevents its closing and\n     * reinitialized after selecting the new cell. This feature is necessary for a mobile editor.\n     */\n  }, {\n    key: \"lockEditor\",\n    value: function lockEditor() {\n      this.lock = true;\n    }\n\n    /**\n     * Unlock the editor from being prepared and closed. This method restores the original behavior of\n     * the editors where for every new selection its instances are closed.\n     */\n  }, {\n    key: \"unlockEditor\",\n    value: function unlockEditor() {\n      this.lock = false;\n    }\n\n    /**\n     * Destroy current editor, if exists.\n     *\n     * @param {boolean} revertOriginal If `false` and the cell using allowInvalid option,\n     *                                 then an editor won't be closed until validation is passed.\n     */\n  }, {\n    key: \"destroyEditor\",\n    value: function destroyEditor(revertOriginal) {\n      if (!this.lock) {\n        this.closeEditor(revertOriginal);\n      }\n    }\n\n    /**\n     * Get active editor.\n     *\n     * @returns {BaseEditor}\n     */\n  }, {\n    key: \"getActiveEditor\",\n    value: function getActiveEditor() {\n      return this.activeEditor;\n    }\n\n    /**\n     * Prepare text input to be displayed at given grid cell.\n     */\n  }, {\n    key: \"prepareEditor\",\n    value: function prepareEditor() {\n      var _this3 = this;\n      if (this.lock) {\n        return;\n      }\n      if (this.activeEditor && this.activeEditor.isWaiting()) {\n        this.closeEditor(false, false, function (dataSaved) {\n          if (dataSaved) {\n            _this3.prepareEditor();\n          }\n        });\n        return;\n      }\n      var _this$instance$getSel = this.instance.getSelectedRangeLast().highlight,\n        row = _this$instance$getSel.row,\n        col = _this$instance$getSel.col;\n      var modifiedCellCoords = this.instance.runHooks('modifyGetCellCoords', row, col);\n      var visualRowToCheck = row;\n      var visualColumnToCheck = col;\n      if (Array.isArray(modifiedCellCoords)) {\n        var _modifiedCellCoords = _slicedToArray(modifiedCellCoords, 2);\n        visualRowToCheck = _modifiedCellCoords[0];\n        visualColumnToCheck = _modifiedCellCoords[1];\n      }\n\n      // Getting values using the modified coordinates.\n      this.cellProperties = this.instance.getCellMeta(visualRowToCheck, visualColumnToCheck);\n      var activeElement = this.instance.rootDocument.activeElement;\n\n      // Blurring the `activeElement` removes the unwanted border around the focusable element (#6877)\n      // and resets the `document.activeElement` property. The blurring should happen only when the\n      // previously selected input element has not belonged to the Handsontable editor. If blurring is\n      // triggered for all elements, there is a problem with the disappearing IME editor (#9672).\n      if (activeElement && isOutsideInput(activeElement)) {\n        activeElement.blur();\n      }\n      if (!this.isCellEditable()) {\n        this.clearActiveEditor();\n        return;\n      }\n      var td = this.instance.getCell(row, col, true);\n\n      // Skip the preparation when the cell is not rendered in the DOM. The cell is scrolled out of\n      // the table's viewport.\n      if (td) {\n        var editorClass = this.instance.getCellEditor(this.cellProperties);\n        var prop = this.instance.colToProp(visualColumnToCheck);\n        var originalValue = this.instance.getSourceDataAtCell(this.instance.toPhysicalRow(visualRowToCheck), visualColumnToCheck);\n        this.activeEditor = getEditorInstance(editorClass, this.instance);\n        // Using not modified coordinates, as we need to get the table element using selection coordinates.\n        // There is an extra translation in the editor for saving value.\n        this.activeEditor.prepare(row, col, prop, td, originalValue, this.cellProperties);\n      }\n    }\n\n    /**\n     * Check is editor is opened/showed.\n     *\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isEditorOpened\",\n    value: function isEditorOpened() {\n      return this.activeEditor && this.activeEditor.isOpened();\n    }\n\n    /**\n     * Open editor with initial value.\n     *\n     * @param {null|string} newInitialValue New value from which editor will start if handled property it's not the `null`.\n     * @param {Event} event The event object.\n     * @param {boolean} [enableFullEditMode=false] When true, an editor works in full editing mode. Mode disallows closing an editor\n     *                                             when arrow keys are pressed.\n     */\n  }, {\n    key: \"openEditor\",\n    value: function openEditor(newInitialValue, event) {\n      var enableFullEditMode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      if (!this.isCellEditable()) {\n        this.clearActiveEditor();\n        return;\n      }\n      if (!this.activeEditor) {\n        var _this$instance$getSel2 = this.instance.getSelectedRangeLast().highlight,\n          row = _this$instance$getSel2.row,\n          col = _this$instance$getSel2.col;\n        var renderableRowIndex = this.instance.rowIndexMapper.getRenderableFromVisualIndex(row);\n        var renderableColumnIndex = this.instance.columnIndexMapper.getRenderableFromVisualIndex(col);\n        this.instance.view.scrollViewport(this.instance._createCellCoords(renderableRowIndex, renderableColumnIndex));\n        this.instance.view.render();\n        this.prepareEditor();\n      }\n      if (this.activeEditor) {\n        if (enableFullEditMode) {\n          this.activeEditor.enableFullEditMode();\n        }\n        this.activeEditor.beginEditing(newInitialValue, event);\n      }\n    }\n\n    /**\n     * Close editor, finish editing cell.\n     *\n     * @param {boolean} restoreOriginalValue If `true`, then closes editor without saving value from the editor into a cell.\n     * @param {boolean} isCtrlPressed If `true`, then editor will save value to each cell in the last selected range.\n     * @param {Function} callback The callback function, fired after editor closing.\n     */\n  }, {\n    key: \"closeEditor\",\n    value: function closeEditor(restoreOriginalValue, isCtrlPressed, callback) {\n      if (this.activeEditor) {\n        this.activeEditor.finishEditing(restoreOriginalValue, isCtrlPressed, callback);\n      } else if (callback) {\n        callback(false);\n      }\n    }\n\n    /**\n     * Close editor and save changes.\n     *\n     * @param {boolean} isCtrlPressed If `true`, then editor will save value to each cell in the last selected range.\n     */\n  }, {\n    key: \"closeEditorAndSaveChanges\",\n    value: function closeEditorAndSaveChanges(isCtrlPressed) {\n      this.closeEditor(false, isCtrlPressed);\n    }\n\n    /**\n     * Close editor and restore original value.\n     *\n     * @param {boolean} isCtrlPressed Indication of whether the CTRL button is pressed.\n     */\n  }, {\n    key: \"closeEditorAndRestoreOriginalValue\",\n    value: function closeEditorAndRestoreOriginalValue(isCtrlPressed) {\n      this.closeEditor(true, isCtrlPressed);\n    }\n\n    /**\n     * Clears reference to an instance of the active editor.\n     *\n     * @private\n     */\n  }, {\n    key: \"clearActiveEditor\",\n    value: function clearActiveEditor() {\n      this.activeEditor = void 0;\n    }\n\n    /**\n     * Checks if the currently selected cell (pointed by selection highlight coords) is editable.\n     * Editable cell is when:\n     *   - the cell has defined an editor type;\n     *   - the cell is not marked as read-only;\n     *   - the cell is not hidden.\n     *\n     * @private\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isCellEditable\",\n    value: function isCellEditable() {\n      var editorClass = this.instance.getCellEditor(this.cellProperties);\n      var _this$instance$getSel3 = this.instance.getSelectedRangeLast().highlight,\n        row = _this$instance$getSel3.row,\n        col = _this$instance$getSel3.col;\n      var _this$instance = this.instance,\n        rowIndexMapper = _this$instance.rowIndexMapper,\n        columnIndexMapper = _this$instance.columnIndexMapper;\n      var isCellHidden = rowIndexMapper.isHidden(this.instance.toPhysicalRow(row)) || columnIndexMapper.isHidden(this.instance.toPhysicalColumn(col));\n      if (this.cellProperties.readOnly || !editorClass || isCellHidden) {\n        return false;\n      }\n      return true;\n    }\n\n    /**\n     * Controls selection's behaviour after clicking `Enter`.\n     *\n     * @private\n     * @param {boolean} isShiftPressed If `true`, then the selection will move up after hit enter.\n     */\n  }, {\n    key: \"moveSelectionAfterEnter\",\n    value: function moveSelectionAfterEnter(isShiftPressed) {\n      var enterMoves = typeof this.tableMeta.enterMoves === 'function' ? this.tableMeta.enterMoves(event) : this.tableMeta.enterMoves;\n      if (isShiftPressed) {\n        // move selection up\n        this.selection.transformStart(-enterMoves.row, -enterMoves.col);\n      } else {\n        // move selection down (add a new row if needed)\n        this.selection.transformStart(enterMoves.row, enterMoves.col, true);\n      }\n    }\n\n    /**\n     * OnAfterDocumentKeyDown callback.\n     *\n     * @private\n     * @param {KeyboardEvent} event The keyboard event object.\n     */\n  }, {\n    key: \"onAfterDocumentKeyDown\",\n    value: function onAfterDocumentKeyDown(event) {\n      var _this4 = this;\n      if (!this.instance.isListening()) {\n        return;\n      }\n      var keyCode = event.keyCode;\n      if (!this.selection.isSelected()) {\n        return;\n      }\n\n      // catch CTRL but not right ALT (which in some systems triggers ALT+CTRL)\n      var isCtrlPressed = (event.ctrlKey || event.metaKey) && !event.altKey;\n      if (!this.activeEditor || this.activeEditor && !this.activeEditor.isWaiting()) {\n        if (!isFunctionKey(keyCode) && !isCtrlMetaKey(keyCode) && !isCtrlPressed && !this.isEditorOpened()) {\n          var shortcutManager = this.instance.getShortcutManager();\n          var editorContext = shortcutManager.getContext('editor');\n          var runOnlySelectedConfig = {\n            runOnlyIf: function runOnlyIf() {\n              return isDefined(_this4.instance.getSelected());\n            },\n            group: SHORTCUTS_GROUP_NAVIGATION\n          };\n          editorContext.addShortcuts([{\n            keys: [['ArrowUp']],\n            callback: function callback() {\n              _this4.instance.selection.transformStart(-1, 0);\n            }\n          }, {\n            keys: [['ArrowDown']],\n            callback: function callback() {\n              _this4.instance.selection.transformStart(1, 0);\n            }\n          }, {\n            keys: [['ArrowLeft']],\n            callback: function callback() {\n              _this4.instance.selection.transformStart(0, -1 * _this4.instance.getDirectionFactor());\n            }\n          }, {\n            keys: [['ArrowRight']],\n            callback: function callback() {\n              _this4.instance.selection.transformStart(0, _this4.instance.getDirectionFactor());\n            }\n          }], runOnlySelectedConfig);\n          this.openEditor('', event);\n        }\n      }\n    }\n\n    /**\n     * OnCellDblClick callback.\n     *\n     * @private\n     * @param {MouseEvent} event The mouse event object.\n     * @param {object} coords The cell coordinates.\n     * @param {HTMLTableCellElement|HTMLTableHeaderCellElement} elem The element which triggers the action.\n     */\n  }, {\n    key: \"onCellDblClick\",\n    value: function onCellDblClick(event, coords, elem) {\n      // may be TD or TH\n      if (elem.nodeName === 'TD') {\n        this.openEditor(null, event, true);\n      }\n    }\n\n    /**\n     * Destroy the instance.\n     */\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.destroyed = true;\n      this.eventManager.destroy();\n    }\n  }]);\n  return EditorManager;\n}();\nvar instances = new WeakMap();\n\n/**\n * @param {Core} hotInstance The Handsontable instance.\n * @param {TableMeta} tableMeta The table meta class instance.\n * @param {Selection} selection The selection instance.\n * @returns {EditorManager}\n */\nEditorManager.getInstance = function (hotInstance, tableMeta, selection) {\n  var editorManager = instances.get(hotInstance);\n  if (!editorManager) {\n    editorManager = new EditorManager(hotInstance, tableMeta, selection);\n    instances.set(hotInstance, editorManager);\n  }\n  return editorManager;\n};\nexport default EditorManager;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}