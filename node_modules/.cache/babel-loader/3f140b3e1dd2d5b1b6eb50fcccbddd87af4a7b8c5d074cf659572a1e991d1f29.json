{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\n/**\n * TableRenderer class collects all renderers and properties necessary for table creation. It's\n * responsible for adjusting and rendering each renderer.\n *\n * Below is a diagram of the renderers together with an indication of what they are responisble for.\n *   <table>\n *     <colgroup>  \\ (root node)\n *       <col>      \\\n *       <col>       \\___ ColGroupRenderer\n *       <col>       /\n *       <col>      /\n *     </colgroup> /\n *     <thead>     \\ (root node)\n *       <tr>       \\\n *         <th>      \\\n *         <th>       \\____ ColumnHeadersRenderer\n *         <th>       /\n *         <th>      /\n *       </tr>      /\n *     </thead>    /\n *     <tbody>   ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\ (root node)\n *       <tr>   (root node)          \\\n *         <th>  --- RowHeadersRenderer\n *         <td>  \\                     \\\n *         <td>   -- CellsRenderer      \\\n *         <td>  /                       \\\n *       </tr>                            \\\n *       <tr>   (root node)                \\\n *         <th>  --- RowHeadersRenderer     \\\n *         <td>  \\                           \\___ RowsRenderer\n *         <td>   -- CellsRenderer           /\n *         <td>  /                          /\n *       </tr>                             /\n *       <tr>   (root node)               /\n *         <th>  --- RowHeadersRenderer  /\n *         <td>  \\                      /\n *         <td>   -- CellsRenderer     /\n *         <td>  /                    /\n *       </tr>                       /\n *     </tbody>  ___________________/\n *   </table>.\n *\n * @class {RowsRenderer}\n */\nvar TableRenderer = /*#__PURE__*/function () {\n  function TableRenderer(rootNode) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      cellRenderer = _ref.cellRenderer;\n    _classCallCheck(this, TableRenderer);\n    /**\n     * Table element which will be used to render the children element.\n     *\n     * @type {HTMLTableElement}\n     */\n    this.rootNode = rootNode;\n    /**\n     * Document owner of the root node.\n     *\n     * @type {HTMLDocument}\n     */\n    this.rootDocument = this.rootNode.ownerDocument;\n    /**\n     * Renderer class responsible for rendering row headers.\n     *\n     * @type {RowsRenderer}\n     */\n    this.rowHeaders = null;\n    /**\n     * Renderer class responsible for rendering column headers.\n     *\n     * @type {ColumnHeadersRenderer}\n     */\n    this.columnHeaders = null;\n    /**\n     * Renderer class responsible for rendering col in colgroup.\n     *\n     * @type {ColGroupRenderer}\n     */\n    this.colGroup = null;\n    /**\n     * Renderer class responsible for rendering rows in tbody.\n     *\n     * @type {RowsRenderer}\n     */\n    this.rows = null;\n    /**\n     * Renderer class responsible for rendering cells.\n     *\n     * @type {CellsRenderer}\n     */\n    this.cells = null;\n    /**\n     * Row filter which contains all necessary information about row index transformation.\n     *\n     * @type {RowFilter}\n     */\n    this.rowFilter = null;\n    /**\n     * Column filter which contains all necessary information about column index transformation.\n     *\n     * @type {ColumnFilter}\n     */\n    this.columnFilter = null;\n    /**\n     * Row utils class which contains all necessary information about sizes of the rows.\n     *\n     * @type {RowUtils}\n     */\n    this.rowUtils = null;\n    /**\n     * Column utils class which contains all necessary information about sizes of the columns.\n     *\n     * @type {ColumnUtils}\n     */\n    this.columnUtils = null;\n    /**\n     * Indicates how much rows should be rendered to fill whole table viewport.\n     *\n     * @type {number}\n     */\n    this.rowsToRender = 0;\n    /**\n     * Indicates how much columns should be rendered to fill whole table viewport.\n     *\n     * @type {number}\n     */\n    this.columnsToRender = 0;\n    /**\n     * An array of functions to be used as a content factory to row headers.\n     *\n     * @type {Function[]}\n     */\n    this.rowHeaderFunctions = [];\n    /**\n     * Count of the function used to render row headers.\n     *\n     * @type {number}\n     */\n    this.rowHeadersCount = 0;\n    /**\n     * An array of functions to be used as a content factory to column headers.\n     *\n     * @type {Function[]}\n     */\n    this.columnHeaderFunctions = [];\n    /**\n     * Count of the function used to render column headers.\n     *\n     * @type {number}\n     */\n    this.columnHeadersCount = 0;\n    /**\n     * Cell renderer used to render cells content.\n     *\n     * @type {Function}\n     */\n    this.cellRenderer = cellRenderer;\n  }\n\n  /**\n   * Set row and column util classes.\n   *\n   * @param {RowUtils} rowUtils RowUtils instance which provides useful methods related to row sizes.\n   * @param {ColumnUtils} columnUtils ColumnUtils instance which provides useful methods related to row sizes.\n   */\n  _createClass(TableRenderer, [{\n    key: \"setAxisUtils\",\n    value: function setAxisUtils(rowUtils, columnUtils) {\n      this.rowUtils = rowUtils;\n      this.columnUtils = columnUtils;\n    }\n\n    /**\n     * Sets viewport size of the table.\n     *\n     * @param {number} rowsCount An amount of rows to render.\n     * @param {number} columnsCount An amount of columns to render.\n     */\n  }, {\n    key: \"setViewportSize\",\n    value: function setViewportSize(rowsCount, columnsCount) {\n      this.rowsToRender = rowsCount;\n      this.columnsToRender = columnsCount;\n    }\n\n    /**\n     * Sets row and column filter instances.\n     *\n     * @param {RowFilter} rowFilter Row filter instance which contains all necessary information about row index transformation.\n     * @param {ColumnFilter} columnFilter Column filter instance which contains all necessary information about row\n     * index transformation.\n     */\n  }, {\n    key: \"setFilters\",\n    value: function setFilters(rowFilter, columnFilter) {\n      this.rowFilter = rowFilter;\n      this.columnFilter = columnFilter;\n    }\n\n    /**\n     * Sets row and column header functions.\n     *\n     * @param {Function[]} rowHeaders Row header functions. Factories for creating content for row headers.\n     * @param {Function[]} columnHeaders Column header functions. Factories for creating content for column headers.\n     */\n  }, {\n    key: \"setHeaderContentRenderers\",\n    value: function setHeaderContentRenderers(rowHeaders, columnHeaders) {\n      this.rowHeaderFunctions = rowHeaders;\n      this.rowHeadersCount = rowHeaders.length;\n      this.columnHeaderFunctions = columnHeaders;\n      this.columnHeadersCount = columnHeaders.length;\n    }\n\n    /**\n     * Sets table renderers.\n     *\n     * @param {renderers} renderers The renderer units.\n     * @param {RowHeadersRenderer} renderers.rowHeaders Row headers renderer.\n     * @param {ColumnHeadersRenderer} renderers.columnHeaders Column headers renderer.\n     * @param {ColGroupRenderer} renderers.colGroup Col group renderer.\n     * @param {RowsRenderer} renderers.rows Rows renderer.\n     * @param {CellsRenderer} renderers.cells Cells renderer.\n     */\n  }, {\n    key: \"setRenderers\",\n    value: function setRenderers() {\n      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        rowHeaders = _ref2.rowHeaders,\n        columnHeaders = _ref2.columnHeaders,\n        colGroup = _ref2.colGroup,\n        rows = _ref2.rows,\n        cells = _ref2.cells;\n      rowHeaders.setTable(this);\n      columnHeaders.setTable(this);\n      colGroup.setTable(this);\n      rows.setTable(this);\n      cells.setTable(this);\n      this.rowHeaders = rowHeaders;\n      this.columnHeaders = columnHeaders;\n      this.colGroup = colGroup;\n      this.rows = rows;\n      this.cells = cells;\n    }\n\n    /**\n     * Transforms visual/rendered row index to source index.\n     *\n     * @param {number} rowIndex Rendered index.\n     * @returns {number}\n     */\n  }, {\n    key: \"renderedRowToSource\",\n    value: function renderedRowToSource(rowIndex) {\n      return this.rowFilter.renderedToSource(rowIndex);\n    }\n\n    /**\n     * Transforms visual/rendered column index to source index.\n     *\n     * @param {number} columnIndex Rendered index.\n     * @returns {number}\n     */\n  }, {\n    key: \"renderedColumnToSource\",\n    value: function renderedColumnToSource(columnIndex) {\n      return this.columnFilter.renderedToSource(columnIndex);\n    }\n\n    /**\n     * Renders the table.\n     */\n  }, {\n    key: \"render\",\n    value: function render() {\n      this.colGroup.adjust();\n      this.columnHeaders.adjust();\n      this.rows.adjust();\n      this.rowHeaders.adjust();\n      this.columnHeaders.render();\n      this.rows.render();\n      this.rowHeaders.render();\n      this.cells.render();\n\n      // After the cells are rendered calculate columns width (or columns stretch width) to prepare proper values\n      // for colGroup renderer (which renders COL elements).\n      this.columnUtils.calculateWidths();\n      this.colGroup.render();\n      var rowsToRender = this.rowsToRender,\n        rows = this.rows;\n\n      // Fix for multi-line content and for supporting `rowHeights` option.\n      for (var visibleRowIndex = 0; visibleRowIndex < rowsToRender; visibleRowIndex++) {\n        var TR = rows.getRenderedNode(visibleRowIndex);\n        if (TR.firstChild) {\n          var sourceRowIndex = this.renderedRowToSource(visibleRowIndex);\n          var rowHeight = this.rowUtils.getHeight(sourceRowIndex);\n          if (rowHeight) {\n            // Decrease height. 1 pixel will be \"replaced\" by 1px border top\n            TR.firstChild.style.height = \"\".concat(rowHeight - 1, \"px\");\n          } else {\n            TR.firstChild.style.height = '';\n          }\n        }\n      }\n    }\n  }]);\n  return TableRenderer;\n}();\nexport { TableRenderer as default };","map":{"version":3,"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","_toPropertyKey","key","_createClass","protoProps","staticProps","arg","_toPrimitive","String","input","hint","prim","toPrimitive","undefined","res","call","Number","TableRenderer","rootNode","_ref","arguments","cellRenderer","rootDocument","ownerDocument","rowHeaders","columnHeaders","colGroup","rows","cells","rowFilter","columnFilter","rowUtils","columnUtils","rowsToRender","columnsToRender","rowHeaderFunctions","rowHeadersCount","columnHeaderFunctions","columnHeadersCount","value","setAxisUtils","setViewportSize","rowsCount","columnsCount","setFilters","setHeaderContentRenderers","setRenderers","_ref2","setTable","renderedRowToSource","rowIndex","renderedToSource","renderedColumnToSource","columnIndex","render","adjust","calculateWidths","visibleRowIndex","TR","getRenderedNode","firstChild","sourceRowIndex","rowHeight","getHeight","style","height","concat","default"],"sources":["/home/rstorey/wwwdev/Blucktool/node_modules/handsontable/3rdparty/walkontable/src/renderer/table.mjs"],"sourcesContent":["import \"core-js/modules/es.symbol.to-primitive.js\";\nimport \"core-js/modules/es.date.to-primitive.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n/**\n * TableRenderer class collects all renderers and properties necessary for table creation. It's\n * responsible for adjusting and rendering each renderer.\n *\n * Below is a diagram of the renderers together with an indication of what they are responisble for.\n *   <table>\n *     <colgroup>  \\ (root node)\n *       <col>      \\\n *       <col>       \\___ ColGroupRenderer\n *       <col>       /\n *       <col>      /\n *     </colgroup> /\n *     <thead>     \\ (root node)\n *       <tr>       \\\n *         <th>      \\\n *         <th>       \\____ ColumnHeadersRenderer\n *         <th>       /\n *         <th>      /\n *       </tr>      /\n *     </thead>    /\n *     <tbody>   ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\ (root node)\n *       <tr>   (root node)          \\\n *         <th>  --- RowHeadersRenderer\n *         <td>  \\                     \\\n *         <td>   -- CellsRenderer      \\\n *         <td>  /                       \\\n *       </tr>                            \\\n *       <tr>   (root node)                \\\n *         <th>  --- RowHeadersRenderer     \\\n *         <td>  \\                           \\___ RowsRenderer\n *         <td>   -- CellsRenderer           /\n *         <td>  /                          /\n *       </tr>                             /\n *       <tr>   (root node)               /\n *         <th>  --- RowHeadersRenderer  /\n *         <td>  \\                      /\n *         <td>   -- CellsRenderer     /\n *         <td>  /                    /\n *       </tr>                       /\n *     </tbody>  ___________________/\n *   </table>.\n *\n * @class {RowsRenderer}\n */\nvar TableRenderer = /*#__PURE__*/function () {\n  function TableRenderer(rootNode) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      cellRenderer = _ref.cellRenderer;\n    _classCallCheck(this, TableRenderer);\n    /**\n     * Table element which will be used to render the children element.\n     *\n     * @type {HTMLTableElement}\n     */\n    this.rootNode = rootNode;\n    /**\n     * Document owner of the root node.\n     *\n     * @type {HTMLDocument}\n     */\n    this.rootDocument = this.rootNode.ownerDocument;\n    /**\n     * Renderer class responsible for rendering row headers.\n     *\n     * @type {RowsRenderer}\n     */\n    this.rowHeaders = null;\n    /**\n     * Renderer class responsible for rendering column headers.\n     *\n     * @type {ColumnHeadersRenderer}\n     */\n    this.columnHeaders = null;\n    /**\n     * Renderer class responsible for rendering col in colgroup.\n     *\n     * @type {ColGroupRenderer}\n     */\n    this.colGroup = null;\n    /**\n     * Renderer class responsible for rendering rows in tbody.\n     *\n     * @type {RowsRenderer}\n     */\n    this.rows = null;\n    /**\n     * Renderer class responsible for rendering cells.\n     *\n     * @type {CellsRenderer}\n     */\n    this.cells = null;\n    /**\n     * Row filter which contains all necessary information about row index transformation.\n     *\n     * @type {RowFilter}\n     */\n    this.rowFilter = null;\n    /**\n     * Column filter which contains all necessary information about column index transformation.\n     *\n     * @type {ColumnFilter}\n     */\n    this.columnFilter = null;\n    /**\n     * Row utils class which contains all necessary information about sizes of the rows.\n     *\n     * @type {RowUtils}\n     */\n    this.rowUtils = null;\n    /**\n     * Column utils class which contains all necessary information about sizes of the columns.\n     *\n     * @type {ColumnUtils}\n     */\n    this.columnUtils = null;\n    /**\n     * Indicates how much rows should be rendered to fill whole table viewport.\n     *\n     * @type {number}\n     */\n    this.rowsToRender = 0;\n    /**\n     * Indicates how much columns should be rendered to fill whole table viewport.\n     *\n     * @type {number}\n     */\n    this.columnsToRender = 0;\n    /**\n     * An array of functions to be used as a content factory to row headers.\n     *\n     * @type {Function[]}\n     */\n    this.rowHeaderFunctions = [];\n    /**\n     * Count of the function used to render row headers.\n     *\n     * @type {number}\n     */\n    this.rowHeadersCount = 0;\n    /**\n     * An array of functions to be used as a content factory to column headers.\n     *\n     * @type {Function[]}\n     */\n    this.columnHeaderFunctions = [];\n    /**\n     * Count of the function used to render column headers.\n     *\n     * @type {number}\n     */\n    this.columnHeadersCount = 0;\n    /**\n     * Cell renderer used to render cells content.\n     *\n     * @type {Function}\n     */\n    this.cellRenderer = cellRenderer;\n  }\n\n  /**\n   * Set row and column util classes.\n   *\n   * @param {RowUtils} rowUtils RowUtils instance which provides useful methods related to row sizes.\n   * @param {ColumnUtils} columnUtils ColumnUtils instance which provides useful methods related to row sizes.\n   */\n  _createClass(TableRenderer, [{\n    key: \"setAxisUtils\",\n    value: function setAxisUtils(rowUtils, columnUtils) {\n      this.rowUtils = rowUtils;\n      this.columnUtils = columnUtils;\n    }\n\n    /**\n     * Sets viewport size of the table.\n     *\n     * @param {number} rowsCount An amount of rows to render.\n     * @param {number} columnsCount An amount of columns to render.\n     */\n  }, {\n    key: \"setViewportSize\",\n    value: function setViewportSize(rowsCount, columnsCount) {\n      this.rowsToRender = rowsCount;\n      this.columnsToRender = columnsCount;\n    }\n\n    /**\n     * Sets row and column filter instances.\n     *\n     * @param {RowFilter} rowFilter Row filter instance which contains all necessary information about row index transformation.\n     * @param {ColumnFilter} columnFilter Column filter instance which contains all necessary information about row\n     * index transformation.\n     */\n  }, {\n    key: \"setFilters\",\n    value: function setFilters(rowFilter, columnFilter) {\n      this.rowFilter = rowFilter;\n      this.columnFilter = columnFilter;\n    }\n\n    /**\n     * Sets row and column header functions.\n     *\n     * @param {Function[]} rowHeaders Row header functions. Factories for creating content for row headers.\n     * @param {Function[]} columnHeaders Column header functions. Factories for creating content for column headers.\n     */\n  }, {\n    key: \"setHeaderContentRenderers\",\n    value: function setHeaderContentRenderers(rowHeaders, columnHeaders) {\n      this.rowHeaderFunctions = rowHeaders;\n      this.rowHeadersCount = rowHeaders.length;\n      this.columnHeaderFunctions = columnHeaders;\n      this.columnHeadersCount = columnHeaders.length;\n    }\n\n    /**\n     * Sets table renderers.\n     *\n     * @param {renderers} renderers The renderer units.\n     * @param {RowHeadersRenderer} renderers.rowHeaders Row headers renderer.\n     * @param {ColumnHeadersRenderer} renderers.columnHeaders Column headers renderer.\n     * @param {ColGroupRenderer} renderers.colGroup Col group renderer.\n     * @param {RowsRenderer} renderers.rows Rows renderer.\n     * @param {CellsRenderer} renderers.cells Cells renderer.\n     */\n  }, {\n    key: \"setRenderers\",\n    value: function setRenderers() {\n      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        rowHeaders = _ref2.rowHeaders,\n        columnHeaders = _ref2.columnHeaders,\n        colGroup = _ref2.colGroup,\n        rows = _ref2.rows,\n        cells = _ref2.cells;\n      rowHeaders.setTable(this);\n      columnHeaders.setTable(this);\n      colGroup.setTable(this);\n      rows.setTable(this);\n      cells.setTable(this);\n      this.rowHeaders = rowHeaders;\n      this.columnHeaders = columnHeaders;\n      this.colGroup = colGroup;\n      this.rows = rows;\n      this.cells = cells;\n    }\n\n    /**\n     * Transforms visual/rendered row index to source index.\n     *\n     * @param {number} rowIndex Rendered index.\n     * @returns {number}\n     */\n  }, {\n    key: \"renderedRowToSource\",\n    value: function renderedRowToSource(rowIndex) {\n      return this.rowFilter.renderedToSource(rowIndex);\n    }\n\n    /**\n     * Transforms visual/rendered column index to source index.\n     *\n     * @param {number} columnIndex Rendered index.\n     * @returns {number}\n     */\n  }, {\n    key: \"renderedColumnToSource\",\n    value: function renderedColumnToSource(columnIndex) {\n      return this.columnFilter.renderedToSource(columnIndex);\n    }\n\n    /**\n     * Renders the table.\n     */\n  }, {\n    key: \"render\",\n    value: function render() {\n      this.colGroup.adjust();\n      this.columnHeaders.adjust();\n      this.rows.adjust();\n      this.rowHeaders.adjust();\n      this.columnHeaders.render();\n      this.rows.render();\n      this.rowHeaders.render();\n      this.cells.render();\n\n      // After the cells are rendered calculate columns width (or columns stretch width) to prepare proper values\n      // for colGroup renderer (which renders COL elements).\n      this.columnUtils.calculateWidths();\n      this.colGroup.render();\n      var rowsToRender = this.rowsToRender,\n        rows = this.rows;\n\n      // Fix for multi-line content and for supporting `rowHeights` option.\n      for (var visibleRowIndex = 0; visibleRowIndex < rowsToRender; visibleRowIndex++) {\n        var TR = rows.getRenderedNode(visibleRowIndex);\n        if (TR.firstChild) {\n          var sourceRowIndex = this.renderedRowToSource(visibleRowIndex);\n          var rowHeight = this.rowUtils.getHeight(sourceRowIndex);\n          if (rowHeight) {\n            // Decrease height. 1 pixel will be \"replaced\" by 1px border top\n            TR.firstChild.style.height = \"\".concat(rowHeight - 1, \"px\");\n          } else {\n            TR.firstChild.style.height = '';\n          }\n        }\n      }\n    }\n  }]);\n  return TableRenderer;\n}();\nexport { TableRenderer as default };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}