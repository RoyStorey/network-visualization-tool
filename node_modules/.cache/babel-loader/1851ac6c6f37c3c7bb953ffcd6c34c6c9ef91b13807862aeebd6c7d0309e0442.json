{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\nvar _templateObject, _templateObject2;\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (null != _i) {\n    var _s,\n      _e,\n      _x,\n      _r,\n      _arr = [],\n      _n = !0,\n      _d = !1;\n    try {\n      if (_x = (_i = _i.call(arr)).next, 0 === i) {\n        if (Object(_i) !== _i) return;\n        _n = !1;\n      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);\n    } catch (err) {\n      _d = !0, _e = err;\n    } finally {\n      try {\n        if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return;\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nimport { arrayEach, arrayMap, arrayReduce } from \"../../helpers/array.mjs\";\nimport { mixin } from \"../../helpers/object.mjs\";\nimport { toSingleLine } from \"../../helpers/templateLiteralTag.mjs\";\nimport localHooks from \"../../mixins/localHooks.mjs\";\nimport { getCondition } from \"./conditionRegisterer.mjs\";\nimport { OPERATION_ID as OPERATION_AND } from \"./logicalOperations/conjunction.mjs\";\nimport { operations, getOperationFunc } from \"./logicalOperationRegisterer.mjs\";\nimport { isUndefined } from \"../../helpers/mixed.mjs\";\nimport { LinkedPhysicalIndexToValueMap as IndexToValueMap } from \"../../translations/index.mjs\";\nvar MAP_NAME = 'ConditionCollection.filteringStates';\n\n/**\n * @private\n * @class ConditionCollection\n */\nvar ConditionCollection = /*#__PURE__*/function () {\n  function ConditionCollection(hot) {\n    var isMapRegistrable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    _classCallCheck(this, ConditionCollection);\n    /**\n     * Handsontable instance.\n     *\n     * @type {Core}\n     */\n    this.hot = hot;\n    /**\n     * Indicates whether the internal IndexMap should be registered or not. Generally,\n     * registered Maps responds to the index changes. Within that collection, sometimes\n     * this is not necessary.\n     *\n     * @type {boolean}\n     */\n    this.isMapRegistrable = isMapRegistrable;\n    /**\n     * Index map storing filtering states for every column. ConditionCollection write and read to/from this element.\n     *\n     * @type {LinkedPhysicalIndexToValueMap}\n     */\n    this.filteringStates = new IndexToValueMap();\n    if (this.isMapRegistrable === true) {\n      this.hot.columnIndexMapper.registerMap(MAP_NAME, this.filteringStates);\n    } else {\n      this.filteringStates.init(this.hot.columnIndexMapper.getNumberOfIndexes());\n    }\n  }\n\n  /**\n   * Check if condition collection is empty (so no needed to filter data).\n   *\n   * @returns {boolean}\n   */\n  _createClass(ConditionCollection, [{\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.getFilteredColumns().length === 0;\n    }\n\n    /**\n     * Check if value is matched to the criteria of conditions chain.\n     *\n     * @param {object} value Object with `value` and `meta` keys.\n     * @param {number} column The physical column index.\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isMatch\",\n    value: function isMatch(value, column) {\n      var _stateForColumn$condi;\n      var stateForColumn = this.filteringStates.getValueAtIndex(column);\n      var conditions = (_stateForColumn$condi = stateForColumn === null || stateForColumn === void 0 ? void 0 : stateForColumn.conditions) !== null && _stateForColumn$condi !== void 0 ? _stateForColumn$condi : [];\n      var operation = stateForColumn === null || stateForColumn === void 0 ? void 0 : stateForColumn.operation;\n      return this.isMatchInConditions(conditions, value, operation);\n    }\n\n    /**\n     * Check if the value is matches the conditions.\n     *\n     * @param {Array} conditions List of conditions.\n     * @param {object} value Object with `value` and `meta` keys.\n     * @param {string} [operationType='conjunction'] Type of conditions operation.\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isMatchInConditions\",\n    value: function isMatchInConditions(conditions, value) {\n      var operationType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : OPERATION_AND;\n      if (conditions.length) {\n        return getOperationFunc(operationType)(conditions, value);\n      }\n      return true;\n    }\n\n    /**\n     * Add condition to the collection.\n     *\n     * @param {number} column The physical column index.\n     * @param {object} conditionDefinition Object with keys:\n     *  * `command` Object, Command object with condition name as `key` property.\n     *  * `args` Array, Condition arguments.\n     * @param {string} [operation='conjunction'] Type of conditions operation.\n     * @param {number} [position] Position to which condition will be added. When argument is undefined\n     * the condition will be processed as the last condition.\n     * @fires ConditionCollection#beforeAdd\n     * @fires ConditionCollection#afterAdd\n     */\n  }, {\n    key: \"addCondition\",\n    value: function addCondition(column, conditionDefinition) {\n      var operation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : OPERATION_AND;\n      var position = arguments.length > 3 ? arguments[3] : undefined;\n      var localeForColumn = this.hot.getCellMeta(0, column).locale;\n      var args = arrayMap(conditionDefinition.args, function (v) {\n        return typeof v === 'string' ? v.toLocaleLowerCase(localeForColumn) : v;\n      });\n      var name = conditionDefinition.name || conditionDefinition.command.key;\n      this.runLocalHooks('beforeAdd', column);\n      var columnType = this.getOperation(column);\n      if (columnType) {\n        if (columnType !== operation) {\n          throw Error(toSingleLine(_templateObject || (_templateObject = _taggedTemplateLiteral([\"The column of index \", \" has been already applied with a `\", \"` \\n        filter operation. Use `removeConditions` to clear the current conditions and then add new ones. \\n        Mind that you cannot mix different types of operations (for instance, if you use `conjunction`, \\n        use it consequently for a particular column).\"], [\"The column of index \", \" has been already applied with a \\\\`\", \"\\\\`\\\\x20\\n        filter operation. Use \\\\`removeConditions\\\\` to clear the current conditions and then add new ones.\\\\x20\\n        Mind that you cannot mix different types of operations (for instance, if you use \\\\`conjunction\\\\`,\\\\x20\\n        use it consequently for a particular column).\"])), column, columnType));\n        }\n      } else if (isUndefined(operations[operation])) {\n        throw new Error(toSingleLine(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"Unexpected operation named `\", \"`. Possible ones are \\n        `disjunction` and `conjunction`.\"], [\"Unexpected operation named \\\\`\", \"\\\\`. Possible ones are\\\\x20\\n        \\\\`disjunction\\\\` and \\\\`conjunction\\\\`.\"])), operation));\n      }\n      var conditionsForColumn = this.getConditions(column);\n      if (conditionsForColumn.length === 0) {\n        // Create first condition for particular column.\n        this.filteringStates.setValueAtIndex(column, {\n          operation: operation,\n          conditions: [{\n            name: name,\n            args: args,\n            func: getCondition(name, args)\n          }]\n        }, position);\n      } else {\n        // Add next condition for particular column (by reference).\n        conditionsForColumn.push({\n          name: name,\n          args: args,\n          func: getCondition(name, args)\n        });\n      }\n      this.runLocalHooks('afterAdd', column);\n    }\n\n    /**\n     * Get all added conditions from the collection at specified column index.\n     *\n     * @param {number} column The physical column index.\n     * @returns {Array} Returns conditions collection as an array.\n     */\n  }, {\n    key: \"getConditions\",\n    value: function getConditions(column) {\n      var _this$filteringStates, _this$filteringStates2;\n      return (_this$filteringStates = (_this$filteringStates2 = this.filteringStates.getValueAtIndex(column)) === null || _this$filteringStates2 === void 0 ? void 0 : _this$filteringStates2.conditions) !== null && _this$filteringStates !== void 0 ? _this$filteringStates : [];\n    }\n\n    /**\n     * Get operation for particular column.\n     *\n     * @param {number} column The physical column index.\n     * @returns {string|undefined}\n     */\n  }, {\n    key: \"getOperation\",\n    value: function getOperation(column) {\n      var _this$filteringStates3;\n      return (_this$filteringStates3 = this.filteringStates.getValueAtIndex(column)) === null || _this$filteringStates3 === void 0 ? void 0 : _this$filteringStates3.operation;\n    }\n\n    /**\n     * Get all filtered physical columns in the order in which actions are performed.\n     *\n     * @returns {Array}\n     */\n  }, {\n    key: \"getFilteredColumns\",\n    value: function getFilteredColumns() {\n      return this.filteringStates.getEntries().map(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 1),\n          physicalColumn = _ref2[0];\n        return physicalColumn;\n      });\n    }\n\n    /**\n     * Gets position in the filtering states stack for the specific column.\n     *\n     * @param {number} column The physical column index.\n     * @returns {number} Returns -1 when the column doesn't exist in the stack.\n     */\n  }, {\n    key: \"getColumnStackPosition\",\n    value: function getColumnStackPosition(column) {\n      return this.getFilteredColumns().indexOf(column);\n    }\n\n    /**\n     * Export all previously added conditions.\n     *\n     * @returns {Array}\n     */\n  }, {\n    key: \"exportAllConditions\",\n    value: function exportAllConditions() {\n      return arrayReduce(this.filteringStates.getEntries(), function (allConditions, _ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n          column = _ref4[0],\n          _ref4$ = _ref4[1],\n          operation = _ref4$.operation,\n          conditions = _ref4$.conditions;\n        allConditions.push({\n          column: column,\n          operation: operation,\n          conditions: arrayMap(conditions, function (_ref5) {\n            var name = _ref5.name,\n              args = _ref5.args;\n            return {\n              name: name,\n              args: args\n            };\n          })\n        });\n        return allConditions;\n      }, []);\n    }\n\n    /**\n     * Import conditions to the collection.\n     *\n     * @param {Array} conditions The collection of the conditions.\n     */\n  }, {\n    key: \"importAllConditions\",\n    value: function importAllConditions(conditions) {\n      var _this = this;\n      this.clean();\n      arrayEach(conditions, function (stack) {\n        arrayEach(stack.conditions, function (condition) {\n          return _this.addCondition(stack.column, condition);\n        });\n      });\n    }\n\n    /**\n     * Remove conditions at given column index.\n     *\n     * @param {number} column The physical column index.\n     * @fires ConditionCollection#beforeRemove\n     * @fires ConditionCollection#afterRemove\n     */\n  }, {\n    key: \"removeConditions\",\n    value: function removeConditions(column) {\n      this.runLocalHooks('beforeRemove', column);\n      this.filteringStates.clearValue(column);\n      this.runLocalHooks('afterRemove', column);\n    }\n\n    /**\n     * Clean all conditions collection and reset order stack.\n     *\n     * @fires ConditionCollection#beforeClean\n     * @fires ConditionCollection#afterClean\n     */\n  }, {\n    key: \"clean\",\n    value: function clean() {\n      this.runLocalHooks('beforeClean');\n      this.filteringStates.clear();\n      this.runLocalHooks('afterClean');\n    }\n\n    /**\n     * Check if at least one condition was added at specified column index. And if second parameter is passed then additionally\n     * check if condition exists under its name.\n     *\n     * @param {number} column The physical column index.\n     * @param {string} [name] Condition name.\n     * @returns {boolean}\n     */\n  }, {\n    key: \"hasConditions\",\n    value: function hasConditions(column, name) {\n      var conditions = this.getConditions(column);\n      if (name) {\n        return conditions.some(function (condition) {\n          return condition.name === name;\n        });\n      }\n      return conditions.length > 0;\n    }\n\n    /**\n     * Destroy object.\n     */\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (this.isMapRegistrable) {\n        this.hot.columnIndexMapper.unregisterMap(MAP_NAME);\n      }\n      this.filteringStates = null;\n      this.clearLocalHooks();\n    }\n  }]);\n  return ConditionCollection;\n}();\nmixin(ConditionCollection, localHooks);\nexport default ConditionCollection;","map":{"version":3,"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_templateObject","_templateObject2","_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","o","minLen","_arrayLikeToArray","n","Object","toString","call","slice","name","Array","from","test","len","length","arr2","_i","_s","_e","_x","_r","_arr","_n","_d","next","done","push","value","err","return","isArray","_taggedTemplateLiteral","strings","raw","freeze","defineProperties","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","_toPropertyKey","key","_createClass","protoProps","staticProps","arg","_toPrimitive","String","input","hint","prim","toPrimitive","undefined","res","Number","arrayEach","arrayMap","arrayReduce","mixin","toSingleLine","localHooks","getCondition","OPERATION_ID","OPERATION_AND","operations","getOperationFunc","isUndefined","LinkedPhysicalIndexToValueMap","IndexToValueMap","MAP_NAME","ConditionCollection","hot","isMapRegistrable","arguments","filteringStates","columnIndexMapper","registerMap","init","getNumberOfIndexes","isEmpty","getFilteredColumns","isMatch","column","_stateForColumn$condi","stateForColumn","getValueAtIndex","conditions","operation","isMatchInConditions","operationType","addCondition","conditionDefinition","position","localeForColumn","getCellMeta","locale","args","v","toLocaleLowerCase","command","runLocalHooks","columnType","getOperation","Error","conditionsForColumn","getConditions","setValueAtIndex","func","_this$filteringStates","_this$filteringStates2","_this$filteringStates3","getEntries","map","_ref","_ref2","physicalColumn","getColumnStackPosition","indexOf","exportAllConditions","allConditions","_ref3","_ref4","_ref4$","_ref5","importAllConditions","_this","clean","stack","condition","removeConditions","clearValue","clear","hasConditions","some","destroy","unregisterMap","clearLocalHooks"],"sources":["/home/rstorey/wwwdev/Blucktool/node_modules/handsontable/plugins/filters/conditionCollection.mjs"],"sourcesContent":["function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nvar _templateObject, _templateObject2;\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.symbol.to-primitive.js\";\nimport \"core-js/modules/es.date.to-primitive.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.object.freeze.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport { arrayEach, arrayMap, arrayReduce } from \"../../helpers/array.mjs\";\nimport { mixin } from \"../../helpers/object.mjs\";\nimport { toSingleLine } from \"../../helpers/templateLiteralTag.mjs\";\nimport localHooks from \"../../mixins/localHooks.mjs\";\nimport { getCondition } from \"./conditionRegisterer.mjs\";\nimport { OPERATION_ID as OPERATION_AND } from \"./logicalOperations/conjunction.mjs\";\nimport { operations, getOperationFunc } from \"./logicalOperationRegisterer.mjs\";\nimport { isUndefined } from \"../../helpers/mixed.mjs\";\nimport { LinkedPhysicalIndexToValueMap as IndexToValueMap } from \"../../translations/index.mjs\";\nvar MAP_NAME = 'ConditionCollection.filteringStates';\n\n/**\n * @private\n * @class ConditionCollection\n */\nvar ConditionCollection = /*#__PURE__*/function () {\n  function ConditionCollection(hot) {\n    var isMapRegistrable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    _classCallCheck(this, ConditionCollection);\n    /**\n     * Handsontable instance.\n     *\n     * @type {Core}\n     */\n    this.hot = hot;\n    /**\n     * Indicates whether the internal IndexMap should be registered or not. Generally,\n     * registered Maps responds to the index changes. Within that collection, sometimes\n     * this is not necessary.\n     *\n     * @type {boolean}\n     */\n    this.isMapRegistrable = isMapRegistrable;\n    /**\n     * Index map storing filtering states for every column. ConditionCollection write and read to/from this element.\n     *\n     * @type {LinkedPhysicalIndexToValueMap}\n     */\n    this.filteringStates = new IndexToValueMap();\n    if (this.isMapRegistrable === true) {\n      this.hot.columnIndexMapper.registerMap(MAP_NAME, this.filteringStates);\n    } else {\n      this.filteringStates.init(this.hot.columnIndexMapper.getNumberOfIndexes());\n    }\n  }\n\n  /**\n   * Check if condition collection is empty (so no needed to filter data).\n   *\n   * @returns {boolean}\n   */\n  _createClass(ConditionCollection, [{\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.getFilteredColumns().length === 0;\n    }\n\n    /**\n     * Check if value is matched to the criteria of conditions chain.\n     *\n     * @param {object} value Object with `value` and `meta` keys.\n     * @param {number} column The physical column index.\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isMatch\",\n    value: function isMatch(value, column) {\n      var _stateForColumn$condi;\n      var stateForColumn = this.filteringStates.getValueAtIndex(column);\n      var conditions = (_stateForColumn$condi = stateForColumn === null || stateForColumn === void 0 ? void 0 : stateForColumn.conditions) !== null && _stateForColumn$condi !== void 0 ? _stateForColumn$condi : [];\n      var operation = stateForColumn === null || stateForColumn === void 0 ? void 0 : stateForColumn.operation;\n      return this.isMatchInConditions(conditions, value, operation);\n    }\n\n    /**\n     * Check if the value is matches the conditions.\n     *\n     * @param {Array} conditions List of conditions.\n     * @param {object} value Object with `value` and `meta` keys.\n     * @param {string} [operationType='conjunction'] Type of conditions operation.\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isMatchInConditions\",\n    value: function isMatchInConditions(conditions, value) {\n      var operationType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : OPERATION_AND;\n      if (conditions.length) {\n        return getOperationFunc(operationType)(conditions, value);\n      }\n      return true;\n    }\n\n    /**\n     * Add condition to the collection.\n     *\n     * @param {number} column The physical column index.\n     * @param {object} conditionDefinition Object with keys:\n     *  * `command` Object, Command object with condition name as `key` property.\n     *  * `args` Array, Condition arguments.\n     * @param {string} [operation='conjunction'] Type of conditions operation.\n     * @param {number} [position] Position to which condition will be added. When argument is undefined\n     * the condition will be processed as the last condition.\n     * @fires ConditionCollection#beforeAdd\n     * @fires ConditionCollection#afterAdd\n     */\n  }, {\n    key: \"addCondition\",\n    value: function addCondition(column, conditionDefinition) {\n      var operation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : OPERATION_AND;\n      var position = arguments.length > 3 ? arguments[3] : undefined;\n      var localeForColumn = this.hot.getCellMeta(0, column).locale;\n      var args = arrayMap(conditionDefinition.args, function (v) {\n        return typeof v === 'string' ? v.toLocaleLowerCase(localeForColumn) : v;\n      });\n      var name = conditionDefinition.name || conditionDefinition.command.key;\n      this.runLocalHooks('beforeAdd', column);\n      var columnType = this.getOperation(column);\n      if (columnType) {\n        if (columnType !== operation) {\n          throw Error(toSingleLine(_templateObject || (_templateObject = _taggedTemplateLiteral([\"The column of index \", \" has been already applied with a `\", \"` \\n        filter operation. Use `removeConditions` to clear the current conditions and then add new ones. \\n        Mind that you cannot mix different types of operations (for instance, if you use `conjunction`, \\n        use it consequently for a particular column).\"], [\"The column of index \", \" has been already applied with a \\\\`\", \"\\\\`\\\\x20\\n        filter operation. Use \\\\`removeConditions\\\\` to clear the current conditions and then add new ones.\\\\x20\\n        Mind that you cannot mix different types of operations (for instance, if you use \\\\`conjunction\\\\`,\\\\x20\\n        use it consequently for a particular column).\"])), column, columnType));\n        }\n      } else if (isUndefined(operations[operation])) {\n        throw new Error(toSingleLine(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"Unexpected operation named `\", \"`. Possible ones are \\n        `disjunction` and `conjunction`.\"], [\"Unexpected operation named \\\\`\", \"\\\\`. Possible ones are\\\\x20\\n        \\\\`disjunction\\\\` and \\\\`conjunction\\\\`.\"])), operation));\n      }\n      var conditionsForColumn = this.getConditions(column);\n      if (conditionsForColumn.length === 0) {\n        // Create first condition for particular column.\n        this.filteringStates.setValueAtIndex(column, {\n          operation: operation,\n          conditions: [{\n            name: name,\n            args: args,\n            func: getCondition(name, args)\n          }]\n        }, position);\n      } else {\n        // Add next condition for particular column (by reference).\n        conditionsForColumn.push({\n          name: name,\n          args: args,\n          func: getCondition(name, args)\n        });\n      }\n      this.runLocalHooks('afterAdd', column);\n    }\n\n    /**\n     * Get all added conditions from the collection at specified column index.\n     *\n     * @param {number} column The physical column index.\n     * @returns {Array} Returns conditions collection as an array.\n     */\n  }, {\n    key: \"getConditions\",\n    value: function getConditions(column) {\n      var _this$filteringStates, _this$filteringStates2;\n      return (_this$filteringStates = (_this$filteringStates2 = this.filteringStates.getValueAtIndex(column)) === null || _this$filteringStates2 === void 0 ? void 0 : _this$filteringStates2.conditions) !== null && _this$filteringStates !== void 0 ? _this$filteringStates : [];\n    }\n\n    /**\n     * Get operation for particular column.\n     *\n     * @param {number} column The physical column index.\n     * @returns {string|undefined}\n     */\n  }, {\n    key: \"getOperation\",\n    value: function getOperation(column) {\n      var _this$filteringStates3;\n      return (_this$filteringStates3 = this.filteringStates.getValueAtIndex(column)) === null || _this$filteringStates3 === void 0 ? void 0 : _this$filteringStates3.operation;\n    }\n\n    /**\n     * Get all filtered physical columns in the order in which actions are performed.\n     *\n     * @returns {Array}\n     */\n  }, {\n    key: \"getFilteredColumns\",\n    value: function getFilteredColumns() {\n      return this.filteringStates.getEntries().map(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 1),\n          physicalColumn = _ref2[0];\n        return physicalColumn;\n      });\n    }\n\n    /**\n     * Gets position in the filtering states stack for the specific column.\n     *\n     * @param {number} column The physical column index.\n     * @returns {number} Returns -1 when the column doesn't exist in the stack.\n     */\n  }, {\n    key: \"getColumnStackPosition\",\n    value: function getColumnStackPosition(column) {\n      return this.getFilteredColumns().indexOf(column);\n    }\n\n    /**\n     * Export all previously added conditions.\n     *\n     * @returns {Array}\n     */\n  }, {\n    key: \"exportAllConditions\",\n    value: function exportAllConditions() {\n      return arrayReduce(this.filteringStates.getEntries(), function (allConditions, _ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n          column = _ref4[0],\n          _ref4$ = _ref4[1],\n          operation = _ref4$.operation,\n          conditions = _ref4$.conditions;\n        allConditions.push({\n          column: column,\n          operation: operation,\n          conditions: arrayMap(conditions, function (_ref5) {\n            var name = _ref5.name,\n              args = _ref5.args;\n            return {\n              name: name,\n              args: args\n            };\n          })\n        });\n        return allConditions;\n      }, []);\n    }\n\n    /**\n     * Import conditions to the collection.\n     *\n     * @param {Array} conditions The collection of the conditions.\n     */\n  }, {\n    key: \"importAllConditions\",\n    value: function importAllConditions(conditions) {\n      var _this = this;\n      this.clean();\n      arrayEach(conditions, function (stack) {\n        arrayEach(stack.conditions, function (condition) {\n          return _this.addCondition(stack.column, condition);\n        });\n      });\n    }\n\n    /**\n     * Remove conditions at given column index.\n     *\n     * @param {number} column The physical column index.\n     * @fires ConditionCollection#beforeRemove\n     * @fires ConditionCollection#afterRemove\n     */\n  }, {\n    key: \"removeConditions\",\n    value: function removeConditions(column) {\n      this.runLocalHooks('beforeRemove', column);\n      this.filteringStates.clearValue(column);\n      this.runLocalHooks('afterRemove', column);\n    }\n\n    /**\n     * Clean all conditions collection and reset order stack.\n     *\n     * @fires ConditionCollection#beforeClean\n     * @fires ConditionCollection#afterClean\n     */\n  }, {\n    key: \"clean\",\n    value: function clean() {\n      this.runLocalHooks('beforeClean');\n      this.filteringStates.clear();\n      this.runLocalHooks('afterClean');\n    }\n\n    /**\n     * Check if at least one condition was added at specified column index. And if second parameter is passed then additionally\n     * check if condition exists under its name.\n     *\n     * @param {number} column The physical column index.\n     * @param {string} [name] Condition name.\n     * @returns {boolean}\n     */\n  }, {\n    key: \"hasConditions\",\n    value: function hasConditions(column, name) {\n      var conditions = this.getConditions(column);\n      if (name) {\n        return conditions.some(function (condition) {\n          return condition.name === name;\n        });\n      }\n      return conditions.length > 0;\n    }\n\n    /**\n     * Destroy object.\n     */\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (this.isMapRegistrable) {\n        this.hot.columnIndexMapper.unregisterMap(MAP_NAME);\n      }\n      this.filteringStates = null;\n      this.clearLocalHooks();\n    }\n  }]);\n  return ConditionCollection;\n}();\nmixin(ConditionCollection, localHooks);\nexport default ConditionCollection;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}