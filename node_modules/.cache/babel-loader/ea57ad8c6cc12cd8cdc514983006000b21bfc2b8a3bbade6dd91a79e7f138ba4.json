{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) {\n  _checkPrivateRedeclaration(obj, privateMap);\n  privateMap.set(obj, value);\n}\nfunction _checkPrivateRedeclaration(obj, privateCollection) {\n  if (privateCollection.has(obj)) {\n    throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n  }\n}\nfunction _classPrivateFieldGet(receiver, privateMap) {\n  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\");\n  return _classApplyDescriptorGet(receiver, descriptor);\n}\nfunction _classApplyDescriptorGet(receiver, descriptor) {\n  if (descriptor.get) {\n    return descriptor.get.call(receiver);\n  }\n  return descriptor.value;\n}\nfunction _classPrivateFieldSet(receiver, privateMap, value) {\n  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\");\n  _classApplyDescriptorSet(receiver, descriptor, value);\n  return value;\n}\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to \" + action + \" private field on non-instance\");\n  }\n  return privateMap.get(receiver);\n}\nfunction _classApplyDescriptorSet(receiver, descriptor, value) {\n  if (descriptor.set) {\n    descriptor.set.call(receiver, value);\n  } else {\n    if (!descriptor.writable) {\n      throw new TypeError(\"attempted to set read only private field\");\n    }\n    descriptor.value = value;\n  }\n}\nimport { ChangesObserver } from \"./observer.mjs\";\nimport { arrayDiff } from \"./utils.mjs\";\n/**\n * The ChangesObservable module is an object that represents a resource that provides\n * the ability to observe the changes that happened in the index map indexes during\n * the code running.\n *\n * @private\n * @class ChangesObservable\n */\nvar _observers = /*#__PURE__*/new WeakMap();\nvar _indexMatrix = /*#__PURE__*/new WeakMap();\nvar _currentIndexState = /*#__PURE__*/new WeakMap();\nvar _isMatrixIndexesInitialized = /*#__PURE__*/new WeakMap();\nvar _initialIndexValue = /*#__PURE__*/new WeakMap();\nexport var ChangesObservable = /*#__PURE__*/function () {\n  /**\n   * The list of registered ChangesObserver instances.\n   *\n   * @type {ChangesObserver[]}\n   */\n\n  /**\n   * An array with default values that act as a base array that will be compared with\n   * the last saved index state. The changes are generated and immediately send through\n   * the newly created ChangesObserver object. Thanks to that, the observer initially has\n   * all information about what indexes are currently changed.\n   *\n   * @type {Array}\n   */\n\n  /**\n   * An array that holds the indexes state that is currently valid. The value is changed on every\n   * index mapper cache update.\n   *\n   * @type {Array}\n   */\n\n  /**\n   * The flag determines if the observable is initialized or not. Not initialized object creates\n   * index matrix once while emitting new changes.\n   *\n   * @type {boolean}\n   */\n\n  /**\n   * The initial index value allows control from what value the index matrix array will be created.\n   * Changing that value changes how the array diff generates the changes for the initial data\n   * sent to the subscribers. For example, the changes can be triggered by detecting the changes\n   * from `false` to `true` value or vice versa. Generally, it depends on which index map type\n   * the Observable will work with. For \"hiding\" or \"trimming\" index types, it will be boolean\n   * values. For various index maps, it can be anything, but I suspect that the most appropriate\n   * initial value will be \"undefined\" in that case.\n   *\n   * @type {boolean}\n   */\n\n  function ChangesObservable() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      initialIndexValue = _ref.initialIndexValue;\n    _classCallCheck(this, ChangesObservable);\n    _classPrivateFieldInitSpec(this, _observers, {\n      writable: true,\n      value: new Set()\n    });\n    _classPrivateFieldInitSpec(this, _indexMatrix, {\n      writable: true,\n      value: []\n    });\n    _classPrivateFieldInitSpec(this, _currentIndexState, {\n      writable: true,\n      value: []\n    });\n    _classPrivateFieldInitSpec(this, _isMatrixIndexesInitialized, {\n      writable: true,\n      value: false\n    });\n    _classPrivateFieldInitSpec(this, _initialIndexValue, {\n      writable: true,\n      value: false\n    });\n    _classPrivateFieldSet(this, _initialIndexValue, initialIndexValue !== null && initialIndexValue !== void 0 ? initialIndexValue : false);\n  }\n\n  /* eslint-disable jsdoc/require-description-complete-sentence */\n  /**\n   * Creates and returns a new instance of the ChangesObserver object. The resource\n   * allows subscribing to the index changes that during the code running may change.\n   * Changes are emitted as an array of the index change. Each change is represented\n   * separately as an object with `op`, `index`, `oldValue`, and `newValue` props.\n   *\n   * For example:\n   * ```\n   * [\n   *   { op: 'replace', index: 1, oldValue: false, newValue: true },\n   *   { op: 'replace', index: 3, oldValue: false, newValue: true },\n   *   { op: 'insert', index: 4, oldValue: false, newValue: true },\n   * ]\n   * // or when the new index map changes have less indexes\n   * [\n   *   { op: 'replace', index: 1, oldValue: false, newValue: true },\n   *   { op: 'remove', index: 4, oldValue: false, newValue: true },\n   * ]\n   * ```\n   *\n   * @returns {ChangesObserver}\n   */\n  /* eslint-enable jsdoc/require-description-complete-sentence */\n  _createClass(ChangesObservable, [{\n    key: \"createObserver\",\n    value: function createObserver() {\n      var _this = this;\n      var observer = new ChangesObserver();\n      _classPrivateFieldGet(this, _observers).add(observer);\n      observer.addLocalHook('unsubscribe', function () {\n        _classPrivateFieldGet(_this, _observers).delete(observer);\n      });\n      observer._writeInitialChanges(arrayDiff(_classPrivateFieldGet(this, _indexMatrix), _classPrivateFieldGet(this, _currentIndexState)));\n      return observer;\n    }\n\n    /**\n     * The method is an entry point for triggering new index map changes. Emitting the\n     * changes triggers comparing algorithm which compares last saved state with a new\n     * state. When there are some differences, the changes are sent to all subscribers.\n     *\n     * @param {Array} indexesState An array with index map state.\n     */\n  }, {\n    key: \"emit\",\n    value: function emit(indexesState) {\n      var currentIndexState = _classPrivateFieldGet(this, _currentIndexState);\n      if (!_classPrivateFieldGet(this, _isMatrixIndexesInitialized) || _classPrivateFieldGet(this, _indexMatrix).length !== indexesState.length) {\n        if (indexesState.length === 0) {\n          indexesState = new Array(currentIndexState.length).fill(_classPrivateFieldGet(this, _initialIndexValue));\n        } else {\n          _classPrivateFieldSet(this, _indexMatrix, new Array(indexesState.length).fill(_classPrivateFieldGet(this, _initialIndexValue)));\n        }\n        if (!_classPrivateFieldGet(this, _isMatrixIndexesInitialized)) {\n          _classPrivateFieldSet(this, _isMatrixIndexesInitialized, true);\n          currentIndexState = _classPrivateFieldGet(this, _indexMatrix);\n        }\n      }\n      var changes = arrayDiff(currentIndexState, indexesState);\n      _classPrivateFieldGet(this, _observers).forEach(function (observer) {\n        return observer._write(changes);\n      });\n      _classPrivateFieldSet(this, _currentIndexState, indexesState);\n    }\n  }]);\n  return ChangesObservable;\n}();","map":{"version":3,"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","_toPropertyKey","key","_createClass","protoProps","staticProps","arg","_toPrimitive","String","input","hint","prim","toPrimitive","undefined","res","call","Number","_classPrivateFieldInitSpec","privateMap","value","_checkPrivateRedeclaration","set","privateCollection","has","_classPrivateFieldGet","receiver","_classExtractFieldDescriptor","_classApplyDescriptorGet","get","_classPrivateFieldSet","_classApplyDescriptorSet","action","ChangesObserver","arrayDiff","_observers","WeakMap","_indexMatrix","_currentIndexState","_isMatrixIndexesInitialized","_initialIndexValue","ChangesObservable","_ref","arguments","initialIndexValue","Set","createObserver","_this","observer","add","addLocalHook","delete","_writeInitialChanges","emit","indexesState","currentIndexState","Array","fill","changes","forEach","_write"],"sources":["/home/rstorey/wwwdev/Blucktool/node_modules/handsontable/translations/changesObservable/observable.mjs"],"sourcesContent":["function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.fill.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.weak-map.js\";\nimport \"core-js/modules/es.symbol.to-primitive.js\";\nimport \"core-js/modules/es.date.to-primitive.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\nimport { ChangesObserver } from \"./observer.mjs\";\nimport { arrayDiff } from \"./utils.mjs\";\n/**\n * The ChangesObservable module is an object that represents a resource that provides\n * the ability to observe the changes that happened in the index map indexes during\n * the code running.\n *\n * @private\n * @class ChangesObservable\n */\nvar _observers = /*#__PURE__*/new WeakMap();\nvar _indexMatrix = /*#__PURE__*/new WeakMap();\nvar _currentIndexState = /*#__PURE__*/new WeakMap();\nvar _isMatrixIndexesInitialized = /*#__PURE__*/new WeakMap();\nvar _initialIndexValue = /*#__PURE__*/new WeakMap();\nexport var ChangesObservable = /*#__PURE__*/function () {\n  /**\n   * The list of registered ChangesObserver instances.\n   *\n   * @type {ChangesObserver[]}\n   */\n\n  /**\n   * An array with default values that act as a base array that will be compared with\n   * the last saved index state. The changes are generated and immediately send through\n   * the newly created ChangesObserver object. Thanks to that, the observer initially has\n   * all information about what indexes are currently changed.\n   *\n   * @type {Array}\n   */\n\n  /**\n   * An array that holds the indexes state that is currently valid. The value is changed on every\n   * index mapper cache update.\n   *\n   * @type {Array}\n   */\n\n  /**\n   * The flag determines if the observable is initialized or not. Not initialized object creates\n   * index matrix once while emitting new changes.\n   *\n   * @type {boolean}\n   */\n\n  /**\n   * The initial index value allows control from what value the index matrix array will be created.\n   * Changing that value changes how the array diff generates the changes for the initial data\n   * sent to the subscribers. For example, the changes can be triggered by detecting the changes\n   * from `false` to `true` value or vice versa. Generally, it depends on which index map type\n   * the Observable will work with. For \"hiding\" or \"trimming\" index types, it will be boolean\n   * values. For various index maps, it can be anything, but I suspect that the most appropriate\n   * initial value will be \"undefined\" in that case.\n   *\n   * @type {boolean}\n   */\n\n  function ChangesObservable() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      initialIndexValue = _ref.initialIndexValue;\n    _classCallCheck(this, ChangesObservable);\n    _classPrivateFieldInitSpec(this, _observers, {\n      writable: true,\n      value: new Set()\n    });\n    _classPrivateFieldInitSpec(this, _indexMatrix, {\n      writable: true,\n      value: []\n    });\n    _classPrivateFieldInitSpec(this, _currentIndexState, {\n      writable: true,\n      value: []\n    });\n    _classPrivateFieldInitSpec(this, _isMatrixIndexesInitialized, {\n      writable: true,\n      value: false\n    });\n    _classPrivateFieldInitSpec(this, _initialIndexValue, {\n      writable: true,\n      value: false\n    });\n    _classPrivateFieldSet(this, _initialIndexValue, initialIndexValue !== null && initialIndexValue !== void 0 ? initialIndexValue : false);\n  }\n\n  /* eslint-disable jsdoc/require-description-complete-sentence */\n  /**\n   * Creates and returns a new instance of the ChangesObserver object. The resource\n   * allows subscribing to the index changes that during the code running may change.\n   * Changes are emitted as an array of the index change. Each change is represented\n   * separately as an object with `op`, `index`, `oldValue`, and `newValue` props.\n   *\n   * For example:\n   * ```\n   * [\n   *   { op: 'replace', index: 1, oldValue: false, newValue: true },\n   *   { op: 'replace', index: 3, oldValue: false, newValue: true },\n   *   { op: 'insert', index: 4, oldValue: false, newValue: true },\n   * ]\n   * // or when the new index map changes have less indexes\n   * [\n   *   { op: 'replace', index: 1, oldValue: false, newValue: true },\n   *   { op: 'remove', index: 4, oldValue: false, newValue: true },\n   * ]\n   * ```\n   *\n   * @returns {ChangesObserver}\n   */\n  /* eslint-enable jsdoc/require-description-complete-sentence */\n  _createClass(ChangesObservable, [{\n    key: \"createObserver\",\n    value: function createObserver() {\n      var _this = this;\n      var observer = new ChangesObserver();\n      _classPrivateFieldGet(this, _observers).add(observer);\n      observer.addLocalHook('unsubscribe', function () {\n        _classPrivateFieldGet(_this, _observers).delete(observer);\n      });\n      observer._writeInitialChanges(arrayDiff(_classPrivateFieldGet(this, _indexMatrix), _classPrivateFieldGet(this, _currentIndexState)));\n      return observer;\n    }\n\n    /**\n     * The method is an entry point for triggering new index map changes. Emitting the\n     * changes triggers comparing algorithm which compares last saved state with a new\n     * state. When there are some differences, the changes are sent to all subscribers.\n     *\n     * @param {Array} indexesState An array with index map state.\n     */\n  }, {\n    key: \"emit\",\n    value: function emit(indexesState) {\n      var currentIndexState = _classPrivateFieldGet(this, _currentIndexState);\n      if (!_classPrivateFieldGet(this, _isMatrixIndexesInitialized) || _classPrivateFieldGet(this, _indexMatrix).length !== indexesState.length) {\n        if (indexesState.length === 0) {\n          indexesState = new Array(currentIndexState.length).fill(_classPrivateFieldGet(this, _initialIndexValue));\n        } else {\n          _classPrivateFieldSet(this, _indexMatrix, new Array(indexesState.length).fill(_classPrivateFieldGet(this, _initialIndexValue)));\n        }\n        if (!_classPrivateFieldGet(this, _isMatrixIndexesInitialized)) {\n          _classPrivateFieldSet(this, _isMatrixIndexesInitialized, true);\n          currentIndexState = _classPrivateFieldGet(this, _indexMatrix);\n        }\n      }\n      var changes = arrayDiff(currentIndexState, indexesState);\n      _classPrivateFieldGet(this, _observers).forEach(function (observer) {\n        return observer._write(changes);\n      });\n      _classPrivateFieldSet(this, _currentIndexState, indexesState);\n    }\n  }]);\n  return ChangesObservable;\n}();"],"mappings":"AAAA,SAASA,OAAOA,CAACC,GAAG,EAAE;EAAE,yBAAyB;;EAAE,OAAOD,OAAO,GAAG,UAAU,IAAI,OAAOE,MAAM,IAAI,QAAQ,IAAI,OAAOA,MAAM,CAACC,QAAQ,GAAG,UAAUF,GAAG,EAAE;IAAE,OAAO,OAAOA,GAAG;EAAE,CAAC,GAAG,UAAUA,GAAG,EAAE;IAAE,OAAOA,GAAG,IAAI,UAAU,IAAI,OAAOC,MAAM,IAAID,GAAG,CAACG,WAAW,KAAKF,MAAM,IAAID,GAAG,KAAKC,MAAM,CAACG,SAAS,GAAG,QAAQ,GAAG,OAAOJ,GAAG;EAAE,CAAC,EAAED,OAAO,CAACC,GAAG,CAAC;AAAE;AAe/U,SAASK,eAAeA,CAACC,QAAQ,EAAEC,WAAW,EAAE;EAAE,IAAI,EAAED,QAAQ,YAAYC,WAAW,CAAC,EAAE;IAAE,MAAM,IAAIC,SAAS,CAAC,mCAAmC,CAAC;EAAE;AAAE;AACxJ,SAASC,iBAAiBA,CAACC,MAAM,EAAEC,KAAK,EAAE;EAAE,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,KAAK,CAACE,MAAM,EAAED,CAAC,EAAE,EAAE;IAAE,IAAIE,UAAU,GAAGH,KAAK,CAACC,CAAC,CAAC;IAAEE,UAAU,CAACC,UAAU,GAAGD,UAAU,CAACC,UAAU,IAAI,KAAK;IAAED,UAAU,CAACE,YAAY,GAAG,IAAI;IAAE,IAAI,OAAO,IAAIF,UAAU,EAAEA,UAAU,CAACG,QAAQ,GAAG,IAAI;IAAEC,MAAM,CAACC,cAAc,CAACT,MAAM,EAAEU,cAAc,CAACN,UAAU,CAACO,GAAG,CAAC,EAAEP,UAAU,CAAC;EAAE;AAAE;AAC5U,SAASQ,YAAYA,CAACf,WAAW,EAAEgB,UAAU,EAAEC,WAAW,EAAE;EAAE,IAAID,UAAU,EAAEd,iBAAiB,CAACF,WAAW,CAACH,SAAS,EAAEmB,UAAU,CAAC;EAAE,IAAIC,WAAW,EAAEf,iBAAiB,CAACF,WAAW,EAAEiB,WAAW,CAAC;EAAEN,MAAM,CAACC,cAAc,CAACZ,WAAW,EAAE,WAAW,EAAE;IAAEU,QAAQ,EAAE;EAAM,CAAC,CAAC;EAAE,OAAOV,WAAW;AAAE;AAC5R,SAASa,cAAcA,CAACK,GAAG,EAAE;EAAE,IAAIJ,GAAG,GAAGK,YAAY,CAACD,GAAG,EAAE,QAAQ,CAAC;EAAE,OAAO1B,OAAO,CAACsB,GAAG,CAAC,KAAK,QAAQ,GAAGA,GAAG,GAAGM,MAAM,CAACN,GAAG,CAAC;AAAE;AAC5H,SAASK,YAAYA,CAACE,KAAK,EAAEC,IAAI,EAAE;EAAE,IAAI9B,OAAO,CAAC6B,KAAK,CAAC,KAAK,QAAQ,IAAIA,KAAK,KAAK,IAAI,EAAE,OAAOA,KAAK;EAAE,IAAIE,IAAI,GAAGF,KAAK,CAAC3B,MAAM,CAAC8B,WAAW,CAAC;EAAE,IAAID,IAAI,KAAKE,SAAS,EAAE;IAAE,IAAIC,GAAG,GAAGH,IAAI,CAACI,IAAI,CAACN,KAAK,EAAEC,IAAI,IAAI,SAAS,CAAC;IAAE,IAAI9B,OAAO,CAACkC,GAAG,CAAC,KAAK,QAAQ,EAAE,OAAOA,GAAG;IAAE,MAAM,IAAIzB,SAAS,CAAC,8CAA8C,CAAC;EAAE;EAAE,OAAO,CAACqB,IAAI,KAAK,QAAQ,GAAGF,MAAM,GAAGQ,MAAM,EAAEP,KAAK,CAAC;AAAE;AAC5X,SAASQ,0BAA0BA,CAACpC,GAAG,EAAEqC,UAAU,EAAEC,KAAK,EAAE;EAAEC,0BAA0B,CAACvC,GAAG,EAAEqC,UAAU,CAAC;EAAEA,UAAU,CAACG,GAAG,CAACxC,GAAG,EAAEsC,KAAK,CAAC;AAAE;AACvI,SAASC,0BAA0BA,CAACvC,GAAG,EAAEyC,iBAAiB,EAAE;EAAE,IAAIA,iBAAiB,CAACC,GAAG,CAAC1C,GAAG,CAAC,EAAE;IAAE,MAAM,IAAIQ,SAAS,CAAC,gEAAgE,CAAC;EAAE;AAAE;AACzL,SAASmC,qBAAqBA,CAACC,QAAQ,EAAEP,UAAU,EAAE;EAAE,IAAIvB,UAAU,GAAG+B,4BAA4B,CAACD,QAAQ,EAAEP,UAAU,EAAE,KAAK,CAAC;EAAE,OAAOS,wBAAwB,CAACF,QAAQ,EAAE9B,UAAU,CAAC;AAAE;AAC1L,SAASgC,wBAAwBA,CAACF,QAAQ,EAAE9B,UAAU,EAAE;EAAE,IAAIA,UAAU,CAACiC,GAAG,EAAE;IAAE,OAAOjC,UAAU,CAACiC,GAAG,CAACb,IAAI,CAACU,QAAQ,CAAC;EAAE;EAAE,OAAO9B,UAAU,CAACwB,KAAK;AAAE;AACjJ,SAASU,qBAAqBA,CAACJ,QAAQ,EAAEP,UAAU,EAAEC,KAAK,EAAE;EAAE,IAAIxB,UAAU,GAAG+B,4BAA4B,CAACD,QAAQ,EAAEP,UAAU,EAAE,KAAK,CAAC;EAAEY,wBAAwB,CAACL,QAAQ,EAAE9B,UAAU,EAAEwB,KAAK,CAAC;EAAE,OAAOA,KAAK;AAAE;AAC/M,SAASO,4BAA4BA,CAACD,QAAQ,EAAEP,UAAU,EAAEa,MAAM,EAAE;EAAE,IAAI,CAACb,UAAU,CAACK,GAAG,CAACE,QAAQ,CAAC,EAAE;IAAE,MAAM,IAAIpC,SAAS,CAAC,eAAe,GAAG0C,MAAM,GAAG,gCAAgC,CAAC;EAAE;EAAE,OAAOb,UAAU,CAACU,GAAG,CAACH,QAAQ,CAAC;AAAE;AAC5N,SAASK,wBAAwBA,CAACL,QAAQ,EAAE9B,UAAU,EAAEwB,KAAK,EAAE;EAAE,IAAIxB,UAAU,CAAC0B,GAAG,EAAE;IAAE1B,UAAU,CAAC0B,GAAG,CAACN,IAAI,CAACU,QAAQ,EAAEN,KAAK,CAAC;EAAE,CAAC,MAAM;IAAE,IAAI,CAACxB,UAAU,CAACG,QAAQ,EAAE;MAAE,MAAM,IAAIT,SAAS,CAAC,0CAA0C,CAAC;IAAE;IAAEM,UAAU,CAACwB,KAAK,GAAGA,KAAK;EAAE;AAAE;AACjQ,SAASa,eAAe,QAAQ,gBAAgB;AAChD,SAASC,SAAS,QAAQ,aAAa;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,UAAU,GAAG,aAAa,IAAIC,OAAO,EAAE;AAC3C,IAAIC,YAAY,GAAG,aAAa,IAAID,OAAO,EAAE;AAC7C,IAAIE,kBAAkB,GAAG,aAAa,IAAIF,OAAO,EAAE;AACnD,IAAIG,2BAA2B,GAAG,aAAa,IAAIH,OAAO,EAAE;AAC5D,IAAII,kBAAkB,GAAG,aAAa,IAAIJ,OAAO,EAAE;AACnD,OAAO,IAAIK,iBAAiB,GAAG,aAAa,YAAY;EACtD;AACF;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE,SAASA,iBAAiBA,CAAA,EAAG;IAC3B,IAAIC,IAAI,GAAGC,SAAS,CAAChD,MAAM,GAAG,CAAC,IAAIgD,SAAS,CAAC,CAAC,CAAC,KAAK7B,SAAS,GAAG6B,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAC/EC,iBAAiB,GAAGF,IAAI,CAACE,iBAAiB;IAC5CzD,eAAe,CAAC,IAAI,EAAEsD,iBAAiB,CAAC;IACxCvB,0BAA0B,CAAC,IAAI,EAAEiB,UAAU,EAAE;MAC3CpC,QAAQ,EAAE,IAAI;MACdqB,KAAK,EAAE,IAAIyB,GAAG;IAChB,CAAC,CAAC;IACF3B,0BAA0B,CAAC,IAAI,EAAEmB,YAAY,EAAE;MAC7CtC,QAAQ,EAAE,IAAI;MACdqB,KAAK,EAAE;IACT,CAAC,CAAC;IACFF,0BAA0B,CAAC,IAAI,EAAEoB,kBAAkB,EAAE;MACnDvC,QAAQ,EAAE,IAAI;MACdqB,KAAK,EAAE;IACT,CAAC,CAAC;IACFF,0BAA0B,CAAC,IAAI,EAAEqB,2BAA2B,EAAE;MAC5DxC,QAAQ,EAAE,IAAI;MACdqB,KAAK,EAAE;IACT,CAAC,CAAC;IACFF,0BAA0B,CAAC,IAAI,EAAEsB,kBAAkB,EAAE;MACnDzC,QAAQ,EAAE,IAAI;MACdqB,KAAK,EAAE;IACT,CAAC,CAAC;IACFU,qBAAqB,CAAC,IAAI,EAAEU,kBAAkB,EAAEI,iBAAiB,KAAK,IAAI,IAAIA,iBAAiB,KAAK,KAAK,CAAC,GAAGA,iBAAiB,GAAG,KAAK,CAAC;EACzI;;EAEA;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACAxC,YAAY,CAACqC,iBAAiB,EAAE,CAAC;IAC/BtC,GAAG,EAAE,gBAAgB;IACrBiB,KAAK,EAAE,SAAS0B,cAAcA,CAAA,EAAG;MAC/B,IAAIC,KAAK,GAAG,IAAI;MAChB,IAAIC,QAAQ,GAAG,IAAIf,eAAe,EAAE;MACpCR,qBAAqB,CAAC,IAAI,EAAEU,UAAU,CAAC,CAACc,GAAG,CAACD,QAAQ,CAAC;MACrDA,QAAQ,CAACE,YAAY,CAAC,aAAa,EAAE,YAAY;QAC/CzB,qBAAqB,CAACsB,KAAK,EAAEZ,UAAU,CAAC,CAACgB,MAAM,CAACH,QAAQ,CAAC;MAC3D,CAAC,CAAC;MACFA,QAAQ,CAACI,oBAAoB,CAAClB,SAAS,CAACT,qBAAqB,CAAC,IAAI,EAAEY,YAAY,CAAC,EAAEZ,qBAAqB,CAAC,IAAI,EAAEa,kBAAkB,CAAC,CAAC,CAAC;MACpI,OAAOU,QAAQ;IACjB;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EACE,CAAC,EAAE;IACD7C,GAAG,EAAE,MAAM;IACXiB,KAAK,EAAE,SAASiC,IAAIA,CAACC,YAAY,EAAE;MACjC,IAAIC,iBAAiB,GAAG9B,qBAAqB,CAAC,IAAI,EAAEa,kBAAkB,CAAC;MACvE,IAAI,CAACb,qBAAqB,CAAC,IAAI,EAAEc,2BAA2B,CAAC,IAAId,qBAAqB,CAAC,IAAI,EAAEY,YAAY,CAAC,CAAC1C,MAAM,KAAK2D,YAAY,CAAC3D,MAAM,EAAE;QACzI,IAAI2D,YAAY,CAAC3D,MAAM,KAAK,CAAC,EAAE;UAC7B2D,YAAY,GAAG,IAAIE,KAAK,CAACD,iBAAiB,CAAC5D,MAAM,CAAC,CAAC8D,IAAI,CAAChC,qBAAqB,CAAC,IAAI,EAAEe,kBAAkB,CAAC,CAAC;QAC1G,CAAC,MAAM;UACLV,qBAAqB,CAAC,IAAI,EAAEO,YAAY,EAAE,IAAImB,KAAK,CAACF,YAAY,CAAC3D,MAAM,CAAC,CAAC8D,IAAI,CAAChC,qBAAqB,CAAC,IAAI,EAAEe,kBAAkB,CAAC,CAAC,CAAC;QACjI;QACA,IAAI,CAACf,qBAAqB,CAAC,IAAI,EAAEc,2BAA2B,CAAC,EAAE;UAC7DT,qBAAqB,CAAC,IAAI,EAAES,2BAA2B,EAAE,IAAI,CAAC;UAC9DgB,iBAAiB,GAAG9B,qBAAqB,CAAC,IAAI,EAAEY,YAAY,CAAC;QAC/D;MACF;MACA,IAAIqB,OAAO,GAAGxB,SAAS,CAACqB,iBAAiB,EAAED,YAAY,CAAC;MACxD7B,qBAAqB,CAAC,IAAI,EAAEU,UAAU,CAAC,CAACwB,OAAO,CAAC,UAAUX,QAAQ,EAAE;QAClE,OAAOA,QAAQ,CAACY,MAAM,CAACF,OAAO,CAAC;MACjC,CAAC,CAAC;MACF5B,qBAAqB,CAAC,IAAI,EAAEQ,kBAAkB,EAAEgB,YAAY,CAAC;IAC/D;EACF,CAAC,CAAC,CAAC;EACH,OAAOb,iBAAiB;AAC1B,CAAC,EAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}