{"ast":null,"code":"/**\n * Try to choose plural form from available phrase propositions.\n *\n * @param {Array} phrasePropositions List of phrases propositions.\n * @param {number} pluralForm Number determining which phrase form should be used.\n *\n * @returns {string|Array} One particular phrase if it's possible, list of unchanged phrase propositions otherwise.\n */\nexport default function pluralize(phrasePropositions, pluralForm) {\n  var isPluralizable = Array.isArray(phrasePropositions) && Number.isInteger(pluralForm);\n  if (isPluralizable) {\n    return phrasePropositions[pluralForm];\n  }\n  return phrasePropositions;\n}","map":{"version":3,"names":["pluralize","phrasePropositions","pluralForm","isPluralizable","Array","isArray","Number","isInteger"],"sources":["/home/rstorey/wwwdev/Blucktool/node_modules/handsontable/i18n/phraseFormatters/pluralize.mjs"],"sourcesContent":["import \"core-js/modules/es.number.is-integer.js\";\nimport \"core-js/modules/es.number.constructor.js\";\n/**\n * Try to choose plural form from available phrase propositions.\n *\n * @param {Array} phrasePropositions List of phrases propositions.\n * @param {number} pluralForm Number determining which phrase form should be used.\n *\n * @returns {string|Array} One particular phrase if it's possible, list of unchanged phrase propositions otherwise.\n */\nexport default function pluralize(phrasePropositions, pluralForm) {\n  var isPluralizable = Array.isArray(phrasePropositions) && Number.isInteger(pluralForm);\n  if (isPluralizable) {\n    return phrasePropositions[pluralForm];\n  }\n  return phrasePropositions;\n}"],"mappings":"AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASA,SAASA,CAACC,kBAAkB,EAAEC,UAAU,EAAE;EAChE,IAAIC,cAAc,GAAGC,KAAK,CAACC,OAAO,CAACJ,kBAAkB,CAAC,IAAIK,MAAM,CAACC,SAAS,CAACL,UAAU,CAAC;EACtF,IAAIC,cAAc,EAAE;IAClB,OAAOF,kBAAkB,CAACC,UAAU,CAAC;EACvC;EACA,OAAOD,kBAAkB;AAC3B"},"metadata":{},"sourceType":"module","externalDependencies":[]}