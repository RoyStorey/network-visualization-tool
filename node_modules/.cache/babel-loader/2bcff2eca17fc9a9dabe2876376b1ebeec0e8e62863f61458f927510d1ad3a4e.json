{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (null != _i) {\n    var _s,\n      _e,\n      _x,\n      _r,\n      _arr = [],\n      _n = !0,\n      _d = !1;\n    try {\n      if (_x = (_i = _i.call(arr)).next, 0 === i) {\n        if (Object(_i) !== _i) return;\n        _n = !1;\n      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);\n    } catch (err) {\n      _d = !0, _e = err;\n    } finally {\n      try {\n        if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return;\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nfunction _get() {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get.bind();\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n      if (desc.get) {\n        return desc.get.call(arguments.length < 3 ? target : receiver);\n      }\n      return desc.value;\n    };\n  }\n  return _get.apply(this, arguments);\n}\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n  return object;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return _possibleConstructorReturn(this, result);\n  };\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _classPrivateMethodInitSpec(obj, privateSet) {\n  _checkPrivateRedeclaration(obj, privateSet);\n  privateSet.add(obj);\n}\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) {\n  _checkPrivateRedeclaration(obj, privateMap);\n  privateMap.set(obj, value);\n}\nfunction _checkPrivateRedeclaration(obj, privateCollection) {\n  if (privateCollection.has(obj)) {\n    throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n  }\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nfunction _classPrivateMethodGet(receiver, privateSet, fn) {\n  if (!privateSet.has(receiver)) {\n    throw new TypeError(\"attempted to get private field on non-instance\");\n  }\n  return fn;\n}\nfunction _classPrivateFieldGet(receiver, privateMap) {\n  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\");\n  return _classApplyDescriptorGet(receiver, descriptor);\n}\nfunction _classApplyDescriptorGet(receiver, descriptor) {\n  if (descriptor.get) {\n    return descriptor.get.call(receiver);\n  }\n  return descriptor.value;\n}\nfunction _classPrivateFieldSet(receiver, privateMap, value) {\n  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\");\n  _classApplyDescriptorSet(receiver, descriptor, value);\n  return value;\n}\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to \" + action + \" private field on non-instance\");\n  }\n  return privateMap.get(receiver);\n}\nfunction _classApplyDescriptorSet(receiver, descriptor, value) {\n  if (descriptor.set) {\n    descriptor.set.call(receiver, value);\n  } else {\n    if (!descriptor.writable) {\n      throw new TypeError(\"attempted to set read only private field\");\n    }\n    descriptor.value = value;\n  }\n}\nimport { BasePlugin } from \"../base/index.mjs\";\nimport Hooks from \"../../pluginHooks.mjs\";\nimport { stringify, parse } from \"../../3rdparty/SheetClip/index.mjs\";\nimport { arrayEach } from \"../../helpers/array.mjs\";\nimport { sanitize } from \"../../helpers/string.mjs\";\nimport { getSelectionText } from \"../../helpers/dom/element.mjs\";\nimport copyItem from \"./contextMenuItem/copy.mjs\";\nimport copyColumnHeadersOnlyItem from \"./contextMenuItem/copyColumnHeadersOnly.mjs\";\nimport copyWithColumnGroupHeadersItem from \"./contextMenuItem/copyWithColumnGroupHeaders.mjs\";\nimport copyWithColumnHeadersItem from \"./contextMenuItem/copyWithColumnHeaders.mjs\";\nimport cutItem from \"./contextMenuItem/cut.mjs\";\nimport PasteEvent from \"./pasteEvent.mjs\";\nimport { createElement, destroyElement } from \"./focusableElement.mjs\";\nimport { CopyableRangesFactory, normalizeRanges } from \"./copyableRanges.mjs\";\nimport { _dataToHTML, htmlToGridSettings } from \"../../utils/parseTable.mjs\";\nHooks.getSingleton().register('afterCopyLimit');\nHooks.getSingleton().register('modifyCopyableRange');\nHooks.getSingleton().register('beforeCut');\nHooks.getSingleton().register('afterCut');\nHooks.getSingleton().register('beforePaste');\nHooks.getSingleton().register('afterPaste');\nHooks.getSingleton().register('beforeCopy');\nHooks.getSingleton().register('afterCopy');\nexport var PLUGIN_KEY = 'copyPaste';\nexport var PLUGIN_PRIORITY = 80;\nvar SETTING_KEYS = ['fragmentSelection'];\nvar META_HEAD = ['<meta name=\"generator\" content=\"Handsontable\"/>', '<style type=\"text/css\">td{white-space:normal}br{mso-data-placement:same-cell}</style>'].join('');\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n/**\n * @description\n * Copy, cut, and paste data by using the `CopyPaste` plugin.\n *\n * Control the `CopyPaste` plugin programmatically through its [API methods](#methods).\n *\n * The user can access the copy-paste features through:\n * - The [context menu](@/guides/cell-features/clipboard.md#context-menu).\n * - The [keyboard shortcuts](@/guides/cell-features/clipboard.md#related-keyboard-shortcuts).\n * - The browser's menu bar.\n *\n * Read more:\n * - [Guides: Clipboard](@/guides/cell-features/clipboard.md)\n * - [Configuration options: `copyPaste`](@/api/options.md#copypaste)\n *\n * @example\n * ```js\n * // enable the plugin with the default configuration\n * copyPaste: true,\n *\n * // or, enable the plugin with a custom configuration\n * copyPaste: {\n *   columnsLimit: 25,\n *   rowsLimit: 50,\n *   pasteMode: 'shift_down',\n *   copyColumnHeaders: true,\n *   copyColumnGroupHeaders: true,\n *   copyColumnHeadersOnly: true,\n *   uiContainer: document.body,\n * },\n * ```\n * @class CopyPaste\n * @plugin CopyPaste\n */\nvar _enableCopyColumnHeaders = /*#__PURE__*/new WeakMap();\nvar _enableCopyColumnGroupHeaders = /*#__PURE__*/new WeakMap();\nvar _enableCopyColumnHeadersOnly = /*#__PURE__*/new WeakMap();\nvar _copyMode = /*#__PURE__*/new WeakMap();\nvar _isTriggeredByCopy = /*#__PURE__*/new WeakMap();\nvar _isTriggeredByCut = /*#__PURE__*/new WeakMap();\nvar _copyableRangesFactory = /*#__PURE__*/new WeakMap();\nvar _countCopiedHeaders = /*#__PURE__*/new WeakSet();\nexport var CopyPaste = /*#__PURE__*/function (_BasePlugin) {\n  _inherits(CopyPaste, _BasePlugin);\n  var _super = _createSuper(CopyPaste);\n  function CopyPaste() {\n    var _this;\n    _classCallCheck(this, CopyPaste);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _classPrivateMethodInitSpec(_assertThisInitialized(_this), _countCopiedHeaders);\n    _defineProperty(_assertThisInitialized(_this), \"columnsLimit\", Infinity);\n    _defineProperty(_assertThisInitialized(_this), \"rowsLimit\", Infinity);\n    _defineProperty(_assertThisInitialized(_this), \"pasteMode\", 'overwrite');\n    _defineProperty(_assertThisInitialized(_this), \"uiContainer\", _this.hot.rootDocument.body);\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _enableCopyColumnHeaders, {\n      writable: true,\n      value: false\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _enableCopyColumnGroupHeaders, {\n      writable: true,\n      value: false\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _enableCopyColumnHeadersOnly, {\n      writable: true,\n      value: false\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _copyMode, {\n      writable: true,\n      value: 'cells-only'\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _isTriggeredByCopy, {\n      writable: true,\n      value: false\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _isTriggeredByCut, {\n      writable: true,\n      value: false\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _copyableRangesFactory, {\n      writable: true,\n      value: new CopyableRangesFactory({\n        countRows: function countRows() {\n          return _this.hot.countRows();\n        },\n        countColumns: function countColumns() {\n          return _this.hot.countCols();\n        },\n        rowsLimit: function rowsLimit() {\n          return _this.rowsLimit;\n        },\n        columnsLimit: function columnsLimit() {\n          return _this.columnsLimit;\n        },\n        countColumnHeaders: function countColumnHeaders() {\n          return _this.hot.view.getColumnHeadersCount();\n        }\n      })\n    });\n    _defineProperty(_assertThisInitialized(_this), \"copyableRanges\", []);\n    _defineProperty(_assertThisInitialized(_this), \"focusableElement\", void 0);\n    return _this;\n  }\n  _createClass(CopyPaste, [{\n    key: \"isEnabled\",\n    value:\n    /**\n     * Checks if the [`CopyPaste`](#copypaste) plugin is enabled.\n     *\n     * This method gets called by Handsontable's [`beforeInit`](@/api/hooks.md#beforeinit) hook.\n     * If it returns `true`, the [`enablePlugin()`](#enableplugin) method gets called.\n     *\n     * @returns {boolean}\n     */\n    function isEnabled() {\n      return !!this.hot.getSettings()[PLUGIN_KEY];\n    }\n\n    /**\n     * Enables the [`CopyPaste`](#copypaste) plugin for your Handsontable instance.\n     */\n  }, {\n    key: \"enablePlugin\",\n    value: function enablePlugin() {\n      var _this2 = this;\n      if (this.enabled) {\n        return;\n      }\n      var _this$hot$getSettings = this.hot.getSettings(),\n        settings = _this$hot$getSettings[PLUGIN_KEY];\n      if (_typeof(settings) === 'object') {\n        var _settings$pasteMode, _settings$uiContainer;\n        this.pasteMode = (_settings$pasteMode = settings.pasteMode) !== null && _settings$pasteMode !== void 0 ? _settings$pasteMode : this.pasteMode;\n        this.rowsLimit = isNaN(settings.rowsLimit) ? this.rowsLimit : settings.rowsLimit;\n        this.columnsLimit = isNaN(settings.columnsLimit) ? this.columnsLimit : settings.columnsLimit;\n        _classPrivateFieldSet(this, _enableCopyColumnHeaders, !!settings.copyColumnHeaders);\n        _classPrivateFieldSet(this, _enableCopyColumnGroupHeaders, !!settings.copyColumnGroupHeaders);\n        _classPrivateFieldSet(this, _enableCopyColumnHeadersOnly, !!settings.copyColumnHeadersOnly);\n        this.uiContainer = (_settings$uiContainer = settings.uiContainer) !== null && _settings$uiContainer !== void 0 ? _settings$uiContainer : this.uiContainer;\n      }\n      this.addHook('afterContextMenuDefaultOptions', function (options) {\n        return _this2.onAfterContextMenuDefaultOptions(options);\n      });\n      this.addHook('afterOnCellMouseUp', function () {\n        return _this2.onAfterOnCellMouseUp();\n      });\n      this.addHook('afterSelectionEnd', function () {\n        return _this2.onAfterSelectionEnd();\n      });\n      this.addHook('beforeKeyDown', function () {\n        return _this2.onBeforeKeyDown();\n      });\n      this.focusableElement = createElement(this.uiContainer);\n      this.focusableElement.addLocalHook('copy', function (event) {\n        return _this2.onCopy(event);\n      }).addLocalHook('cut', function (event) {\n        return _this2.onCut(event);\n      }).addLocalHook('paste', function (event) {\n        return _this2.onPaste(event);\n      });\n      _get(_getPrototypeOf(CopyPaste.prototype), \"enablePlugin\", this).call(this);\n    }\n\n    /**\n     * Updates the state of the [`CopyPaste`](#copypaste) plugin.\n     *\n     * Gets called when [`updateSettings()`](@/api/core.md#updatesettings)\n     * is invoked with any of the following configuration options:\n     *  - [`copyPaste`](@/api/options.md#copypaste)\n     *  - [`fragmentSelection`](@/api/options.md#fragmentselection)\n     */\n  }, {\n    key: \"updatePlugin\",\n    value: function updatePlugin() {\n      this.disablePlugin();\n      this.enablePlugin();\n      this.getOrCreateFocusableElement();\n      _get(_getPrototypeOf(CopyPaste.prototype), \"updatePlugin\", this).call(this);\n    }\n\n    /**\n     * Disables the [`CopyPaste`](#copypaste) plugin for your Handsontable instance.\n     */\n  }, {\n    key: \"disablePlugin\",\n    value: function disablePlugin() {\n      if (this.focusableElement) {\n        destroyElement(this.focusableElement);\n      }\n      _get(_getPrototypeOf(CopyPaste.prototype), \"disablePlugin\", this).call(this);\n    }\n\n    /**\n     * Copies the contents of the selected cells (and/or their related column headers) to the system clipboard.\n     *\n     * Takes an optional parameter (`copyMode`) that defines the scope of copying:\n     *\n     * | `copyMode` value            | Description                                                     |\n     * | --------------------------- | --------------------------------------------------------------- |\n     * | `'cells-only'` (default)    | Copy the selected cells                                         |\n     * | `'with-column-headers'`     | - Copy the selected cells<br>- Copy the nearest column headers  |\n     * | `'with-all-column-headers'` | - Copy the selected cells<br>- Copy all related columns headers |\n     * | `'column-headers-only'`     | Copy the nearest column headers (without copying cells)         |\n     *\n     * @param {string} [copyMode='cells-only'] Copy mode.\n     */\n  }, {\n    key: \"copy\",\n    value: function copy() {\n      var copyMode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'cells-only';\n      _classPrivateFieldSet(this, _copyMode, copyMode);\n      _classPrivateFieldSet(this, _isTriggeredByCopy, true);\n      this.getOrCreateFocusableElement();\n      this.focusableElement.focus();\n      this.hot.rootDocument.execCommand('copy');\n    }\n\n    /**\n     * Copies the contents of the selected cells.\n     */\n  }, {\n    key: \"copyCellsOnly\",\n    value: function copyCellsOnly() {\n      this.copy('cells-only');\n    }\n    /**\n     * Copies the contents of column headers that are nearest to the selected cells.\n     */\n  }, {\n    key: \"copyColumnHeadersOnly\",\n    value: function copyColumnHeadersOnly() {\n      this.copy('column-headers-only');\n    }\n    /**\n     * Copies the contents of the selected cells and all their related column headers.\n     */\n  }, {\n    key: \"copyWithAllColumnHeaders\",\n    value: function copyWithAllColumnHeaders() {\n      this.copy('with-column-group-headers');\n    }\n    /**\n     * Copies the contents of the selected cells and their nearest column headers.\n     */\n  }, {\n    key: \"copyWithColumnHeaders\",\n    value: function copyWithColumnHeaders() {\n      this.copy('with-column-headers');\n    }\n\n    /**\n     * Cuts the contents of the selected cells to the system clipboard.\n     */\n  }, {\n    key: \"cut\",\n    value: function cut() {\n      _classPrivateFieldSet(this, _isTriggeredByCut, true);\n      this.getOrCreateFocusableElement();\n      this.focusableElement.focus();\n      this.hot.rootDocument.execCommand('cut');\n    }\n\n    /**\n     * Converts the contents of multiple ranges (`ranges`) into a single string.\n     *\n     * @param {Array<{startRow: number, startCol: number, endRow: number, endCol: number}>} ranges Array of objects with properties `startRow`, `endRow`, `startCol` and `endCol`.\n     * @returns {string} A string that will be copied to the clipboard.\n     */\n  }, {\n    key: \"getRangedCopyableData\",\n    value: function getRangedCopyableData(ranges) {\n      return stringify(this.getRangedData(ranges));\n    }\n\n    /**\n     * Converts the contents of multiple ranges (`ranges`) into an array of arrays.\n     *\n     * @param {Array<{startRow: number, startCol: number, endRow: number, endCol: number}>} ranges Array of objects with properties `startRow`, `startCol`, `endRow` and `endCol`.\n     * @returns {Array[]} An array of arrays that will be copied to the clipboard.\n     */\n  }, {\n    key: \"getRangedData\",\n    value: function getRangedData(ranges) {\n      var _this3 = this;\n      var data = [];\n      var _normalizeRanges = normalizeRanges(ranges),\n        rows = _normalizeRanges.rows,\n        columns = _normalizeRanges.columns;\n\n      // concatenate all rows and columns data defined in ranges into one copyable string\n      arrayEach(rows, function (row) {\n        var rowSet = [];\n        arrayEach(columns, function (column) {\n          if (row < 0) {\n            // `row` as the second argument acts here as the `headerLevel` argument\n            rowSet.push(_this3.hot.getColHeader(column, row));\n          } else {\n            rowSet.push(_this3.hot.getCopyableData(row, column));\n          }\n        });\n        data.push(rowSet);\n      });\n      return data;\n    }\n\n    /**\n     * Simulates the paste action.\n     *\n     * For security reasons, modern browsers don't allow reading from the system clipboard.\n     *\n     * @param {string} pastableText The value to paste, as a raw string.\n     * @param {string} [pastableHtml=''] The value to paste, as HTML.\n     */\n  }, {\n    key: \"paste\",\n    value: function paste() {\n      var pastableText = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var pastableHtml = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : pastableText;\n      if (!pastableText && !pastableHtml) {\n        return;\n      }\n      var pasteData = new PasteEvent();\n      if (pastableText) {\n        pasteData.clipboardData.setData('text/plain', pastableText);\n      }\n      if (pastableHtml) {\n        pasteData.clipboardData.setData('text/html', pastableHtml);\n      }\n      this.getOrCreateFocusableElement();\n      this.onPaste(pasteData);\n    }\n\n    /**\n     * Prepares copyable text from the cells selection in the invisible textarea.\n     */\n  }, {\n    key: \"setCopyableText\",\n    value: function setCopyableText() {\n      var selectionRange = this.hot.getSelectedRangeLast();\n      if (!selectionRange) {\n        return;\n      }\n      _classPrivateFieldGet(this, _copyableRangesFactory).setSelectedRange(selectionRange);\n      var groupedRanges = new Map([['headers', null], ['cells', null]]);\n      if (_classPrivateFieldGet(this, _copyMode) === 'column-headers-only') {\n        groupedRanges.set('headers', _classPrivateFieldGet(this, _copyableRangesFactory).getMostBottomColumnHeadersRange());\n      } else {\n        if (_classPrivateFieldGet(this, _copyMode) === 'with-column-headers') {\n          groupedRanges.set('headers', _classPrivateFieldGet(this, _copyableRangesFactory).getMostBottomColumnHeadersRange());\n        } else if (_classPrivateFieldGet(this, _copyMode) === 'with-column-group-headers') {\n          groupedRanges.set('headers', _classPrivateFieldGet(this, _copyableRangesFactory).getAllColumnHeadersRange());\n        }\n        groupedRanges.set('cells', _classPrivateFieldGet(this, _copyableRangesFactory).getCellsRange());\n      }\n      this.copyableRanges = Array.from(groupedRanges.values()).filter(function (range) {\n        return range !== null;\n      }).map(function (_ref) {\n        var startRow = _ref.startRow,\n          startCol = _ref.startCol,\n          endRow = _ref.endRow,\n          endCol = _ref.endCol;\n        return {\n          startRow: startRow,\n          startCol: startCol,\n          endRow: endRow,\n          endCol: endCol\n        };\n      });\n      this.copyableRanges = this.hot.runHooks('modifyCopyableRange', this.copyableRanges);\n      var cellsRange = groupedRanges.get('cells');\n      if (cellsRange !== null && cellsRange.isRangeTrimmed) {\n        var startRow = cellsRange.startRow,\n          startCol = cellsRange.startCol,\n          endRow = cellsRange.endRow,\n          endCol = cellsRange.endCol;\n        this.hot.runHooks('afterCopyLimit', endRow - startRow + 1, endCol - startCol + 1, this.rowsLimit, this.columnsLimit);\n      }\n    }\n\n    /**\n     * Force focus on editable element.\n     *\n     * @private\n     */\n  }, {\n    key: \"getOrCreateFocusableElement\",\n    value: function getOrCreateFocusableElement() {\n      var _this$hot$getActiveEd;\n      var editableElement = (_this$hot$getActiveEd = this.hot.getActiveEditor()) === null || _this$hot$getActiveEd === void 0 ? void 0 : _this$hot$getActiveEd.TEXTAREA;\n      if (editableElement) {\n        this.focusableElement.setFocusableElement(editableElement);\n      } else {\n        this.focusableElement.useSecondaryElement();\n      }\n    }\n\n    /**\n     * Verifies if editor exists and is open.\n     *\n     * @private\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isEditorOpened\",\n    value: function isEditorOpened() {\n      var _this$hot$getActiveEd2;\n      return (_this$hot$getActiveEd2 = this.hot.getActiveEditor()) === null || _this$hot$getActiveEd2 === void 0 ? void 0 : _this$hot$getActiveEd2.isOpened();\n    }\n\n    /**\n     * Counts how many column headers will be copied based on the passed range.\n     *\n     * @private\n     * @param {Array<{startRow: number, startCol: number, endRow: number, endCol: number}>} ranges Array of objects with properties `startRow`, `startCol`, `endRow` and `endCol`.\n     * @returns {{ columnHeadersCount: number }} Returns an object with keys that holds\n     *                                           information with the number of copied headers.\n     */\n  }, {\n    key: \"populateValues\",\n    value:\n    /**\n     * Prepares new values to populate them into datasource.\n     *\n     * @private\n     * @param {Array} inputArray An array of the data to populate.\n     * @param {Array} [selection] The selection which indicates from what position the data will be populated.\n     * @returns {Array} Range coordinates after populate data.\n     */\n    function populateValues(inputArray) {\n      var selection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.hot.getSelectedRangeLast();\n      if (!inputArray.length) {\n        return;\n      }\n      var populatedRowsLength = inputArray.length;\n      var populatedColumnsLength = inputArray[0].length;\n      var newRows = [];\n      var _selection$getTopStar = selection.getTopStartCorner(),\n        startRow = _selection$getTopStar.row,\n        startColumn = _selection$getTopStar.col;\n      var _selection$getBottomE = selection.getBottomEndCorner(),\n        endRowFromSelection = _selection$getBottomE.row,\n        endColumnFromSelection = _selection$getBottomE.col;\n      var visualRowForPopulatedData = startRow;\n      var visualColumnForPopulatedData = startColumn;\n      var lastVisualRow = startRow;\n      var lastVisualColumn = startColumn;\n\n      // We try to populate just all copied data or repeat copied data within a selection. Please keep in mind that we\n      // don't know whether populated data is bigger than selection on start as there are some cells for which values\n      // should be not inserted (it's known right after getting cell meta).\n      while (newRows.length < populatedRowsLength || visualRowForPopulatedData <= endRowFromSelection) {\n        var _this$hot$getCellMeta = this.hot.getCellMeta(visualRowForPopulatedData, startColumn),\n          skipRowOnPaste = _this$hot$getCellMeta.skipRowOnPaste,\n          visualRow = _this$hot$getCellMeta.visualRow;\n        visualRowForPopulatedData = visualRow + 1;\n        if (skipRowOnPaste === true) {\n          /* eslint-disable no-continue */\n          continue;\n        }\n        lastVisualRow = visualRow;\n        visualColumnForPopulatedData = startColumn;\n        var newRow = [];\n        var insertedRow = newRows.length % populatedRowsLength;\n        while (newRow.length < populatedColumnsLength || visualColumnForPopulatedData <= endColumnFromSelection) {\n          var _this$hot$getCellMeta2 = this.hot.getCellMeta(startRow, visualColumnForPopulatedData),\n            skipColumnOnPaste = _this$hot$getCellMeta2.skipColumnOnPaste,\n            visualCol = _this$hot$getCellMeta2.visualCol;\n          visualColumnForPopulatedData = visualCol + 1;\n          if (skipColumnOnPaste === true) {\n            /* eslint-disable no-continue */\n            continue;\n          }\n          lastVisualColumn = visualCol;\n          var insertedColumn = newRow.length % populatedColumnsLength;\n          newRow.push(inputArray[insertedRow][insertedColumn]);\n        }\n        newRows.push(newRow);\n      }\n      this.hot.populateFromArray(startRow, startColumn, newRows, void 0, void 0, 'CopyPaste.paste', this.pasteMode);\n      return [startRow, startColumn, lastVisualRow, lastVisualColumn];\n    }\n\n    /**\n     * `copy` event callback on textarea element.\n     *\n     * @param {Event} event ClipboardEvent.\n     * @private\n     */\n  }, {\n    key: \"onCopy\",\n    value: function onCopy(event) {\n      if (!this.hot.isListening() && !_classPrivateFieldGet(this, _isTriggeredByCopy) || this.isEditorOpened()) {\n        return;\n      }\n      this.setCopyableText();\n      _classPrivateFieldSet(this, _isTriggeredByCopy, false);\n      var data = this.getRangedData(this.copyableRanges);\n      var copiedHeadersCount = _classPrivateMethodGet(this, _countCopiedHeaders, _countCopiedHeaders2).call(this, this.copyableRanges);\n      var allowCopying = !!this.hot.runHooks('beforeCopy', data, this.copyableRanges, copiedHeadersCount);\n      if (allowCopying) {\n        var textPlain = stringify(data);\n        if (event && event.clipboardData) {\n          var textHTML = _dataToHTML(data, this.hot.rootDocument);\n          event.clipboardData.setData('text/plain', textPlain);\n          event.clipboardData.setData('text/html', [META_HEAD, textHTML].join(''));\n        } else if (typeof ClipboardEvent === 'undefined') {\n          this.hot.rootWindow.clipboardData.setData('Text', textPlain);\n        }\n        this.hot.runHooks('afterCopy', data, this.copyableRanges, copiedHeadersCount);\n      }\n      _classPrivateFieldSet(this, _copyMode, 'cells-only');\n      event.preventDefault();\n    }\n\n    /**\n     * `cut` event callback on textarea element.\n     *\n     * @param {Event} event ClipboardEvent.\n     * @private\n     */\n  }, {\n    key: \"onCut\",\n    value: function onCut(event) {\n      if (!this.hot.isListening() && !_classPrivateFieldGet(this, _isTriggeredByCut) || this.isEditorOpened()) {\n        return;\n      }\n      this.setCopyableText();\n      _classPrivateFieldSet(this, _isTriggeredByCut, false);\n      var rangedData = this.getRangedData(this.copyableRanges);\n      var allowCuttingOut = !!this.hot.runHooks('beforeCut', rangedData, this.copyableRanges);\n      if (allowCuttingOut) {\n        var textPlain = stringify(rangedData);\n        if (event && event.clipboardData) {\n          var textHTML = _dataToHTML(rangedData, this.hot.rootDocument);\n          event.clipboardData.setData('text/plain', textPlain);\n          event.clipboardData.setData('text/html', [META_HEAD, textHTML].join(''));\n        } else if (typeof ClipboardEvent === 'undefined') {\n          this.hot.rootWindow.clipboardData.setData('Text', textPlain);\n        }\n        this.hot.emptySelectedCells('CopyPaste.cut');\n        this.hot.runHooks('afterCut', rangedData, this.copyableRanges);\n      }\n      event.preventDefault();\n    }\n\n    /**\n     * `paste` event callback on textarea element.\n     *\n     * @param {Event} event ClipboardEvent or pseudo ClipboardEvent, if paste was called manually.\n     * @private\n     */\n  }, {\n    key: \"onPaste\",\n    value: function onPaste(event) {\n      if (!this.hot.isListening() || this.isEditorOpened()) {\n        return;\n      }\n      if (event && event.preventDefault) {\n        event.preventDefault();\n      }\n      var pastedData;\n      if (event && typeof event.clipboardData !== 'undefined') {\n        var textHTML = sanitize(event.clipboardData.getData('text/html'), {\n          ADD_TAGS: ['meta'],\n          ADD_ATTR: ['content'],\n          FORCE_BODY: true\n        });\n        if (textHTML && /(<table)|(<TABLE)/g.test(textHTML)) {\n          var parsedConfig = htmlToGridSettings(textHTML, this.hot.rootDocument);\n          pastedData = parsedConfig.data;\n        } else {\n          pastedData = event.clipboardData.getData('text/plain');\n        }\n      } else if (typeof ClipboardEvent === 'undefined' && typeof this.hot.rootWindow.clipboardData !== 'undefined') {\n        pastedData = this.hot.rootWindow.clipboardData.getData('Text');\n      }\n      if (typeof pastedData === 'string') {\n        pastedData = parse(pastedData);\n      }\n      if (pastedData && pastedData.length === 0) {\n        return;\n      }\n      if (this.hot.runHooks('beforePaste', pastedData, this.copyableRanges) === false) {\n        return;\n      }\n      var _this$populateValues = this.populateValues(pastedData),\n        _this$populateValues2 = _slicedToArray(_this$populateValues, 4),\n        startRow = _this$populateValues2[0],\n        startColumn = _this$populateValues2[1],\n        endRow = _this$populateValues2[2],\n        endColumn = _this$populateValues2[3];\n      this.hot.selectCell(startRow, startColumn, Math.min(this.hot.countRows() - 1, endRow), Math.min(this.hot.countCols() - 1, endColumn));\n      this.hot.runHooks('afterPaste', pastedData, this.copyableRanges);\n    }\n\n    /**\n     * Add copy and cut options to the Context Menu.\n     *\n     * @private\n     * @param {object} options Contains default added options of the Context Menu.\n     */\n  }, {\n    key: \"onAfterContextMenuDefaultOptions\",\n    value: function onAfterContextMenuDefaultOptions(options) {\n      options.items.push({\n        name: '---------'\n      }, copyItem(this));\n      if (_classPrivateFieldGet(this, _enableCopyColumnHeaders)) {\n        options.items.push(copyWithColumnHeadersItem(this));\n      }\n      if (_classPrivateFieldGet(this, _enableCopyColumnGroupHeaders)) {\n        options.items.push(copyWithColumnGroupHeadersItem(this));\n      }\n      if (_classPrivateFieldGet(this, _enableCopyColumnHeadersOnly)) {\n        options.items.push(copyColumnHeadersOnlyItem(this));\n      }\n      options.items.push(cutItem(this));\n    }\n\n    /**\n     * Force focus on focusableElement.\n     *\n     * @private\n     */\n  }, {\n    key: \"onAfterOnCellMouseUp\",\n    value: function onAfterOnCellMouseUp() {\n      // Changing focused element will remove current selection. It's unnecessary in case when we give possibility\n      // for fragment selection\n      if (!this.hot.isListening() || this.isEditorOpened() || this.hot.getSettings().fragmentSelection) {\n        return;\n      }\n      this.getOrCreateFocusableElement();\n      this.focusableElement.focus();\n    }\n\n    /**\n     * Force focus on focusableElement after end of the selection.\n     *\n     * @private\n     */\n  }, {\n    key: \"onAfterSelectionEnd\",\n    value: function onAfterSelectionEnd() {\n      if (this.isEditorOpened()) {\n        return;\n      }\n      this.getOrCreateFocusableElement();\n      if (this.hot.getSettings().fragmentSelection && this.focusableElement.getFocusableElement() !== this.hot.rootDocument.activeElement && getSelectionText()) {\n        return;\n      }\n      this.setCopyableText();\n      this.focusableElement.focus();\n    }\n\n    /**\n     * `beforeKeyDown` listener to force focus of focusableElement.\n     *\n     * @private\n     */\n  }, {\n    key: \"onBeforeKeyDown\",\n    value: function onBeforeKeyDown() {\n      if (!this.hot.isListening() || this.isEditorOpened()) {\n        return;\n      }\n      var activeElement = this.hot.rootDocument.activeElement;\n      var activeEditor = this.hot.getActiveEditor();\n      if (!activeEditor || activeElement !== this.focusableElement.getFocusableElement() && activeElement !== activeEditor.select) {\n        return;\n      }\n      this.getOrCreateFocusableElement();\n      this.focusableElement.focus();\n    }\n\n    /**\n     * Destroys the `CopyPaste` plugin instance.\n     */\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (this.focusableElement) {\n        destroyElement(this.focusableElement);\n        this.focusableElement = null;\n      }\n      _get(_getPrototypeOf(CopyPaste.prototype), \"destroy\", this).call(this);\n    }\n  }], [{\n    key: \"PLUGIN_KEY\",\n    get: function get() {\n      return PLUGIN_KEY;\n    }\n  }, {\n    key: \"SETTING_KEYS\",\n    get: function get() {\n      return [PLUGIN_KEY].concat(SETTING_KEYS);\n    }\n  }, {\n    key: \"PLUGIN_PRIORITY\",\n    get: function get() {\n      return PLUGIN_PRIORITY;\n    }\n\n    /**\n     * The maximum number of columns than can be copied to the clipboard.\n     *\n     * @type {number}\n     * @default Infinity\n     */\n  }]);\n\n  return CopyPaste;\n}(BasePlugin);\nfunction _countCopiedHeaders2(ranges) {\n  var _normalizeRanges2 = normalizeRanges(ranges),\n    rows = _normalizeRanges2.rows;\n  var columnHeadersCount = 0;\n  for (var row = 0; row < rows.length; row++) {\n    if (rows[row] >= 0) {\n      break;\n    }\n    columnHeadersCount += 1;\n  }\n  return {\n    columnHeadersCount: columnHeadersCount\n  };\n}","map":{"version":3,"names":["_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","o","minLen","_arrayLikeToArray","n","Object","prototype","toString","call","slice","constructor","name","Array","from","test","len","length","arr2","_i","Symbol","iterator","_s","_e","_x","_r","_arr","_n","_d","next","done","push","value","err","return","isArray","_typeof","obj","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","_toPropertyKey","key","_createClass","protoProps","staticProps","_get","Reflect","get","bind","property","receiver","base","_superPropBase","desc","getOwnPropertyDescriptor","arguments","apply","object","hasOwnProperty","_getPrototypeOf","_inherits","subClass","superClass","create","_setPrototypeOf","p","setPrototypeOf","__proto__","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","result","NewTarget","construct","_possibleConstructorReturn","self","_assertThisInitialized","ReferenceError","sham","Proxy","Boolean","valueOf","e","getPrototypeOf","_classPrivateMethodInitSpec","privateSet","_checkPrivateRedeclaration","add","_classPrivateFieldInitSpec","privateMap","set","privateCollection","has","_defineProperty","arg","_toPrimitive","String","input","hint","prim","toPrimitive","undefined","res","Number","_classPrivateMethodGet","fn","_classPrivateFieldGet","_classExtractFieldDescriptor","_classApplyDescriptorGet","_classPrivateFieldSet","_classApplyDescriptorSet","action","BasePlugin","Hooks","stringify","parse","arrayEach","sanitize","getSelectionText","copyItem","copyColumnHeadersOnlyItem","copyWithColumnGroupHeadersItem","copyWithColumnHeadersItem","cutItem","PasteEvent","createElement","destroyElement","CopyableRangesFactory","normalizeRanges","_dataToHTML","htmlToGridSettings","getSingleton","register","PLUGIN_KEY","PLUGIN_PRIORITY","SETTING_KEYS","META_HEAD","join","_enableCopyColumnHeaders","WeakMap","_enableCopyColumnGroupHeaders","_enableCopyColumnHeadersOnly","_copyMode","_isTriggeredByCopy","_isTriggeredByCut","_copyableRangesFactory","_countCopiedHeaders","WeakSet","CopyPaste","_BasePlugin","_super","_this","_len","args","_key","concat","Infinity","hot","rootDocument","body","countRows","countColumns","countCols","rowsLimit","columnsLimit","countColumnHeaders","view","getColumnHeadersCount","isEnabled","getSettings","enablePlugin","_this2","enabled","_this$hot$getSettings","settings","_settings$pasteMode","_settings$uiContainer","pasteMode","isNaN","copyColumnHeaders","copyColumnGroupHeaders","copyColumnHeadersOnly","uiContainer","addHook","options","onAfterContextMenuDefaultOptions","onAfterOnCellMouseUp","onAfterSelectionEnd","onBeforeKeyDown","focusableElement","addLocalHook","event","onCopy","onCut","onPaste","updatePlugin","disablePlugin","getOrCreateFocusableElement","copy","copyMode","focus","execCommand","copyCellsOnly","copyWithAllColumnHeaders","copyWithColumnHeaders","cut","getRangedCopyableData","ranges","getRangedData","_this3","data","_normalizeRanges","rows","columns","row","rowSet","column","getColHeader","getCopyableData","paste","pastableText","pastableHtml","pasteData","clipboardData","setData","setCopyableText","selectionRange","getSelectedRangeLast","setSelectedRange","groupedRanges","Map","getMostBottomColumnHeadersRange","getAllColumnHeadersRange","getCellsRange","copyableRanges","values","filter","range","map","_ref","startRow","startCol","endRow","endCol","runHooks","cellsRange","isRangeTrimmed","_this$hot$getActiveEd","editableElement","getActiveEditor","TEXTAREA","setFocusableElement","useSecondaryElement","isEditorOpened","_this$hot$getActiveEd2","isOpened","populateValues","inputArray","selection","populatedRowsLength","populatedColumnsLength","newRows","_selection$getTopStar","getTopStartCorner","startColumn","col","_selection$getBottomE","getBottomEndCorner","endRowFromSelection","endColumnFromSelection","visualRowForPopulatedData","visualColumnForPopulatedData","lastVisualRow","lastVisualColumn","_this$hot$getCellMeta","getCellMeta","skipRowOnPaste","visualRow","newRow","insertedRow","_this$hot$getCellMeta2","skipColumnOnPaste","visualCol","insertedColumn","populateFromArray","isListening","copiedHeadersCount","_countCopiedHeaders2","allowCopying","textPlain","textHTML","ClipboardEvent","rootWindow","preventDefault","rangedData","allowCuttingOut","emptySelectedCells","pastedData","getData","ADD_TAGS","ADD_ATTR","FORCE_BODY","parsedConfig","_this$populateValues","_this$populateValues2","endColumn","selectCell","Math","min","items","fragmentSelection","getFocusableElement","activeElement","activeEditor","select","destroy","_normalizeRanges2","columnHeadersCount"],"sources":["/home/rstorey/wwwdev/Blucktool/node_modules/handsontable/plugins/copyPaste/copyPaste.mjs"],"sourcesContent":["function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _get() { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nfunction _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError(\"attempted to get private field on non-instance\"); } return fn; }\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.weak-map.js\";\nimport \"core-js/modules/es.weak-set.js\";\nimport \"core-js/modules/es.symbol.to-primitive.js\";\nimport \"core-js/modules/es.date.to-primitive.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.object.set-prototype-of.js\";\nimport \"core-js/modules/es.object.get-prototype-of.js\";\nimport \"core-js/modules/es.reflect.construct.js\";\nimport \"core-js/modules/es.reflect.get.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport { BasePlugin } from \"../base/index.mjs\";\nimport Hooks from \"../../pluginHooks.mjs\";\nimport { stringify, parse } from \"../../3rdparty/SheetClip/index.mjs\";\nimport { arrayEach } from \"../../helpers/array.mjs\";\nimport { sanitize } from \"../../helpers/string.mjs\";\nimport { getSelectionText } from \"../../helpers/dom/element.mjs\";\nimport copyItem from \"./contextMenuItem/copy.mjs\";\nimport copyColumnHeadersOnlyItem from \"./contextMenuItem/copyColumnHeadersOnly.mjs\";\nimport copyWithColumnGroupHeadersItem from \"./contextMenuItem/copyWithColumnGroupHeaders.mjs\";\nimport copyWithColumnHeadersItem from \"./contextMenuItem/copyWithColumnHeaders.mjs\";\nimport cutItem from \"./contextMenuItem/cut.mjs\";\nimport PasteEvent from \"./pasteEvent.mjs\";\nimport { createElement, destroyElement } from \"./focusableElement.mjs\";\nimport { CopyableRangesFactory, normalizeRanges } from \"./copyableRanges.mjs\";\nimport { _dataToHTML, htmlToGridSettings } from \"../../utils/parseTable.mjs\";\nHooks.getSingleton().register('afterCopyLimit');\nHooks.getSingleton().register('modifyCopyableRange');\nHooks.getSingleton().register('beforeCut');\nHooks.getSingleton().register('afterCut');\nHooks.getSingleton().register('beforePaste');\nHooks.getSingleton().register('afterPaste');\nHooks.getSingleton().register('beforeCopy');\nHooks.getSingleton().register('afterCopy');\nexport var PLUGIN_KEY = 'copyPaste';\nexport var PLUGIN_PRIORITY = 80;\nvar SETTING_KEYS = ['fragmentSelection'];\nvar META_HEAD = ['<meta name=\"generator\" content=\"Handsontable\"/>', '<style type=\"text/css\">td{white-space:normal}br{mso-data-placement:same-cell}</style>'].join('');\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n/**\n * @description\n * Copy, cut, and paste data by using the `CopyPaste` plugin.\n *\n * Control the `CopyPaste` plugin programmatically through its [API methods](#methods).\n *\n * The user can access the copy-paste features through:\n * - The [context menu](@/guides/cell-features/clipboard.md#context-menu).\n * - The [keyboard shortcuts](@/guides/cell-features/clipboard.md#related-keyboard-shortcuts).\n * - The browser's menu bar.\n *\n * Read more:\n * - [Guides: Clipboard](@/guides/cell-features/clipboard.md)\n * - [Configuration options: `copyPaste`](@/api/options.md#copypaste)\n *\n * @example\n * ```js\n * // enable the plugin with the default configuration\n * copyPaste: true,\n *\n * // or, enable the plugin with a custom configuration\n * copyPaste: {\n *   columnsLimit: 25,\n *   rowsLimit: 50,\n *   pasteMode: 'shift_down',\n *   copyColumnHeaders: true,\n *   copyColumnGroupHeaders: true,\n *   copyColumnHeadersOnly: true,\n *   uiContainer: document.body,\n * },\n * ```\n * @class CopyPaste\n * @plugin CopyPaste\n */\nvar _enableCopyColumnHeaders = /*#__PURE__*/new WeakMap();\nvar _enableCopyColumnGroupHeaders = /*#__PURE__*/new WeakMap();\nvar _enableCopyColumnHeadersOnly = /*#__PURE__*/new WeakMap();\nvar _copyMode = /*#__PURE__*/new WeakMap();\nvar _isTriggeredByCopy = /*#__PURE__*/new WeakMap();\nvar _isTriggeredByCut = /*#__PURE__*/new WeakMap();\nvar _copyableRangesFactory = /*#__PURE__*/new WeakMap();\nvar _countCopiedHeaders = /*#__PURE__*/new WeakSet();\nexport var CopyPaste = /*#__PURE__*/function (_BasePlugin) {\n  _inherits(CopyPaste, _BasePlugin);\n  var _super = _createSuper(CopyPaste);\n  function CopyPaste() {\n    var _this;\n    _classCallCheck(this, CopyPaste);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _classPrivateMethodInitSpec(_assertThisInitialized(_this), _countCopiedHeaders);\n    _defineProperty(_assertThisInitialized(_this), \"columnsLimit\", Infinity);\n    _defineProperty(_assertThisInitialized(_this), \"rowsLimit\", Infinity);\n    _defineProperty(_assertThisInitialized(_this), \"pasteMode\", 'overwrite');\n    _defineProperty(_assertThisInitialized(_this), \"uiContainer\", _this.hot.rootDocument.body);\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _enableCopyColumnHeaders, {\n      writable: true,\n      value: false\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _enableCopyColumnGroupHeaders, {\n      writable: true,\n      value: false\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _enableCopyColumnHeadersOnly, {\n      writable: true,\n      value: false\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _copyMode, {\n      writable: true,\n      value: 'cells-only'\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _isTriggeredByCopy, {\n      writable: true,\n      value: false\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _isTriggeredByCut, {\n      writable: true,\n      value: false\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _copyableRangesFactory, {\n      writable: true,\n      value: new CopyableRangesFactory({\n        countRows: function countRows() {\n          return _this.hot.countRows();\n        },\n        countColumns: function countColumns() {\n          return _this.hot.countCols();\n        },\n        rowsLimit: function rowsLimit() {\n          return _this.rowsLimit;\n        },\n        columnsLimit: function columnsLimit() {\n          return _this.columnsLimit;\n        },\n        countColumnHeaders: function countColumnHeaders() {\n          return _this.hot.view.getColumnHeadersCount();\n        }\n      })\n    });\n    _defineProperty(_assertThisInitialized(_this), \"copyableRanges\", []);\n    _defineProperty(_assertThisInitialized(_this), \"focusableElement\", void 0);\n    return _this;\n  }\n  _createClass(CopyPaste, [{\n    key: \"isEnabled\",\n    value:\n    /**\n     * Checks if the [`CopyPaste`](#copypaste) plugin is enabled.\n     *\n     * This method gets called by Handsontable's [`beforeInit`](@/api/hooks.md#beforeinit) hook.\n     * If it returns `true`, the [`enablePlugin()`](#enableplugin) method gets called.\n     *\n     * @returns {boolean}\n     */\n    function isEnabled() {\n      return !!this.hot.getSettings()[PLUGIN_KEY];\n    }\n\n    /**\n     * Enables the [`CopyPaste`](#copypaste) plugin for your Handsontable instance.\n     */\n  }, {\n    key: \"enablePlugin\",\n    value: function enablePlugin() {\n      var _this2 = this;\n      if (this.enabled) {\n        return;\n      }\n      var _this$hot$getSettings = this.hot.getSettings(),\n        settings = _this$hot$getSettings[PLUGIN_KEY];\n      if (_typeof(settings) === 'object') {\n        var _settings$pasteMode, _settings$uiContainer;\n        this.pasteMode = (_settings$pasteMode = settings.pasteMode) !== null && _settings$pasteMode !== void 0 ? _settings$pasteMode : this.pasteMode;\n        this.rowsLimit = isNaN(settings.rowsLimit) ? this.rowsLimit : settings.rowsLimit;\n        this.columnsLimit = isNaN(settings.columnsLimit) ? this.columnsLimit : settings.columnsLimit;\n        _classPrivateFieldSet(this, _enableCopyColumnHeaders, !!settings.copyColumnHeaders);\n        _classPrivateFieldSet(this, _enableCopyColumnGroupHeaders, !!settings.copyColumnGroupHeaders);\n        _classPrivateFieldSet(this, _enableCopyColumnHeadersOnly, !!settings.copyColumnHeadersOnly);\n        this.uiContainer = (_settings$uiContainer = settings.uiContainer) !== null && _settings$uiContainer !== void 0 ? _settings$uiContainer : this.uiContainer;\n      }\n      this.addHook('afterContextMenuDefaultOptions', function (options) {\n        return _this2.onAfterContextMenuDefaultOptions(options);\n      });\n      this.addHook('afterOnCellMouseUp', function () {\n        return _this2.onAfterOnCellMouseUp();\n      });\n      this.addHook('afterSelectionEnd', function () {\n        return _this2.onAfterSelectionEnd();\n      });\n      this.addHook('beforeKeyDown', function () {\n        return _this2.onBeforeKeyDown();\n      });\n      this.focusableElement = createElement(this.uiContainer);\n      this.focusableElement.addLocalHook('copy', function (event) {\n        return _this2.onCopy(event);\n      }).addLocalHook('cut', function (event) {\n        return _this2.onCut(event);\n      }).addLocalHook('paste', function (event) {\n        return _this2.onPaste(event);\n      });\n      _get(_getPrototypeOf(CopyPaste.prototype), \"enablePlugin\", this).call(this);\n    }\n\n    /**\n     * Updates the state of the [`CopyPaste`](#copypaste) plugin.\n     *\n     * Gets called when [`updateSettings()`](@/api/core.md#updatesettings)\n     * is invoked with any of the following configuration options:\n     *  - [`copyPaste`](@/api/options.md#copypaste)\n     *  - [`fragmentSelection`](@/api/options.md#fragmentselection)\n     */\n  }, {\n    key: \"updatePlugin\",\n    value: function updatePlugin() {\n      this.disablePlugin();\n      this.enablePlugin();\n      this.getOrCreateFocusableElement();\n      _get(_getPrototypeOf(CopyPaste.prototype), \"updatePlugin\", this).call(this);\n    }\n\n    /**\n     * Disables the [`CopyPaste`](#copypaste) plugin for your Handsontable instance.\n     */\n  }, {\n    key: \"disablePlugin\",\n    value: function disablePlugin() {\n      if (this.focusableElement) {\n        destroyElement(this.focusableElement);\n      }\n      _get(_getPrototypeOf(CopyPaste.prototype), \"disablePlugin\", this).call(this);\n    }\n\n    /**\n     * Copies the contents of the selected cells (and/or their related column headers) to the system clipboard.\n     *\n     * Takes an optional parameter (`copyMode`) that defines the scope of copying:\n     *\n     * | `copyMode` value            | Description                                                     |\n     * | --------------------------- | --------------------------------------------------------------- |\n     * | `'cells-only'` (default)    | Copy the selected cells                                         |\n     * | `'with-column-headers'`     | - Copy the selected cells<br>- Copy the nearest column headers  |\n     * | `'with-all-column-headers'` | - Copy the selected cells<br>- Copy all related columns headers |\n     * | `'column-headers-only'`     | Copy the nearest column headers (without copying cells)         |\n     *\n     * @param {string} [copyMode='cells-only'] Copy mode.\n     */\n  }, {\n    key: \"copy\",\n    value: function copy() {\n      var copyMode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'cells-only';\n      _classPrivateFieldSet(this, _copyMode, copyMode);\n      _classPrivateFieldSet(this, _isTriggeredByCopy, true);\n      this.getOrCreateFocusableElement();\n      this.focusableElement.focus();\n      this.hot.rootDocument.execCommand('copy');\n    }\n\n    /**\n     * Copies the contents of the selected cells.\n     */\n  }, {\n    key: \"copyCellsOnly\",\n    value: function copyCellsOnly() {\n      this.copy('cells-only');\n    }\n    /**\n     * Copies the contents of column headers that are nearest to the selected cells.\n     */\n  }, {\n    key: \"copyColumnHeadersOnly\",\n    value: function copyColumnHeadersOnly() {\n      this.copy('column-headers-only');\n    }\n    /**\n     * Copies the contents of the selected cells and all their related column headers.\n     */\n  }, {\n    key: \"copyWithAllColumnHeaders\",\n    value: function copyWithAllColumnHeaders() {\n      this.copy('with-column-group-headers');\n    }\n    /**\n     * Copies the contents of the selected cells and their nearest column headers.\n     */\n  }, {\n    key: \"copyWithColumnHeaders\",\n    value: function copyWithColumnHeaders() {\n      this.copy('with-column-headers');\n    }\n\n    /**\n     * Cuts the contents of the selected cells to the system clipboard.\n     */\n  }, {\n    key: \"cut\",\n    value: function cut() {\n      _classPrivateFieldSet(this, _isTriggeredByCut, true);\n      this.getOrCreateFocusableElement();\n      this.focusableElement.focus();\n      this.hot.rootDocument.execCommand('cut');\n    }\n\n    /**\n     * Converts the contents of multiple ranges (`ranges`) into a single string.\n     *\n     * @param {Array<{startRow: number, startCol: number, endRow: number, endCol: number}>} ranges Array of objects with properties `startRow`, `endRow`, `startCol` and `endCol`.\n     * @returns {string} A string that will be copied to the clipboard.\n     */\n  }, {\n    key: \"getRangedCopyableData\",\n    value: function getRangedCopyableData(ranges) {\n      return stringify(this.getRangedData(ranges));\n    }\n\n    /**\n     * Converts the contents of multiple ranges (`ranges`) into an array of arrays.\n     *\n     * @param {Array<{startRow: number, startCol: number, endRow: number, endCol: number}>} ranges Array of objects with properties `startRow`, `startCol`, `endRow` and `endCol`.\n     * @returns {Array[]} An array of arrays that will be copied to the clipboard.\n     */\n  }, {\n    key: \"getRangedData\",\n    value: function getRangedData(ranges) {\n      var _this3 = this;\n      var data = [];\n      var _normalizeRanges = normalizeRanges(ranges),\n        rows = _normalizeRanges.rows,\n        columns = _normalizeRanges.columns;\n\n      // concatenate all rows and columns data defined in ranges into one copyable string\n      arrayEach(rows, function (row) {\n        var rowSet = [];\n        arrayEach(columns, function (column) {\n          if (row < 0) {\n            // `row` as the second argument acts here as the `headerLevel` argument\n            rowSet.push(_this3.hot.getColHeader(column, row));\n          } else {\n            rowSet.push(_this3.hot.getCopyableData(row, column));\n          }\n        });\n        data.push(rowSet);\n      });\n      return data;\n    }\n\n    /**\n     * Simulates the paste action.\n     *\n     * For security reasons, modern browsers don't allow reading from the system clipboard.\n     *\n     * @param {string} pastableText The value to paste, as a raw string.\n     * @param {string} [pastableHtml=''] The value to paste, as HTML.\n     */\n  }, {\n    key: \"paste\",\n    value: function paste() {\n      var pastableText = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var pastableHtml = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : pastableText;\n      if (!pastableText && !pastableHtml) {\n        return;\n      }\n      var pasteData = new PasteEvent();\n      if (pastableText) {\n        pasteData.clipboardData.setData('text/plain', pastableText);\n      }\n      if (pastableHtml) {\n        pasteData.clipboardData.setData('text/html', pastableHtml);\n      }\n      this.getOrCreateFocusableElement();\n      this.onPaste(pasteData);\n    }\n\n    /**\n     * Prepares copyable text from the cells selection in the invisible textarea.\n     */\n  }, {\n    key: \"setCopyableText\",\n    value: function setCopyableText() {\n      var selectionRange = this.hot.getSelectedRangeLast();\n      if (!selectionRange) {\n        return;\n      }\n      _classPrivateFieldGet(this, _copyableRangesFactory).setSelectedRange(selectionRange);\n      var groupedRanges = new Map([['headers', null], ['cells', null]]);\n      if (_classPrivateFieldGet(this, _copyMode) === 'column-headers-only') {\n        groupedRanges.set('headers', _classPrivateFieldGet(this, _copyableRangesFactory).getMostBottomColumnHeadersRange());\n      } else {\n        if (_classPrivateFieldGet(this, _copyMode) === 'with-column-headers') {\n          groupedRanges.set('headers', _classPrivateFieldGet(this, _copyableRangesFactory).getMostBottomColumnHeadersRange());\n        } else if (_classPrivateFieldGet(this, _copyMode) === 'with-column-group-headers') {\n          groupedRanges.set('headers', _classPrivateFieldGet(this, _copyableRangesFactory).getAllColumnHeadersRange());\n        }\n        groupedRanges.set('cells', _classPrivateFieldGet(this, _copyableRangesFactory).getCellsRange());\n      }\n      this.copyableRanges = Array.from(groupedRanges.values()).filter(function (range) {\n        return range !== null;\n      }).map(function (_ref) {\n        var startRow = _ref.startRow,\n          startCol = _ref.startCol,\n          endRow = _ref.endRow,\n          endCol = _ref.endCol;\n        return {\n          startRow: startRow,\n          startCol: startCol,\n          endRow: endRow,\n          endCol: endCol\n        };\n      });\n      this.copyableRanges = this.hot.runHooks('modifyCopyableRange', this.copyableRanges);\n      var cellsRange = groupedRanges.get('cells');\n      if (cellsRange !== null && cellsRange.isRangeTrimmed) {\n        var startRow = cellsRange.startRow,\n          startCol = cellsRange.startCol,\n          endRow = cellsRange.endRow,\n          endCol = cellsRange.endCol;\n        this.hot.runHooks('afterCopyLimit', endRow - startRow + 1, endCol - startCol + 1, this.rowsLimit, this.columnsLimit);\n      }\n    }\n\n    /**\n     * Force focus on editable element.\n     *\n     * @private\n     */\n  }, {\n    key: \"getOrCreateFocusableElement\",\n    value: function getOrCreateFocusableElement() {\n      var _this$hot$getActiveEd;\n      var editableElement = (_this$hot$getActiveEd = this.hot.getActiveEditor()) === null || _this$hot$getActiveEd === void 0 ? void 0 : _this$hot$getActiveEd.TEXTAREA;\n      if (editableElement) {\n        this.focusableElement.setFocusableElement(editableElement);\n      } else {\n        this.focusableElement.useSecondaryElement();\n      }\n    }\n\n    /**\n     * Verifies if editor exists and is open.\n     *\n     * @private\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isEditorOpened\",\n    value: function isEditorOpened() {\n      var _this$hot$getActiveEd2;\n      return (_this$hot$getActiveEd2 = this.hot.getActiveEditor()) === null || _this$hot$getActiveEd2 === void 0 ? void 0 : _this$hot$getActiveEd2.isOpened();\n    }\n\n    /**\n     * Counts how many column headers will be copied based on the passed range.\n     *\n     * @private\n     * @param {Array<{startRow: number, startCol: number, endRow: number, endCol: number}>} ranges Array of objects with properties `startRow`, `startCol`, `endRow` and `endCol`.\n     * @returns {{ columnHeadersCount: number }} Returns an object with keys that holds\n     *                                           information with the number of copied headers.\n     */\n  }, {\n    key: \"populateValues\",\n    value:\n    /**\n     * Prepares new values to populate them into datasource.\n     *\n     * @private\n     * @param {Array} inputArray An array of the data to populate.\n     * @param {Array} [selection] The selection which indicates from what position the data will be populated.\n     * @returns {Array} Range coordinates after populate data.\n     */\n    function populateValues(inputArray) {\n      var selection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.hot.getSelectedRangeLast();\n      if (!inputArray.length) {\n        return;\n      }\n      var populatedRowsLength = inputArray.length;\n      var populatedColumnsLength = inputArray[0].length;\n      var newRows = [];\n      var _selection$getTopStar = selection.getTopStartCorner(),\n        startRow = _selection$getTopStar.row,\n        startColumn = _selection$getTopStar.col;\n      var _selection$getBottomE = selection.getBottomEndCorner(),\n        endRowFromSelection = _selection$getBottomE.row,\n        endColumnFromSelection = _selection$getBottomE.col;\n      var visualRowForPopulatedData = startRow;\n      var visualColumnForPopulatedData = startColumn;\n      var lastVisualRow = startRow;\n      var lastVisualColumn = startColumn;\n\n      // We try to populate just all copied data or repeat copied data within a selection. Please keep in mind that we\n      // don't know whether populated data is bigger than selection on start as there are some cells for which values\n      // should be not inserted (it's known right after getting cell meta).\n      while (newRows.length < populatedRowsLength || visualRowForPopulatedData <= endRowFromSelection) {\n        var _this$hot$getCellMeta = this.hot.getCellMeta(visualRowForPopulatedData, startColumn),\n          skipRowOnPaste = _this$hot$getCellMeta.skipRowOnPaste,\n          visualRow = _this$hot$getCellMeta.visualRow;\n        visualRowForPopulatedData = visualRow + 1;\n        if (skipRowOnPaste === true) {\n          /* eslint-disable no-continue */\n          continue;\n        }\n        lastVisualRow = visualRow;\n        visualColumnForPopulatedData = startColumn;\n        var newRow = [];\n        var insertedRow = newRows.length % populatedRowsLength;\n        while (newRow.length < populatedColumnsLength || visualColumnForPopulatedData <= endColumnFromSelection) {\n          var _this$hot$getCellMeta2 = this.hot.getCellMeta(startRow, visualColumnForPopulatedData),\n            skipColumnOnPaste = _this$hot$getCellMeta2.skipColumnOnPaste,\n            visualCol = _this$hot$getCellMeta2.visualCol;\n          visualColumnForPopulatedData = visualCol + 1;\n          if (skipColumnOnPaste === true) {\n            /* eslint-disable no-continue */\n            continue;\n          }\n          lastVisualColumn = visualCol;\n          var insertedColumn = newRow.length % populatedColumnsLength;\n          newRow.push(inputArray[insertedRow][insertedColumn]);\n        }\n        newRows.push(newRow);\n      }\n      this.hot.populateFromArray(startRow, startColumn, newRows, void 0, void 0, 'CopyPaste.paste', this.pasteMode);\n      return [startRow, startColumn, lastVisualRow, lastVisualColumn];\n    }\n\n    /**\n     * `copy` event callback on textarea element.\n     *\n     * @param {Event} event ClipboardEvent.\n     * @private\n     */\n  }, {\n    key: \"onCopy\",\n    value: function onCopy(event) {\n      if (!this.hot.isListening() && !_classPrivateFieldGet(this, _isTriggeredByCopy) || this.isEditorOpened()) {\n        return;\n      }\n      this.setCopyableText();\n      _classPrivateFieldSet(this, _isTriggeredByCopy, false);\n      var data = this.getRangedData(this.copyableRanges);\n      var copiedHeadersCount = _classPrivateMethodGet(this, _countCopiedHeaders, _countCopiedHeaders2).call(this, this.copyableRanges);\n      var allowCopying = !!this.hot.runHooks('beforeCopy', data, this.copyableRanges, copiedHeadersCount);\n      if (allowCopying) {\n        var textPlain = stringify(data);\n        if (event && event.clipboardData) {\n          var textHTML = _dataToHTML(data, this.hot.rootDocument);\n          event.clipboardData.setData('text/plain', textPlain);\n          event.clipboardData.setData('text/html', [META_HEAD, textHTML].join(''));\n        } else if (typeof ClipboardEvent === 'undefined') {\n          this.hot.rootWindow.clipboardData.setData('Text', textPlain);\n        }\n        this.hot.runHooks('afterCopy', data, this.copyableRanges, copiedHeadersCount);\n      }\n      _classPrivateFieldSet(this, _copyMode, 'cells-only');\n      event.preventDefault();\n    }\n\n    /**\n     * `cut` event callback on textarea element.\n     *\n     * @param {Event} event ClipboardEvent.\n     * @private\n     */\n  }, {\n    key: \"onCut\",\n    value: function onCut(event) {\n      if (!this.hot.isListening() && !_classPrivateFieldGet(this, _isTriggeredByCut) || this.isEditorOpened()) {\n        return;\n      }\n      this.setCopyableText();\n      _classPrivateFieldSet(this, _isTriggeredByCut, false);\n      var rangedData = this.getRangedData(this.copyableRanges);\n      var allowCuttingOut = !!this.hot.runHooks('beforeCut', rangedData, this.copyableRanges);\n      if (allowCuttingOut) {\n        var textPlain = stringify(rangedData);\n        if (event && event.clipboardData) {\n          var textHTML = _dataToHTML(rangedData, this.hot.rootDocument);\n          event.clipboardData.setData('text/plain', textPlain);\n          event.clipboardData.setData('text/html', [META_HEAD, textHTML].join(''));\n        } else if (typeof ClipboardEvent === 'undefined') {\n          this.hot.rootWindow.clipboardData.setData('Text', textPlain);\n        }\n        this.hot.emptySelectedCells('CopyPaste.cut');\n        this.hot.runHooks('afterCut', rangedData, this.copyableRanges);\n      }\n      event.preventDefault();\n    }\n\n    /**\n     * `paste` event callback on textarea element.\n     *\n     * @param {Event} event ClipboardEvent or pseudo ClipboardEvent, if paste was called manually.\n     * @private\n     */\n  }, {\n    key: \"onPaste\",\n    value: function onPaste(event) {\n      if (!this.hot.isListening() || this.isEditorOpened()) {\n        return;\n      }\n      if (event && event.preventDefault) {\n        event.preventDefault();\n      }\n      var pastedData;\n      if (event && typeof event.clipboardData !== 'undefined') {\n        var textHTML = sanitize(event.clipboardData.getData('text/html'), {\n          ADD_TAGS: ['meta'],\n          ADD_ATTR: ['content'],\n          FORCE_BODY: true\n        });\n        if (textHTML && /(<table)|(<TABLE)/g.test(textHTML)) {\n          var parsedConfig = htmlToGridSettings(textHTML, this.hot.rootDocument);\n          pastedData = parsedConfig.data;\n        } else {\n          pastedData = event.clipboardData.getData('text/plain');\n        }\n      } else if (typeof ClipboardEvent === 'undefined' && typeof this.hot.rootWindow.clipboardData !== 'undefined') {\n        pastedData = this.hot.rootWindow.clipboardData.getData('Text');\n      }\n      if (typeof pastedData === 'string') {\n        pastedData = parse(pastedData);\n      }\n      if (pastedData && pastedData.length === 0) {\n        return;\n      }\n      if (this.hot.runHooks('beforePaste', pastedData, this.copyableRanges) === false) {\n        return;\n      }\n      var _this$populateValues = this.populateValues(pastedData),\n        _this$populateValues2 = _slicedToArray(_this$populateValues, 4),\n        startRow = _this$populateValues2[0],\n        startColumn = _this$populateValues2[1],\n        endRow = _this$populateValues2[2],\n        endColumn = _this$populateValues2[3];\n      this.hot.selectCell(startRow, startColumn, Math.min(this.hot.countRows() - 1, endRow), Math.min(this.hot.countCols() - 1, endColumn));\n      this.hot.runHooks('afterPaste', pastedData, this.copyableRanges);\n    }\n\n    /**\n     * Add copy and cut options to the Context Menu.\n     *\n     * @private\n     * @param {object} options Contains default added options of the Context Menu.\n     */\n  }, {\n    key: \"onAfterContextMenuDefaultOptions\",\n    value: function onAfterContextMenuDefaultOptions(options) {\n      options.items.push({\n        name: '---------'\n      }, copyItem(this));\n      if (_classPrivateFieldGet(this, _enableCopyColumnHeaders)) {\n        options.items.push(copyWithColumnHeadersItem(this));\n      }\n      if (_classPrivateFieldGet(this, _enableCopyColumnGroupHeaders)) {\n        options.items.push(copyWithColumnGroupHeadersItem(this));\n      }\n      if (_classPrivateFieldGet(this, _enableCopyColumnHeadersOnly)) {\n        options.items.push(copyColumnHeadersOnlyItem(this));\n      }\n      options.items.push(cutItem(this));\n    }\n\n    /**\n     * Force focus on focusableElement.\n     *\n     * @private\n     */\n  }, {\n    key: \"onAfterOnCellMouseUp\",\n    value: function onAfterOnCellMouseUp() {\n      // Changing focused element will remove current selection. It's unnecessary in case when we give possibility\n      // for fragment selection\n      if (!this.hot.isListening() || this.isEditorOpened() || this.hot.getSettings().fragmentSelection) {\n        return;\n      }\n      this.getOrCreateFocusableElement();\n      this.focusableElement.focus();\n    }\n\n    /**\n     * Force focus on focusableElement after end of the selection.\n     *\n     * @private\n     */\n  }, {\n    key: \"onAfterSelectionEnd\",\n    value: function onAfterSelectionEnd() {\n      if (this.isEditorOpened()) {\n        return;\n      }\n      this.getOrCreateFocusableElement();\n      if (this.hot.getSettings().fragmentSelection && this.focusableElement.getFocusableElement() !== this.hot.rootDocument.activeElement && getSelectionText()) {\n        return;\n      }\n      this.setCopyableText();\n      this.focusableElement.focus();\n    }\n\n    /**\n     * `beforeKeyDown` listener to force focus of focusableElement.\n     *\n     * @private\n     */\n  }, {\n    key: \"onBeforeKeyDown\",\n    value: function onBeforeKeyDown() {\n      if (!this.hot.isListening() || this.isEditorOpened()) {\n        return;\n      }\n      var activeElement = this.hot.rootDocument.activeElement;\n      var activeEditor = this.hot.getActiveEditor();\n      if (!activeEditor || activeElement !== this.focusableElement.getFocusableElement() && activeElement !== activeEditor.select) {\n        return;\n      }\n      this.getOrCreateFocusableElement();\n      this.focusableElement.focus();\n    }\n\n    /**\n     * Destroys the `CopyPaste` plugin instance.\n     */\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (this.focusableElement) {\n        destroyElement(this.focusableElement);\n        this.focusableElement = null;\n      }\n      _get(_getPrototypeOf(CopyPaste.prototype), \"destroy\", this).call(this);\n    }\n  }], [{\n    key: \"PLUGIN_KEY\",\n    get: function get() {\n      return PLUGIN_KEY;\n    }\n  }, {\n    key: \"SETTING_KEYS\",\n    get: function get() {\n      return [PLUGIN_KEY].concat(SETTING_KEYS);\n    }\n  }, {\n    key: \"PLUGIN_PRIORITY\",\n    get: function get() {\n      return PLUGIN_PRIORITY;\n    }\n\n    /**\n     * The maximum number of columns than can be copied to the clipboard.\n     *\n     * @type {number}\n     * @default Infinity\n     */\n  }]);\n  return CopyPaste;\n}(BasePlugin);\nfunction _countCopiedHeaders2(ranges) {\n  var _normalizeRanges2 = normalizeRanges(ranges),\n    rows = _normalizeRanges2.rows;\n  var columnHeadersCount = 0;\n  for (var row = 0; row < rows.length; row++) {\n    if (rows[row] >= 0) {\n      break;\n    }\n    columnHeadersCount += 1;\n  }\n  return {\n    columnHeadersCount: columnHeadersCount\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}